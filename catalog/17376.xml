<?xml version="1.0" encoding="UTF-8"?>
<xml><thread id="17376"><title>Finding the AI_PAIN event?</title><posts><post id="p158530" date="Posted: Sun Oct 01, 2006 11:25 am "><author>BloodRayne</author><body><![CDATA[<div class="postbody">Hey all,&#13;<br /><br />I'm trying to find the AI_PAIN event for monsters via script. I've tried printing a testline to the console in a couple of different events in the ai_monster_base.script but I can't put my finger on which routine is called everytime an enemy experiences pain. &#13;<br /><br />I thought that the state_combat was a pretty good place to start but the testline gets printed only occasionally. I've added an if statement to the state_combat loop and test that in a map. When I spawn an imp and shoot at it, the line doesn't get printed (ie the code isn't called). When I wait a while and run around it and then shoot it, it sometimes gets called.&#13;<br /><br />I want to insert some code at the point where a monster experiences pain. Anybody know which place would be best for that in script? Can I do it in the monster_base script, saving me the headacke of having to edit each specific monster script?&#13;<br /><br />code:&#13;<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">/*<br />=====================<br />monster_base::state_Combat<br />=====================<br />*/<br />void monster_base::state_Combat() {<br />   float attack_flags;<br /><br />   eachFrame {<br />      faceEnemy();<br />      if ( AI_PAIN ) {<br />         sys.print( "Having pain now, thank you\n" );<br />      }<br /><br />      if ( AI_ENEMY_IN_FOV ) {<br />         lookAtEnemy( 1 );<br />      }<br /><br />      if ( sys.influenceActive() ) {<br />         waitFrame();<br />         continue;<br />      }<br /><br />      if ( AI_ENEMY_DEAD ) {<br />         enemy_dead();<br />      }<br /><br />      attack_flags = check_attacks();<br />      if ( attack_flags ) {<br />         do_attack( attack_flags );<br />         continue;<br />      }<br /><br />      if ( !combat_chase() ) {<br />         locateEnemy();<br />         if ( !combat_chase() ) {<br />            combat_lost();<br />         }<br />      }<br /><br />      waitFrame();<br />   }<br />}<br /></div></div>]]></body></post><post id="p158543" date="Posted: Sun Oct 01, 2006 4:38 pm "><author>The Happy Friar</author><body><![CDATA[<div class="postbody">it looks like ai_pain may be in the sdk code.  I can't find anything but true/false checks/assign for it in the scripts.</div>]]></body></post><post id="p158908" date="Posted: Thu Oct 05, 2006 11:22 am "><author>jcdenton22</author><body><![CDATA[<div class="postbody"><div class="quotetitle">BloodRayne wrote:</div><div class="quotecontent">I can't put my finger on which routine is called everytime an enemy experiences pain. <br /></div><br /><br />AI_PAIN is the script variable that is set to true everytime an AI entity recieves any sort of damage, so dont need to look at anything else. <br /><br /><div class="quotetitle">BloodRayne wrote:</div><div class="quotecontent">I thought that the state_combat was a pretty good place to start but the testline gets printed only occasionally. I've added an if statement to the state_combat loop and test that in a map. When I spawn an imp and shoot at it, the line doesn't get printed (ie the code isn't called). When I wait a while and run around it and then shoot it, it sometimes gets called.<br /></div>&#13;<br /><br />Monster's states are always changing and there's only one state function running at a time, so there's no guarantee that state_combat will always be called every-time you shoot a monster. All you need to do now is run constant check on AI_PAIN's state and to do that try these steps:&#13;<br /><br />1.write a member function, say checkDamage() for instance, for ai_monster_base. In this function check AI_PAIN's state. &#13;<br /><br />2.start the thread called checkDamage from within monster_base::init().&#13;<br /><br />3.Additionally, you'll need to kill the thread as soon as monster is dead or the game will try to execute the thread even after the monster is dead which would ultimately lead to map shutdown. You can kill the thread from within monster_base::state_kill</div>]]></body></post></posts></thread></xml>
