<?xml version="1.0" encoding="UTF-8"?>
<xml><thread id="2550"><title>Weapon/item models</title><posts><post id="p25256" date="Posted: Mon Jul 05, 2004 12:43 am "><author>goliathvt</author><body><![CDATA[<div class="postbody"><span style="font-size: 200%; line-height: normal">This info pre-dates Doom 3 and is obsolete.  Read it if you're bored. <img src="https://web.archive.org/web/20091206235222im_/http://www.doom3world.org/phpbb2/images/smilies/icon_wink.gif" alt=";)" title="Wink" /> - G</span>
<br /><br />Most of the weapons are missing their corresponding models when you place them in your map as something that can be picked up by the player.  For example, placing the shotgun in your map usually results in a fist protruding from the floor... although when you touch it, you do indeed pick up a shotgun and it functions normally.  This is because the weapon_shotgun entity is just using the idle mesh used when you have the shotgun weapon equipped.  This mesh also includes the fists and a spare shotgun shell.. all of the elements needed for the other shotgun animations, like reloading, firing, etc., and that's why you see a fist protruding from the floor.  
<br /><br />Anyhoo, if you have Maya or you otherwise know how to convert an <span style="font-weight: bold">obj</span> to a <span style="font-weight: bold">md5mesh</span>, you can fix this.  
<br /><br />The first thing you will need is to convert the weapon's idle md5mesh file into an obj file.  Use bozo's md5mesh2obj utility to do this:
<br /><br /><!-- m --><a class="postlink" href="https://web.archive.org/web/20091206235222/http://www.untergrund.ch/md5mesh2obj.zip">http://www.untergrund.ch/md5mesh2obj.zip</a><!-- m -->
<br /><br />I'll walk you through the process for the machine gun.
<br /><br />Run the converter on the models/weapons/machinegun/cycles/idle1.md5mesh file in order to get an idle1.obj file and an idle1.mtr file.  Move the obj and mtr files here:
<br /><br /><span style="font-weight: bold">models/weapons/machinegun</span>
<br /><br />Now open the .obj in your particular 3D program.  I'm using Maya, but the basic steps are the same.
<br /><br />Basically, we need to remove the extra items... the fists, muzzleflash plane, extra ammo, etc. so all you have left is the weapon.  Rotate it appropriately.
<br /><br />Now, because the md5 converter doesn't save the path information to the materials properly, we need to re-apply them.  If you don't know how to do this and you're not using Maya or Lightwave, hopefully someome else here can help you, as I'm only familiar with these two 3D packages.  However, since you can't use Lightwave (as far as I know) to create md5 files, Maya will have to do.
<br /><br />In Maya, open the hypershade and create a shading map.  Next, click "Shading Map Color", choose file, "as projection" and use "cubic" as the projection type.   For the image file to use, browse to the color map of the machinegun weapon (this is already provided in D3 and is usually in top level of each weapon's folder... i.e. "machinegun.tga" in models/weapons/machinegun).  Now close the material and reopen it.  For the "Shader", use a phong material when you're prompted.  On the phong, click the "Diffuse" inputs icon, and again apply a file, "as projection", use "cubic" for proj. type, and again use the "machinegun.tga" file.
<br /><br />Keeping the hypershade open, select the weapon in the perspective view.  Now right-click the material you just created and choose "Apply Material to Selection".  
<br /><br />If you have any problems with this or need extra info, check out my tutorial found here:
<br /><br /><!-- m --><a class="postlink" href="https://web.archive.org/web/20091206235222/http://www.doom3world.org/phpbb2/viewtopic.php?t=2487">http://www.doom3world.org/phpbb2/viewtopic.php?t=2487</a><!-- m -->
<br /><br />and just hop to the Hypershade section.
<br /><br /><span style="font-style: italic">Note that when you apply the material, it won't look right in the 3D program.  That's okay... all we want is to be able to have D3 know where to look for the materials... it'll look fine in the game.</span>
<br /><br />And now the last step... in order to be able to export the weapon back into the md5mesh format, you need to create at least one joint and then skin-&gt;bind skin-&gt;smooth bind it to the model.  Save the file.  
<br /><br />Once this is done, we need to make some changes to the weapons.def file.
<br /><br />You'll need to make 2 changes for each weapon:
<br /><br />One is the export line so we get our new md5mesh, the other is making sure to reference the model in the "model" key of the weapon's entity definition.
<br /><br />So, again using the machinegun as an example, here's the export line:
<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">export {<br /><br />   // in-game weapon models<br />   mesh   models/weapons/machinegun/machinegun.mb<br />   // END OF CHANGES<br /><br />   // Begin rest of weapons.def file...<br /><br />   // shotgun<br />   -options blah blah blah blah blah<br />...<br />}<br /><br /></div><br /><br />Note that this line must appear ABOVE the // shotgun... -options etc. line... if you put it below, D3 will try to re-parent the fists, muzzleflash plane and the other things we removed earlier from the model, and the export will fail.  <br /><br />Now for the entityDef:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">entityDef weapon_machinegun {<br />   "editor_color"         ".3 .3 1"<br />   "editor_mins"         "-16 -16 0"<br />   "editor_maxs"         "16 16 32"<br /><br />   "editor_usage"         ""<br /><br />   "spawnclass"         "idItem"<br />   "size"               "32 32 32"<br />   // THIS IS THE LINE TO CHANGE<br />   "model"             "models/weapons/machinegun/machinegun.md5mesh"<br />   // END OF CHANGES<br />   "viewmodel"          "models/weapons/machinegun/cycles/idle1.md5mesh" <br /></div>
<br /><br />The "model" is the in-game/weapon-as-item model.  The "viewmodel" is what you see when you're holding/using the weapon.
<br /><br />I think that's it.  Let me know if you have any questions or problems.
<br /><br />Goliath</div>]]></body></post><post id="p25264" date="Posted: Mon Jul 05, 2004 6:21 am "><author>BNA!</author><body><![CDATA[<div class="postbody">Thanks goliath - quite informative!
<br /><br />Never bothered with this topic, just accepted absence of weapon models.</div>]]></body></post><post id="p25271" date="Posted: Mon Jul 05, 2004 9:02 am "><author>der_ton</author><body><![CDATA[<div class="postbody">Thankyouthankyouthankyou Goliath... once for doing this tutorial, and twice for giving this another reason to exist:
<br /><!-- m --><a class="postlink" href="https://web.archive.org/web/20091206235222/http://www.doom3world.org/phpbb2/viewtopic.php?t=1309">http://www.doom3world.org/phpbb2/viewtopic.php?t=1309</a><!-- m -->
<br />I once wrote a converter from ASE and OBJ to MD5Mesh. Ofcourse it's pretty useless for anything that moves, because it won't generate a skeleton (since there is none in an ase or obj to begin with), but for static weapon models it sure is ok. And so much cheaper than Maya.  <img src="https://web.archive.org/web/20091206235222im_/http://www.doom3world.org/phpbb2/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br />So the work could be done with Bozo's md5-&gt;obj converter, any 3d editor that reads and writes obj (Blender, Wings3D), and then the ase/obj-&gt;md5 converter. 
<br />BTW, I think it should also be possible to use an ASE model for these static weapon models.</div>]]></body></post><post id="p25322" date="Posted: Tue Jul 06, 2004 1:25 pm "><author>goliathvt</author><body><![CDATA[<div class="postbody">Yes, ASE's do work for static weapon models... that's what the chaingun currently is... I think it's "vulkan.ase" or something like that.  In fact, when I was first testing things and toying with the idea of fixing the pickup-weapon models, I got the machine gun to show up by using the chaingun's vulkan.ase model.  Worked like a charm.
<br /><br />Goliath</div>]]></body></post></posts></thread></xml>
