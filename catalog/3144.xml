<?xml version="1.0" encoding="UTF-8"?>
<xml><thread id="3144"><title>Level Scripting Tutorial 1 - (UPDATED 10/04)</title><posts><post id="p30196" date="Posted: Sat Aug 07, 2004 5:36 pm "><author>rich_is_bored</author><body><![CDATA[<div class="postbody"><span style="font-size: 200%; line-height: normal"><span style="font-weight: bold">Level Scripting Tutorial 1</span></span>&#13;<br /><br /><span style="font-size: 134%; line-height: normal"><span style="font-weight: bold">Introduction</span></span>&#13;<br /><br />The scripting language in Doom 3 is very powerful. You can create very complex machinery or with the aid of some trigger entities landscape altering geometry. Many of these effects can be accomplished with a small amount of code as long as you gain a good understanding of the scripting commands and their syntax.	&#13;<br /><br />Those of you familiar with programming will find scripting in Doom 3 fairly easy and similar to languages like C++, Java or even ActionScript. If you do happen to have experience with a programming language, congratulations, you definitely will have an edge.&#13;<br /><br />Don’t let that discourage you. Not all of us are software engineers. I am no more than just a hobbyist myself. But if I can script for Doom 3 than any of you can.&#13;<br /><br />You'll need the zip below.&#13;<br /><br /><!-- m --><a class="postlink" href="https://web.archive.org/web/20070509181516/http://www.pcgamemods.com/mod/6918.html">http://www.pcgamemods.com/mod/6918.html</a><!-- m -->&#13;<br /><br /><span style="font-size: 134%; line-height: normal"><span style="font-weight: bold">Basics of Programming</span></span>&#13;<br /><br />When you are scripting you are telling objects to perform certain tasks. But these objects don’t understand English. You need to talk to them in a manner that they can understand.&#13;<br /><br />For the time being we will relate to the way people perform tasks. Let’s say you want to open a door. We all know how to do so but this simple task can be broken down into a series of basic steps.&#13;<br /><br />Opening a Door&#13;<br /><ol style="list-style-type: arabic-numbers"><li>Extend your hand to reach the door.</li><li>Grasp the knob.</li><li>Turn the knob.</li><li>Pull the knob.</li></ol>To even make things worse those basic steps can be broken down even further.<br /><br />Extend your hand to reach the door.<br /><ol style="list-style-type: arabic-numbers"><li>Raise your arm.</li><li>Rotate your forearm.</li><li>Open your hand.</li></ol><br />       You can see how even a simple task like opening a door is actually comprised of a lengthy list of basic actions. This is the basis of scripting in Doom 3. You cannot just tell a machine to run. You have to tell all its moving parts to perform basic actions.<br /><br /><span style="font-size: 134%; line-height: normal"><span style="font-weight: bold">Overview of Commands</span></span><br /><br />The following is a list of commands and symbols used in scripts. This list is rather incomplete as the function of all the commands is not yet known. Your understanding of them is not important yet. They are merely for reference. I suggest you print them out so you can work with them at your side as you go. I will make reference to this section frequently throughout the tutorial.<br /><br /><span style="font-weight: bold">EDIT:</span> Level Script Commands have been moved to the <a href="https://web.archive.org/web/20070509181516/http://www.doom3world.org/phpbb2/viewtopic.php?t=3681" class="postlink">Scripting Command Reference</a> in an attempt to compile a more complete and accurate reference.<br /><br />The remaining definitions below are related more to general syntax rather than commands.<br /><br /><span style="font-weight: bold">$</span><br />...<span style="color: green"><span style="font-weight: bold">Definition</span></span>:	Precedes all variable references. Informs the engine that the following is a variable reference.<br />...<span style="color: orange"><span style="font-weight: bold">Syntax</span></span>:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   $entity_name.rotateTo($position);</div><br /><br /><span style="font-weight: bold">;</span><br />...<span style="color: green"><span style="font-weight: bold">Definition</span></span>:	Follows all commands. More than one command may exist on a single line. Informs the engine that the following is the end of a command.<br />...<span style="color: orange"><span style="font-weight: bold">Syntax</span></span>:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   $entity_name.rotateTo($position);</div><br /><br /><span style="font-weight: bold">//</span><br />...<span style="color: green"><span style="font-weight: bold">Definition</span></span>:	Comment. Declares the text from this point to the end of the line a comment and is not executed. Can also be used to null out a line of code for debugging.<br />...<span style="color: orange"><span style="font-weight: bold">Syntax</span></span>:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   // This text will not be executed.</div><br />...<span style="color: red"><span style="font-weight: bold">Example</span></span>:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   //sys.print ("bO1nG!\n");</div><br /><br /><span style="font-weight: bold">/*</span> and <span style="font-weight: bold">*/</span><br />...<span style="color: green"><span style="font-weight: bold">Definition</span></span>: Comment. Declares the text from /* to */ a comment and the text contained therein is not executed. Can also be used to null out a portion of code for debugging.<br />...<span style="color: orange"><span style="font-weight: bold">Syntax</span></span>:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   /* This text will not be executed. */</div><br />...<span style="color: red"><span style="font-weight: bold">Example</span></span>:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   sys.random (2) /* + 7 */;</div><br /><br /><span style="font-weight: bold">EDIT:</span> Keep in mind that all commands are case sensitive. For example...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">sys.waitFor($thing);</div><br /><br /><br />... will work fine but ...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">sys.waitfor($thing);</div><br /><br />... will not.<br /><br /><span style="font-size: 134%; line-height: normal"><span style="font-weight: bold">Beginner: Creating a Strange Spinning Box</span></span><br /><br />Before you can run you have to learn to walk. You can’t just jump in and make some complex machine. You have to start small. We will start with just a simple box that rotates. Then we will fool around with its properties a little to gain a better understanding of what you’ve coded actually does.<br /><br /><span style="font-weight: bold">Two Methods to Call a Script For Exectution</span><br /><br />There are two methods to assign your script file as the intended level script for exectution in a map. The "same name" method and the "namespace" method.<br /><br /><span style="font-weight: bold">Same Name</span><br /><br />The "same name" method requires you do two things. First, you must ensure both the map and script share the same name. Second, you must place both files in the same folder. This is the method we'll be using in this tutorial because to me, it is the easiest.<br /><br /><span style="font-weight: bold">Namespace</span><br /><br />The "namespace" method is used with Doom 3's vanilla maps. This method will not work with custom maps unless you edit the file scripts/doom_main.script in pak000.pk4.<br /><br />The only real benefit of using this method is that it permits you to store your script in a folder separate from your map. Just as an example, if you were to use this method with the files in this tutorial you'd have to add this line to scripts/doom_main.script...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">#include "scripts/rich_scripting_tutorial_1.script"</div><br /><br />Then you'd have to add the following key/value pair to the worldspawn entity in rich_scripting_tutorial_1.map...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Key: call<br />Value: rich_scripting_tutorial_1::main</div><br /><br />Then you'd have to enclose your entire script in a namespace command like so...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">namespace rich_scripting_tutorial_1 {<br /><br />... code ...<br /><br />} // close namespace</div><br /><br />Personally, I suggest that you refrain from using this method with your maps. I can't really understand the logic in changing scripts inside the game's PK4s to make it work, rather than appending a modification. You risk screwing the game up trying this.<br /><br /><span style="font-weight: bold">Getting on With it Already</span><br /><br />I have already created the map we will be writing a script for. It was setup using the "same name" method for simplicity's sake. We will view this map in the editor to gain some familiarity with the basic requirements for a script to function. All you'll be required to do is ensure your map and script share the same name and location.<br /><br />Extract rich_scripting_tutorial_1.map to <span style="font-weight: bold">[Your Doom 3 Directory]\base\maps</span>. Open rich_scripting_tutorial_1.map in the editor. This map is a simple room with one light, a player starting point, and a func_mover which will be controlled with rich_scripting_tutorial_1.script.<br /><br />Select the func_mover in the center of the room. Select the Inspector window and click the entity tab to bring up the entity property sheet. Notice that the name is set to <span style="font-weight: bold">cube</span>. The model key will also change when this key is set. By referencing this name we can instruct the box to perform actions.<br /><br />Now open example.script in a text editor. I suggest you get a good text editor such as editpad but notepad will work fine for level scripts. Just know that notepad is not very good at interpreting EOL markers and such so many DOS based text files may appear jumbled.<br /><br />A link that is currently good is <a href="https://web.archive.org/web/20070509181516/http://tucows.kr.psi.net/files/EditPadClassic.zip" class="postlink">http://tucows.kr.psi.net/files/EditPadClassic.zip</a><br /><br />A basic script is composed like this script. Don’t try and figure it out yet even though the comments do a pretty good job of explaining things. This is not the script that we will be using to control our cube. You will be coding that. This is just an example. I will explain the basics to you but first I need to get you into a habit of coding readable script.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// sets up moving parts for motion<br /><br />void setup_objects()<br />{<br />   $block.bind($light1);<br />}<br /><br />// function for moving block up<br /><br />void block_move_up ()<br />{<br />   $block.move(UP, 20);<br />   sys.waitFor ($block);<br />}<br /><br />// function for moving block down<br /><br />void block_move_down ()<br />{<br />   $block.move(DOWN, 20);<br />   sys.waitFor ($block);<br />}<br /><br />// function that executes when script is loaded<br /><br />void main ()<br />{<br />   setup_objects ();<br />   block_move_up ();<br />   block_move_down ();<br />}</div><br /><br />First off, I add a lot of comments. I suggest you do the same because as you get into making more and more complex scripts these comments will keep you from getting lost in your own code.<br /><br />Second learn to use the tab key! Indent your code so that you can tell just by looking what code is contained in the curly brackets. If you don’t use comments, at least indent. This will aid you the most when trying to debug your script by preventing you from getting confused.<br /><br />Now go ahead and take a look at the first line.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// sets up moving parts for motion</div><br /><br /><span style="font-weight: bold">//</span> will declare the remaining portion of the line a comment. Everything between the double forward slash and the end of the line will not be executed. I hate to reiterate but, take advantage of comments! Describe in your own words what is taking place by using comments.<br /><br /><br />The next few lines of code define a function. A function is basically a way of isolating a segment of commands so that they can be executed with one command. A function can be named anything that you choose as long as it forms one word. Again be descriptive when naming your functions so you can tell just by looking what it does.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void setup_objects()<br />{<br />   $block.bind($light1);<br />}</div><br /><br />Now anytime in the script if I were to write the statement <span style="font-weight: bold">setup_objects ();</span> the program would execute the code contained within the curly brackets above. In this case it would execute the line.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">$block.bind($light1);</div><br /><br />Now examine the functions <span style="font-weight: bold">block_move_up</span> and <span style="font-weight: bold">block_move_down</span> and try and determine what they do based on their names and comments alone.<br /><br />If you guessed that they move a block your right. Now, without even knowing what the code within those two functions do, you have a pretty good idea of what happens when they are called.<br /><br />Now let’s look at the end of the script. Look at the function named <span style="font-weight: bold">main</span>.<br /><br />Notice that the functions <span style="font-weight: bold">setup_objects</span>, <span style="font-weight: bold">block_move_up</span>, and <span style="font-weight: bold">block_move_down</span> are called within the function <span style="font-weight: bold">main</span>. This function is run when your script is loaded.<br /><br />So, what happens when a map with the necessary entities and key values is loaded? I’ll give you a quick run through.<br /><br /><ol style="list-style-type: arabic-numbers"><li>The game looks in the running map directory for a script that shares the same name.</li><li>It loads all the functions defined in the script to memory.</li><li>It executes the function <span style="font-weight: bold">main</span>.</li></ol>4a. The function <span style="font-weight: bold">setup_objects</span> is run.<br />4b. The function <span style="font-weight: bold">block_move_up</span> is run.<br />4c. The function <span style="font-weight: bold">block_move_down</span> is run.<br /><br /><br />Now with a basic understanding of how to script we will get into the details of writing the script to rotate the cube in rich_scripting_tutorial_1.map. Remember the script must share the same name as the map and be stored in the map's directory. In this case, the script will be named rich_scripting_tutorial_1.script and will be stored in <span style="font-weight: bold">[Your Doom 3 Directory]\base\maps</span>.<br /><br />So, create a file named rich_scripting_tutorial_1.script, using your text editor, in the folder mentioned above. Now type the following code into your text editor and save.<br /><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// function that executes when the script is loaded<br /><br />void main ()<br />{<br />}</div><br /><br />Now we have created a basic script with no real code to execute. As it is now the map would run without errors but nothing would happen. We need to define a function to spin the cube.<br /><br />Before we do that notice that there is no function to setup objects. There is no need to do so if your sole intent is to make a spinning cube. But, take note because we will be adding one later when we experiment with our script.<br /><br />Now add the following code to your script above everything else.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// function that rotates cube once 360 degrees<br /><br />void cube_rotate ()<br />{<br />   $cube.rotate('0 360 0');<br />}</div><br /><br />This code will define a function <span style="font-weight: bold">cube_rotate</span> and when called will rotate the cube once 360 degrees around the Y axis. Notice that in this case I am calling <span style="font-weight: bold">cube</span> with <span style="font-weight: bold">$cube</span> inserting a period and then the command <span style="font-weight: bold">rotate</span> with its associated parameters followed by a semi-colon. The command rotate is similar to the command sway in that it does not need to be called more than once. It will continue to rotate until another map is loaded.<br /><br />Look in the Overview of Commands section for a detailed description of <span style="font-weight: bold">rotate</span>, <span style="font-weight: bold">"."</span>, <span style="font-weight: bold">"$"</span>, and <span style="font-weight: bold">";"</span>. There you will learn their basic syntax and function.<br /><br />Now, add this line to your <span style="font-weight: bold">main</span> function.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">cube_rotate();</div><br /><br />The code should look like this.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// function that rotates cube once 360 degrees<br /><br />void cube_rotate ()<br />{<br />   $cube.rotate('0 360 0');<br />}<br /><br />// function that executes when the script is loaded<br /><br />void main ()<br />{<br />   cube_rotate();<br />}</div><br /><br />If you haven’t already saved do so. Now the script should run. First run Doom 3 and then, in the console, type <span style="font-weight: bold">dmap maps\rich_scripting_tutorial_1.map</span>. This will compile the map.<br /><br /><br />Now we can type <span style="font-weight: bold">map rich_scripting_tutorial_1.map</span> and the map will load. You should see a box spinning in the center of the room around the Y axis.<br /><br />Now we are going to have some fun. If you are in full screen switch to windowed mode by pressing ALT + ENTER. We are going to edit the script and see its effects real time.<br /><br />Switch to your text editor by pressing ALT + TAB. Now we will try changing the values in this line.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">$cube.rotate('0 360 0');</div><br /><br />Try changing 360 to -360. Save the script. Switch back to Doom 3 and reload the map. Because the map has not changed and only the script, you only have to reload the map to see your changes.<br /><br />Now the cube should be spinning the opposite direction on the Y axis. Have some fun experimenting with changing any of the 3 values and see what the result is. When you are done change the line back to its original values.<br /><br />Because the cube appears to never stop you may not have noticed that it makes one rotation every second. But in fact, it does stop. It just does not stay that way long enough for you to see it. This is the default time that all new objects follow. Regardless of the movement, be it rotational or linear, it will always take one second to complete the motion.<br /><br />Now we are going to change a couple of the time values.<br /><br />Change your code to look like the following.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// function that rotates cube 360 degrees<br /><br />void cube_rotate ()<br />{<br />   $cube.accelTime(3);<br />   $cube.decelTime(3);<br />   $cube.time (10);<br />   while (1) {<br />      $cube.rotate('0 360 0');<br />      sys.waitFor ($cube);<br />   }<br />}<br /><br />// function that executes when the script is loaded<br /><br />void main ()<br />{<br />   cube_rotate();<br />}</div><br /><br />I have added quite a few commands at once. I needed to in order for the script to function properly. Now save the script and reload the map.<br /><br />Now you will see the cube slowly accelerate for 3 seconds, maintain its speed for 4 seconds and then decelerate for 3 seconds. But it no longer rotates the cube just 360 degrees. Why? Because I have assigned a time of 10 seconds to the cube.<br /><br />Well, we have to analyze the changes that have been made to determine this. I have added four commands to the script. Refer to the Overview of commands for a detailed definition and syntax.<br /><br /><ul><li>accelTime</li><li>decelTime</li><li>time</li><li>while</li></ul><br />The three commands accelTime, decelTime and time are used in conjunction to calculate the speed of the cube during its rotation. The command time will assign the total time it takes to complete the movement. accelTime and decelTime are the ranges of time that the cube will need to speed up and then slow down.<br /><br />Because the cube now has a time assigned to it, it will not continue rotating. In order to make the cube continue to rotate we must enclose the rotation portion of code in a loop.<br />I did that with the while loop.<br /><br />Now we are near complete. Remember when I mentioned about creating a function to setup your moving objects. Well, now we are going to bind two objects together. No, don’t start back up the editor to add something to the map. We don’t need to. We already have a light to bind to the cube. Change your code to look like the following.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// function that binds the light to the cube<br /><br />void setup_objects ()<br />{<br />   $light.bind ($cube);<br />}<br /><br />// function that rotates cube 360 degrees<br /><br />void cube_rotate ()<br />{<br />   $cube.accelTime(3);<br />   $cube.decelTime(3);<br />   $cube.time (10);<br />   while (1) {<br />      $cube.rotate('0 0 360');<br /><br />      sys.waitFor ($cube);<br />   }<br />}<br /><br />// function that executes when the script is loaded<br /><br />void main ()<br />{<br />   setup_objects();<br />   cube_rotate();<br />}</div>&#13;<br /><br />First a function was created to setup the objects before any movement occurs and added too our <span style="font-weight: bold">main</span> function. Then the rotation was changed to rotate the cube on the Z axis.&#13;<br /><br />Let’s look at the practical application of the bind command. &#13;<br /><br />A bind command is used to bind the objects together at there respective distances. The object before the period becomes the child of the object in the parenthesis. This means that anything I tell the parent object to do from this point forward the child will do also as if it were attached.&#13;<br /><br />So when I attached the light to the cube, the light then rotated with the cube around the cubes origin.&#13;<br /><br />Congratulations, you’ve finished the tutorial.&#13;<br /><br /><br /><span style="font-size: 134%; line-height: normal"><span style="font-weight: bold">Conclusion</span></span>&#13;<br /><br />By now you should have a very basic understanding and should be able to experiment and make some very simple scripts for your levels. All you really need to be able to make more complex scripts is a little time to study the Overview of Commands section of this tutorial.&#13;<br /><br />I plan on working on future tutorials on this subject. At least two more, an Intermediate and an Advanced. And if I get a lot of positive feedback and ideas I will probably become motivated to start work on them sooner. Criticism and corrections are welcome too.&#13;<br /><br />I am pretty dumbfounded as to what I could diagram in pictures with this tutorial. I know they would be helpful. I could use some suggestions.</div>]]></body></post><post id="p30408" date="Posted: Sun Aug 08, 2004 1:56 am "><author>m4rine</author><body><![CDATA[<div class="postbody">awesome, i couldnt figure out why my scripts wernt working in the retail version, the tutorial was meant for the alpha D:</div>]]></body></post><post id="p30414" date="Posted: Sun Aug 08, 2004 2:13 am "><author>rich_is_bored</author><body><![CDATA[<div class="postbody">That raises a good point. People may not notice that the tutorial has been updated with the title it currently has.&#13;<br /><br />I'll change it real quick. Thanks for the idea.</div>]]></body></post><post id="p30501" date="Posted: Sun Aug 08, 2004 7:33 am "><author>xgalaxy</author><body><![CDATA[<div class="postbody">The link to the map in the tutorial no longer works. Would it be possible to get this file hosted by doom3world?</div>]]></body></post><post id="p30745" date="Posted: Sun Aug 08, 2004 6:10 pm "><author>rich_is_bored</author><body><![CDATA[<div class="postbody">The link works. You just have to right click it and select, save as.&#13;<br /><br />I'll try and get them hosted elsewhere so that this isn't an issue.</div>]]></body></post><post id="p30750" date="Posted: Sun Aug 08, 2004 6:15 pm "><author>Hunter</author><body><![CDATA[<div class="postbody">Very nice tutorials, rich.  I remember someone asking in the old thread about having some kind of rocket launcher fire at the player.  You said scritping wasn't the best way to do it, so I was wondering what else you could do it with.</div>]]></body></post><post id="p31878" date="Posted: Tue Aug 10, 2004 6:58 am "><author>wviperw</author><body><![CDATA[<div class="postbody">Wow!&#13;<br /><br />Thanks a <span style="font-weight: bold">ton</span> for that tutorial rich_is_bored. That is just too cool that you can be writing up a C++/java looking function in notepad one second, then switch to D3 and be looking at the visual representation of that the next second. I think I should start browsing this scripting forum more often (this is the first time I've been in it  <img src="https://web.archive.org/web/20070509181516im_/http://doom3world.org/phpbb2/images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" />)</div>]]></body></post><post id="p32105" date="Posted: Tue Aug 10, 2004 4:03 pm "><author>rich_is_bored</author><body><![CDATA[<div class="postbody"><div class="quotetitle">Hunter wrote:</div><div class="quotecontent">Very nice tutorials, rich.  I remember someone asking in the old thread about having some kind of rocket launcher fire at the player.  You said scritping wasn't the best way to do it, so I was wondering what else you could do it with.</div>&#13;<br /><br />The best way to do that would be to create a new entity type.&#13;<br /><br />There are already turrets in the game so technically all you'd have to do is make a new entity that inherits properties from the turret. Then you could change the projectile type to rockets. This would all be written in a new *.def file of course.&#13;<br /><br />There also may be a need to write a new AI script.&#13;<br /><br />That's about as good of an explanation as I can give you as I don't really have much experience in that area.</div>]]></body></post><post id="p35521" date="Posted: Sat Aug 14, 2004 9:33 pm "><author>Keglunek</author><body><![CDATA[<div class="postbody"><img src="https://web.archive.org/web/20070509181516im_/http://doom3world.org/phpbb2/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  Hey just wanted to say that this tut is helping sorta understand scripting. Ive been long time mapper, just new to the scripting idea. Hardly had to mess with it in HL =P</div>]]></body></post><post id="p39130" date="Posted: Fri Aug 20, 2004 8:51 pm "><author>Greenwu007</author><body><![CDATA[<div class="postbody">is the link not working or is it me&#13;<br />??</div>]]></body></post><post id="p39679" date="Posted: Sat Aug 21, 2004 8:22 pm "><author>Revenant666</author><body><![CDATA[<div class="postbody"><div class="quotetitle">Greenwu007 wrote:</div><div class="quotecontent">is the link not working or is it me<br />??</div>&#13;<br /><br />It's broken here too.   <img src="https://web.archive.org/web/20070509181516im_/http://doom3world.org/phpbb2/images/smilies/icon_question.gif" alt=":?:" title="Question" /></div>]]></body></post><post id="p40310" date="Posted: Mon Aug 23, 2004 1:50 am "><author>rich_is_bored</author><body><![CDATA[<div class="postbody">Sorry guys. I got hit by hurricane Charley and haven't been able to keep tabs on the boards up until today.&#13;<br /><br />I've fixed the link. <img src="https://web.archive.org/web/20070509181516im_/http://doom3world.org/phpbb2/images/smilies/icon_wink.gif" alt=";)" title="Wink" /><br /><br />This is so frustrating. I just cannot keep a damn host. <img src="https://web.archive.org/web/20070509181516im_/http://doom3world.org/phpbb2/images/smilies/icon_mad.gif" alt=":x" title="Mad" /></div>]]></body></post><post id="p30196" date="Posted: Sat Aug 07, 2004 5:36 pm "><author>rich_is_bored</author><body><![CDATA[<div class="postbody"><span style="font-size: 200%; line-height: normal"><span style="font-weight: bold">Level Scripting Tutorial 1</span></span><br /><br /><span style="font-size: 134%; line-height: normal"><span style="font-weight: bold">Introduction</span></span><br /><br />The scripting language in Doom 3 is very powerful. You can create very complex machinery or with the aid of some trigger entities landscape altering geometry. Many of these effects can be accomplished with a small amount of code as long as you gain a good understanding of the scripting commands and their syntax.	<br /><br />Those of you familiar with programming will find scripting in Doom 3 fairly easy and similar to languages like C++, Java or even ActionScript. If you do happen to have experience with a programming language, congratulations, you definitely will have an edge.<br /><br />Don’t let that discourage you. Not all of us are software engineers. I am no more than just a hobbyist myself. But if I can script for Doom 3 than any of you can.<br /><br />You'll need the zip below.<br /><br /><span style="font-weight: bold">FILE NO LONGER AVAILABLE.</span><br /><br /><span style="font-size: 134%; line-height: normal"><span style="font-weight: bold">Basics of Programming</span></span><br /><br />When you are scripting you are telling objects to perform certain tasks. But these objects don’t understand English. You need to talk to them in a manner that they can understand.<br /><br />For the time being we will relate to the way people perform tasks. Let’s say you want to open a door. We all know how to do so but this simple task can be broken down into a series of basic steps.<br /><br />Opening a Door<br /><ol style="list-style-type: arabic-numbers"><li>Extend your hand to reach the door.</li><li>Grasp the knob.</li><li>Turn the knob.</li><li>Pull the knob.</li></ol>To even make things worse those basic steps can be broken down even further.<br /><br />Extend your hand to reach the door.<br /><ol style="list-style-type: arabic-numbers"><li>Raise your arm.</li><li>Rotate your forearm.</li><li>Open your hand.</li></ol><br />       You can see how even a simple task like opening a door is actually comprised of a lengthy list of basic actions. This is the basis of scripting in Doom 3. You cannot just tell a machine to run. You have to tell all its moving parts to perform basic actions.<br /><br /><span style="font-size: 134%; line-height: normal"><span style="font-weight: bold">Overview of Commands</span></span><br /><br />The following is a list of commands and symbols used in scripts. This list is rather incomplete as the function of all the commands is not yet known. Your understanding of them is not important yet. They are merely for reference. I suggest you print them out so you can work with them at your side as you go. I will make reference to this section frequently throughout the tutorial.<br /><br /><span style="font-weight: bold">EDIT:</span> Level Script Commands have been moved to the <a href="https://web.archive.org/web/20121102213110/http://www.doom3world.org/phpbb2/viewtopic.php?t=3681" class="postlink">Scripting Command Reference</a> in an attempt to compile a more complete and accurate reference.<br /><br />The remaining definitions below are related more to general syntax rather than commands.<br /><br /><span style="font-weight: bold">$</span><br />...<span style="color: green"><span style="font-weight: bold">Definition</span></span>:	Precedes all variable references. Informs the engine that the following is a variable reference.<br />...<span style="color: orange"><span style="font-weight: bold">Syntax</span></span>:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   $entity_name.rotateTo($position);</div><br /><br /><span style="font-weight: bold">;</span><br />...<span style="color: green"><span style="font-weight: bold">Definition</span></span>:	Follows all commands. More than one command may exist on a single line. Informs the engine that the following is the end of a command.<br />...<span style="color: orange"><span style="font-weight: bold">Syntax</span></span>:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   $entity_name.rotateTo($position);</div><br /><br /><span style="font-weight: bold">//</span><br />...<span style="color: green"><span style="font-weight: bold">Definition</span></span>:	Comment. Declares the text from this point to the end of the line a comment and is not executed. Can also be used to null out a line of code for debugging.<br />...<span style="color: orange"><span style="font-weight: bold">Syntax</span></span>:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   // This text will not be executed.</div><br />...<span style="color: red"><span style="font-weight: bold">Example</span></span>:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   //sys.print ("bO1nG!\n");</div><br /><br /><span style="font-weight: bold">/*</span> and <span style="font-weight: bold">*/</span><br />...<span style="color: green"><span style="font-weight: bold">Definition</span></span>: Comment. Declares the text from /* to */ a comment and the text contained therein is not executed. Can also be used to null out a portion of code for debugging.<br />...<span style="color: orange"><span style="font-weight: bold">Syntax</span></span>:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   /* This text will not be executed. */</div><br />...<span style="color: red"><span style="font-weight: bold">Example</span></span>:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   sys.random (2) /* + 7 */;</div><br /><br /><span style="font-weight: bold">EDIT:</span> Keep in mind that all commands are case sensitive. For example...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">sys.waitFor($thing);</div><br /><br /><br />... will work fine but ...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">sys.waitfor($thing);</div><br /><br />... will not.<br /><br /><span style="font-size: 134%; line-height: normal"><span style="font-weight: bold">Beginner: Creating a Strange Spinning Box</span></span><br /><br />Before you can run you have to learn to walk. You can’t just jump in and make some complex machine. You have to start small. We will start with just a simple box that rotates. Then we will fool around with its properties a little to gain a better understanding of what you’ve coded actually does.<br /><br /><span style="font-weight: bold">Two Methods to Call a Script For Exectution</span><br /><br />There are two methods to assign your script file as the intended level script for exectution in a map. The "same name" method and the "namespace" method.<br /><br /><span style="font-weight: bold">Same Name</span><br /><br />The "same name" method requires you do two things. First, you must ensure both the map and script share the same name. Second, you must place both files in the same folder. This is the method we'll be using in this tutorial because to me, it is the easiest.<br /><br /><span style="font-weight: bold">Namespace</span><br /><br />The "namespace" method is used with Doom 3's vanilla maps. This method will not work with custom maps unless you edit the file scripts/doom_main.script in pak000.pk4.<br /><br />The only real benefit of using this method is that it permits you to store your script in a folder separate from your map. Just as an example, if you were to use this method with the files in this tutorial you'd have to add this line to scripts/doom_main.script...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">#include "scripts/rich_scripting_tutorial_1.script"</div><br /><br />Then you'd have to add the following key/value pair to the worldspawn entity in rich_scripting_tutorial_1.map...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Key: call<br />Value: rich_scripting_tutorial_1::main</div><br /><br />Then you'd have to enclose your entire script in a namespace command like so...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">namespace rich_scripting_tutorial_1 {<br /><br />... code ...<br /><br />} // close namespace</div><br /><br />Personally, I suggest that you refrain from using this method with your maps. I can't really understand the logic in changing scripts inside the game's PK4s to make it work, rather than appending a modification. You risk screwing the game up trying this.<br /><br /><span style="font-weight: bold">Getting on With it Already</span><br /><br />I have already created the map we will be writing a script for. It was setup using the "same name" method for simplicity's sake. We will view this map in the editor to gain some familiarity with the basic requirements for a script to function. All you'll be required to do is ensure your map and script share the same name and location.<br /><br />Extract rich_scripting_tutorial_1.map to <span style="font-weight: bold">[Your Doom 3 Directory]\base\maps</span>. Open rich_scripting_tutorial_1.map in the editor. This map is a simple room with one light, a player starting point, and a func_mover which will be controlled with rich_scripting_tutorial_1.script.<br /><br />Select the func_mover in the center of the room. Select the Inspector window and click the entity tab to bring up the entity property sheet. Notice that the name is set to <span style="font-weight: bold">cube</span>. The model key will also change when this key is set. By referencing this name we can instruct the box to perform actions.<br /><br />Now open example.script in a text editor. I suggest you get a good text editor such as editpad but notepad will work fine for level scripts. Just know that notepad is not very good at interpreting EOL markers and such so many DOS based text files may appear jumbled.<br /><br />A link that is currently good is <a href="https://web.archive.org/web/20121102213110/http://tucows.kr.psi.net/files/EditPadClassic.zip" class="postlink">http://tucows.kr.psi.net/files/EditPadClassic.zip</a><br /><br />A basic script is composed like this script. Don’t try and figure it out yet even though the comments do a pretty good job of explaining things. This is not the script that we will be using to control our cube. You will be coding that. This is just an example. I will explain the basics to you but first I need to get you into a habit of coding readable script.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// sets up moving parts for motion<br /><br />void setup_objects()<br />{<br />   $block.bind($light1);<br />}<br /><br />// function for moving block up<br /><br />void block_move_up ()<br />{<br />   $block.move(UP, 20);<br />   sys.waitFor ($block);<br />}<br /><br />// function for moving block down<br /><br />void block_move_down ()<br />{<br />   $block.move(DOWN, 20);<br />   sys.waitFor ($block);<br />}<br /><br />// function that executes when script is loaded<br /><br />void main ()<br />{<br />   setup_objects ();<br />   block_move_up ();<br />   block_move_down ();<br />}</div><br /><br />First off, I add a lot of comments. I suggest you do the same because as you get into making more and more complex scripts these comments will keep you from getting lost in your own code.<br /><br />Second learn to use the tab key! Indent your code so that you can tell just by looking what code is contained in the curly brackets. If you don’t use comments, at least indent. This will aid you the most when trying to debug your script by preventing you from getting confused.<br /><br />Now go ahead and take a look at the first line.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// sets up moving parts for motion</div><br /><br /><span style="font-weight: bold">//</span> will declare the remaining portion of the line a comment. Everything between the double forward slash and the end of the line will not be executed. I hate to reiterate but, take advantage of comments! Describe in your own words what is taking place by using comments.<br /><br /><br />The next few lines of code define a function. A function is basically a way of isolating a segment of commands so that they can be executed with one command. A function can be named anything that you choose as long as it forms one word. Again be descriptive when naming your functions so you can tell just by looking what it does.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void setup_objects()<br />{<br />   $block.bind($light1);<br />}</div><br /><br />Now anytime in the script if I were to write the statement <span style="font-weight: bold">setup_objects ();</span> the program would execute the code contained within the curly brackets above. In this case it would execute the line.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">$block.bind($light1);</div><br /><br />Now examine the functions <span style="font-weight: bold">block_move_up</span> and <span style="font-weight: bold">block_move_down</span> and try and determine what they do based on their names and comments alone.<br /><br />If you guessed that they move a block your right. Now, without even knowing what the code within those two functions do, you have a pretty good idea of what happens when they are called.<br /><br />Now let’s look at the end of the script. Look at the function named <span style="font-weight: bold">main</span>.<br /><br />Notice that the functions <span style="font-weight: bold">setup_objects</span>, <span style="font-weight: bold">block_move_up</span>, and <span style="font-weight: bold">block_move_down</span> are called within the function <span style="font-weight: bold">main</span>. This function is run when your script is loaded.<br /><br />So, what happens when a map with the necessary entities and key values is loaded? I’ll give you a quick run through.<br /><br /><ol style="list-style-type: arabic-numbers"><li>The game looks in the running map directory for a script that shares the same name.</li><li>It loads all the functions defined in the script to memory.</li><li>It executes the function <span style="font-weight: bold">main</span>.</li></ol>4a. The function <span style="font-weight: bold">setup_objects</span> is run.<br />4b. The function <span style="font-weight: bold">block_move_up</span> is run.<br />4c. The function <span style="font-weight: bold">block_move_down</span> is run.<br /><br /><br />Now with a basic understanding of how to script we will get into the details of writing the script to rotate the cube in rich_scripting_tutorial_1.map. Remember the script must share the same name as the map and be stored in the map's directory. In this case, the script will be named rich_scripting_tutorial_1.script and will be stored in <span style="font-weight: bold">[Your Doom 3 Directory]\base\maps</span>.<br /><br />So, create a file named rich_scripting_tutorial_1.script, using your text editor, in the folder mentioned above. Now type the following code into your text editor and save.<br /><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// function that executes when the script is loaded<br /><br />void main ()<br />{<br />}</div><br /><br />Now we have created a basic script with no real code to execute. As it is now the map would run without errors but nothing would happen. We need to define a function to spin the cube.<br /><br />Before we do that notice that there is no function to setup objects. There is no need to do so if your sole intent is to make a spinning cube. But, take note because we will be adding one later when we experiment with our script.<br /><br />Now add the following code to your script above everything else.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// function that rotates cube once 360 degrees<br /><br />void cube_rotate ()<br />{<br />   $cube.rotate('0 360 0');<br />}</div><br /><br />This code will define a function <span style="font-weight: bold">cube_rotate</span> and when called will rotate the cube once 360 degrees around the Y axis. Notice that in this case I am calling <span style="font-weight: bold">cube</span> with <span style="font-weight: bold">$cube</span> inserting a period and then the command <span style="font-weight: bold">rotate</span> with its associated parameters followed by a semi-colon. The command rotate is similar to the command sway in that it does not need to be called more than once. It will continue to rotate until another map is loaded.<br /><br />Look in the Overview of Commands section for a detailed description of <span style="font-weight: bold">rotate</span>, <span style="font-weight: bold">"."</span>, <span style="font-weight: bold">"$"</span>, and <span style="font-weight: bold">";"</span>. There you will learn their basic syntax and function.<br /><br />Now, add this line to your <span style="font-weight: bold">main</span> function.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">cube_rotate();</div><br /><br />The code should look like this.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// function that rotates cube once 360 degrees<br /><br />void cube_rotate ()<br />{<br />   $cube.rotate('0 360 0');<br />}<br /><br />// function that executes when the script is loaded<br /><br />void main ()<br />{<br />   cube_rotate();<br />}</div><br /><br />If you haven’t already saved do so. Now the script should run. First run Doom 3 and then, in the console, type <span style="font-weight: bold">dmap maps\rich_scripting_tutorial_1.map</span>. This will compile the map.<br /><br /><br />Now we can type <span style="font-weight: bold">map rich_scripting_tutorial_1.map</span> and the map will load. You should see a box spinning in the center of the room around the Y axis.<br /><br />Now we are going to have some fun. If you are in full screen switch to windowed mode by pressing ALT + ENTER. We are going to edit the script and see its effects real time.<br /><br />Switch to your text editor by pressing ALT + TAB. Now we will try changing the values in this line.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">$cube.rotate('0 360 0');</div><br /><br />Try changing 360 to -360. Save the script. Switch back to Doom 3 and reload the map. Because the map has not changed and only the script, you only have to reload the map to see your changes.<br /><br />Now the cube should be spinning the opposite direction on the Y axis. Have some fun experimenting with changing any of the 3 values and see what the result is. When you are done change the line back to its original values.<br /><br />Because the cube appears to never stop you may not have noticed that it makes one rotation every second. But in fact, it does stop. It just does not stay that way long enough for you to see it. This is the default time that all new objects follow. Regardless of the movement, be it rotational or linear, it will always take one second to complete the motion.<br /><br />Now we are going to change a couple of the time values.<br /><br />Change your code to look like the following.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// function that rotates cube 360 degrees<br /><br />void cube_rotate ()<br />{<br />   $cube.accelTime(3);<br />   $cube.decelTime(3);<br />   $cube.time (10);<br />   while (1) {<br />      $cube.rotate('0 360 0');<br />      sys.waitFor ($cube);<br />   }<br />}<br /><br />// function that executes when the script is loaded<br /><br />void main ()<br />{<br />   cube_rotate();<br />}</div><br /><br />I have added quite a few commands at once. I needed to in order for the script to function properly. Now save the script and reload the map.<br /><br />Now you will see the cube slowly accelerate for 3 seconds, maintain its speed for 4 seconds and then decelerate for 3 seconds. But it no longer rotates the cube just 360 degrees. Why? Because I have assigned a time of 10 seconds to the cube.<br /><br />Well, we have to analyze the changes that have been made to determine this. I have added four commands to the script. Refer to the Overview of commands for a detailed definition and syntax.<br /><br /><ul><li>accelTime</li><li>decelTime</li><li>time</li><li>while</li></ul><br />The three commands accelTime, decelTime and time are used in conjunction to calculate the speed of the cube during its rotation. The command time will assign the total time it takes to complete the movement. accelTime and decelTime are the ranges of time that the cube will need to speed up and then slow down.<br /><br />Because the cube now has a time assigned to it, it will not continue rotating. In order to make the cube continue to rotate we must enclose the rotation portion of code in a loop.<br />I did that with the while loop.<br /><br />Now we are near complete. Remember when I mentioned about creating a function to setup your moving objects. Well, now we are going to bind two objects together. No, don’t start back up the editor to add something to the map. We don’t need to. We already have a light to bind to the cube. Change your code to look like the following.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// function that binds the light to the cube<br /><br />void setup_objects ()<br />{<br />   $light.bind ($cube);<br />}<br /><br />// function that rotates cube 360 degrees<br /><br />void cube_rotate ()<br />{<br />   $cube.accelTime(3);<br />   $cube.decelTime(3);<br />   $cube.time (10);<br />   while (1) {<br />      $cube.rotate('0 0 360');<br /><br />      sys.waitFor ($cube);<br />   }<br />}<br /><br />// function that executes when the script is loaded<br /><br />void main ()<br />{<br />   setup_objects();<br />   cube_rotate();<br />}</div><br /><br />First a function was created to setup the objects before any movement occurs and added too our <span style="font-weight: bold">main</span> function. Then the rotation was changed to rotate the cube on the Z axis.<br /><br />Let’s look at the practical application of the bind command. <br /><br />A bind command is used to bind the objects together at there respective distances. The object before the period becomes the child of the object in the parenthesis. This means that anything I tell the parent object to do from this point forward the child will do also as if it were attached.<br /><br />So when I attached the light to the cube, the light then rotated with the cube around the cubes origin.<br /><br />Congratulations, you’ve finished the tutorial.<br /><br /><br /><span style="font-size: 134%; line-height: normal"><span style="font-weight: bold">Conclusion</span></span><br /><br />By now you should have a very basic understanding and should be able to experiment and make some very simple scripts for your levels. All you really need to be able to make more complex scripts is a little time to study the Overview of Commands section of this tutorial.<br /><br />I plan on working on future tutorials on this subject. At least two more, an Intermediate and an Advanced. And if I get a lot of positive feedback and ideas I will probably become motivated to start work on them sooner. Criticism and corrections are welcome too.<br /><br />I am pretty dumbfounded as to what I could diagram in pictures with this tutorial. I know they would be helpful. I could use some suggestions.</div>]]></body></post><post id="p30408" date="Posted: Sun Aug 08, 2004 1:56 am "><author>m4rine</author><body><![CDATA[<div class="postbody">awesome, i couldnt figure out why my scripts wernt working in the retail version, the tutorial was meant for the alpha D:</div>]]></body></post><post id="p30414" date="Posted: Sun Aug 08, 2004 2:13 am "><author>rich_is_bored</author><body><![CDATA[<div class="postbody">That raises a good point. People may not notice that the tutorial has been updated with the title it currently has.
<br /><br />I'll change it real quick. Thanks for the idea.</div>]]></body></post><post id="p30501" date="Posted: Sun Aug 08, 2004 7:33 am "><author>xgalaxy</author><body><![CDATA[<div class="postbody">The link to the map in the tutorial no longer works. Would it be possible to get this file hosted by doom3world?</div>]]></body></post><post id="p30745" date="Posted: Sun Aug 08, 2004 6:10 pm "><author>rich_is_bored</author><body><![CDATA[<div class="postbody">The link works. You just have to right click it and select, save as.
<br /><br />I'll try and get them hosted elsewhere so that this isn't an issue.</div>]]></body></post><post id="p30750" date="Posted: Sun Aug 08, 2004 6:15 pm "><author>Hunter</author><body><![CDATA[<div class="postbody">Very nice tutorials, rich.  I remember someone asking in the old thread about having some kind of rocket launcher fire at the player.  You said scritping wasn't the best way to do it, so I was wondering what else you could do it with.</div>]]></body></post><post id="p31878" date="Posted: Tue Aug 10, 2004 6:58 am "><author>wviperw</author><body><![CDATA[<div class="postbody">Wow!
<br /><br />Thanks a <span style="font-weight: bold">ton</span> for that tutorial rich_is_bored. That is just too cool that you can be writing up a C++/java looking function in notepad one second, then switch to D3 and be looking at the visual representation of that the next second. I think I should start browsing this scripting forum more often (this is the first time I've been in it  <img src="https://web.archive.org/web/20121102213110im_/http://www.doom3world.org/phpbb2/images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" />)</div>]]></body></post><post id="p32105" date="Posted: Tue Aug 10, 2004 4:03 pm "><author>rich_is_bored</author><body><![CDATA[<div class="postbody"><div class="quotetitle">Hunter wrote:</div><div class="quotecontent">Very nice tutorials, rich.  I remember someone asking in the old thread about having some kind of rocket launcher fire at the player.  You said scritping wasn't the best way to do it, so I was wondering what else you could do it with.</div>
<br /><br />The best way to do that would be to create a new entity type.
<br /><br />There are already turrets in the game so technically all you'd have to do is make a new entity that inherits properties from the turret. Then you could change the projectile type to rockets. This would all be written in a new *.def file of course.
<br /><br />There also may be a need to write a new AI script.
<br /><br />That's about as good of an explanation as I can give you as I don't really have much experience in that area.</div>]]></body></post><post id="p35521" date="Posted: Sat Aug 14, 2004 9:33 pm "><author>Keglunek</author><body><![CDATA[<div class="postbody"><img src="https://web.archive.org/web/20121102213110im_/http://www.doom3world.org/phpbb2/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  Hey just wanted to say that this tut is helping sorta understand scripting. Ive been long time mapper, just new to the scripting idea. Hardly had to mess with it in HL =P</div>]]></body></post><post id="p39130" date="Posted: Fri Aug 20, 2004 8:51 pm "><author>Greenwu007</author><body><![CDATA[<div class="postbody">is the link not working or is it me
<br />??</div>]]></body></post><post id="p39679" date="Posted: Sat Aug 21, 2004 8:22 pm "><author>Revenant666</author><body><![CDATA[<div class="postbody"><div class="quotetitle">Greenwu007 wrote:</div><div class="quotecontent">is the link not working or is it me<br />??</div>
<br /><br />It's broken here too.   <img src="https://web.archive.org/web/20121102213110im_/http://www.doom3world.org/phpbb2/images/smilies/icon_question.gif" alt=":?:" title="Question" /></div>]]></body></post><post id="p40310" date="Posted: Mon Aug 23, 2004 1:50 am "><author>rich_is_bored</author><body><![CDATA[<div class="postbody">Sorry guys. I got hit by hurricane Charley and haven't been able to keep tabs on the boards up until today.
<br /><br />I've fixed the link. <img src="https://web.archive.org/web/20121102213110im_/http://www.doom3world.org/phpbb2/images/smilies/icon_wink.gif" alt=";)" title="Wink" /><br /><br />This is so frustrating. I just cannot keep a damn host. <img src="https://web.archive.org/web/20121102213110im_/http://www.doom3world.org/phpbb2/images/smilies/icon_mad.gif" alt=":x" title="Mad" /></div>]]></body></post><post id="p40381" date="Posted: Mon Aug 23, 2004 6:28 am "><author>pi</author><body><![CDATA[<div class="postbody">Excellent tutorial, very helpful (especially to me, the novice scripter <img src="https://web.archive.org/web/20121102213110im_/http://www.doom3world.org/phpbb2/images/smilies/icon_smile.gif" alt=":)" title="Smile" /> ).
<br /><br />I have one question, though, what exactly does the line <div class="codetitle"><b>Code:</b></div><div class="codecontent">sys.waitFor ($cube);</div> do?
<br /><br />*EDIT* nevermind, I answered my own question thanks to the Script Events Reference (feels silly).</div>]]></body></post><post id="p41427" date="Posted: Wed Aug 25, 2004 1:27 am "><author>rEdrUmMDK</author><body><![CDATA[<div class="postbody">Hi rich_is_bored.  I am from modsonline.com.  Feel free to contact us for all your script hosting needs.  We are almost 12,000 members and growing.  With Doom3, Sof, Sof2 and Cod modding forums.  We are hosting many files for download to registered members.
<br />We would be glad to have you visit and join us.
<br />Great little scripting tute.
<br /><br />Please drop by or give me <!-- e --><a href="mailto:redrummdk@modsonline.com">redrummdk@modsonline.com</a><!-- e --> or <!-- e --><a href="mailto:foyleman@modsonline.com">foyleman@modsonline.com</a><!-- e --> an email if you are interested.</div>]]></body></post><post id="p41867" date="Posted: Wed Aug 25, 2004 11:15 pm "><author>Greenwu007</author><body><![CDATA[<div class="postbody">Still my browser cant find the link?? <img src="https://web.archive.org/web/20121102213110im_/http://www.doom3world.org/phpbb2/images/smilies/icon_sad.gif" alt=":(" title="Sad" /></div>]]></body></post><post id="p41880" date="Posted: Wed Aug 25, 2004 11:52 pm "><author>rich_is_bored</author><body><![CDATA[<div class="postbody">In the event that the server is down these links should work.
<br /><br /><!-- m --><a class="postlink" href="https://web.archive.org/web/20121102213110/http://www.geocities.com/rich_is_bored/d3w_scripting1.zip">http://www.geocities.com/rich_is_bored/ ... pting1.zip</a><!-- m -->
<br /><!-- m --><a class="postlink" href="https://web.archive.org/web/20121102213110/http://www.geocities.com/rich_is_bored/d3w_scripting2.zip">http://www.geocities.com/rich_is_bored/ ... pting2.zip</a><!-- m -->
<br /><!-- m --><a class="postlink" href="https://web.archive.org/web/20121102213110/http://www.geocities.com/rich_is_bored/d3w_scripting3.zip">http://www.geocities.com/rich_is_bored/ ... pting3.zip</a><!-- m -->
<br /><br />Anyone interested in hosting these files is more than welcome to but I'm afraid I don't have the time to play a role in any more forums.</div>]]></body></post><post id="p41911" date="Posted: Thu Aug 26, 2004 1:17 am "><author>rEdrUmMDK</author><body><![CDATA[<div class="postbody">That's fine.  I will try to download and get them posted up at our site for ya.  Also I got a question.  Played with that script last night and could not beleive the outcome.
<br />Can that type of script be made to control any number of brushes? I assume it can since one of the other tutes is about moving different parts. 
<br />Hope I ain't too old to learn some of the easy stuff.
<br />Anyway thanks for the permit and I'll give ya a holler when I get em posted up.  Should be a big hit.</div>]]></body></post><post id="p41939" date="Posted: Thu Aug 26, 2004 2:25 am "><author>rich_is_bored</author><body><![CDATA[<div class="postbody">Well I haven't really tested to find the maximum number of entities you can control with a script. I'd guess that the real limitation is how many entities you can have in a map.</div>]]></body></post><post id="p43238" date="Posted: Sat Aug 28, 2004 7:40 pm "><author>Greenwu007</author><body><![CDATA[<div class="postbody">thanks, rich,  i got um  <img src="https://web.archive.org/web/20121102213110im_/http://www.doom3world.org/phpbb2/images/smilies/icon_razz.gif" alt=":P" title="Razz" /></div>]]></body></post><post id="p46058" date="Posted: Fri Sep 03, 2004 12:28 am "><author>Herblious</author><body><![CDATA[<div class="postbody">Thank you very much for the Tutorial!!! Very helpful.</div>]]></body></post></posts></thread></xml>
