<?xml version="1.0" encoding="UTF-8"?>
<xml><thread id="23947"><title>spawning monsters</title><posts><post id="p227504" date="Posted: Thu Sep 23, 2010 4:19 pm "><author>bdmn</author><body><![CDATA[<div class="postbody">hi guys,<br /><br />im kidding around with spawning and controling monsters in different ways. as the outcome is not 100% what i wanted, i ask here for help.<br /><br />in this thread ill show how i spawned the monsters, ill post another <a href="https://web.archive.org/web/20101225114047/http://www.doom3world.org/phpbb2/viewtopic.php?f=67&amp;t=23948&amp;p=227505#p227505" class="postlink">thread</a> for the controlling of it. <br /><br />i implemented several ways to spawn the monster waves and store them into run-time-persistent target_null lists, to keep reference for further controlling.<br /><br />in the map i got target_nulls for:<br /><br />blueSpawnPoint01<br />blueSpawnPoint02<br />blueSpawnPoint03<br /><br />redSpawnPoint01<br />redSpawnPoint02<br />redSpawnPoint03<br /><br />spawning my creatures way one: ( a func_spawner comes in handy )<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">namespace world{<br /><br />   float redMonsterCount = 0;<br />   float blueMonsterCount = 0;<br /><br />   void reportMonster(){<br />      sys.println("reporting monster");<br />      entity target;<br />      entity list = $redMonsterNulls;<br />      entity list2 = $blueMonsterNulls;<br />      sys.println("size of red:" + qListCount(list));<br />      sys.println("size of blue:" + qListCount(list2));<br />   }<br /><br />   string registerRedMonster(entity monster){<br />      string name = "redMonster_" + redMonsterCount;<br />      monster.setKey("name", name);<br />      monster.setKey("target", "ai_tether_behind_3");<br />      qListInsert($redMonsterNulls, monster);<br />      redMonsterCount++;   <br />      return name;<br />   }   <br /><br />   string registerBlueMonster(entity monster){<br />      string name = "blueMonster_" + redMonsterCount;<br />      monster.setKey("name", name);<br />      monster.setKey("target", "ai_tether_behind_4");<br />      qListInsert($blueMonsterNulls, monster);<br />      blueMonsterCount++;      <br />      return name;<br />   }<br />}<br /><br /><br />entity createBlueSpawner(){<br />    sys.setSpawnArg("target","blueSpawn01");<br />    sys.setSpawnArg("target_1","blueSpawn02");<br />    sys.setSpawnArg("target_2","blueSpawn03");<br />    sys.setSpawnArg("def_spawn_1", "monster_strogg_marine");<br />    sys.setSpawnArg("max_active", "30");<br />    sys.setSpawnArg("delay","4");        <br />    sys.setSpawnArg("auto_target", "1");<br />    sys.setSpawnArg("face_enemy", "1");<br />    sys.waitFrame();<br />    sys.setSpawnArg("waves","3");<br />    sys.setSpawnArg("skipVisible", "0");<br />    sys.setSpawnArg("remove", "0");        <br />    sys.setSpawnArg("call_spawned","world::registerBlueMonster");<br />    sys.setSpawnArg("spawn_neverdormant", "1");<br />    sys.setSpawnArg("spawn_team", "1");    // for spawning loots<br /><br />    sys.waitFrame();<br />    entity blueSpawner = sys.spawn( "func_spawner" );<br />    return blueSpawner;<br />}<br /><br /><br />entity createRedSpawner(){<br />    sys.setSpawnArg("target","redSpawn01");<br />    sys.setSpawnArg("target_1","redSpawn02");<br />    sys.setSpawnArg("target_2","redSpawn03");<br />    sys.setSpawnArg("def_spawn_1", "monster_strogg_marine");<br />    sys.setSpawnArg("max_active", "30");<br />    sys.setSpawnArg("delay","4");        <br />    sys.setSpawnArg("auto_target", "1");<br />    sys.setSpawnArg("face_enemy", "1");<br />    sys.waitFrame();<br />    sys.setSpawnArg("waves","3");<br />    sys.setSpawnArg("skipVisible", "0");<br />    sys.setSpawnArg("remove", "0");        <br />    sys.setSpawnArg("call_spawned","world::registerRedMonster");<br />    sys.setSpawnArg("spawn_neverdormant", "1");<br />    sys.setSpawnArg("spawn_team", "0");    // for spawning loots<br /><br />    sys.waitFrame();<br />    entity redSpawner = sys.spawn( "func_spawner" );<br />    return redSpawner;<br />}<br /><br /><br /><br />void startCreeps(){<br />    entity redspawner = createRedSpawner();<br />    sys.waitFrame();<br />    entity bluespawner = createBlueSpawner();<br />    sys.waitFrame();<br />    sys.trigger(redspawner);<br />    sys.waitFrame();<br />    sys.trigger(bluespawner);<br />}<br /><br />void main(){<br />    startCreeps();<br />}<br /><br /></div><br /><br />to explain the code:<br /><br />main function calls startcreeps which spawns two func_spawners. these funcspawners will populate the map. after spawning a monster, the function world::registerBlueMonster or world::registerRedMonster is called which adds the name of the new monster as a target location in a target_null list. so i can iterate over all the monsters for each time during the runtime to give further commands to them.<br /><br />i experienced some situations where the func_spawner stopped to spawn even if the max_active limit wasnt reached, so i tried to implement it on another way:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">    <br />#define ForEachTargetOf( ent, target )               \<br />   float index_##ent;                     \<br />   ent.removeNullTargets();                  \            <br />   for( index_##ent = 0; $null_entity != (target = ent.getTarget(index_##ent)); index_##ent++ )<br /><br />#define qListForEach(list,ent) ForEachTargetOf(list,ent)<br /><br />namespace world{<br /><br />   float redMonsterCount = 0;<br />   float blueMonsterCount = 0;<br />   entity redMonsterNulls;<br />   entity blueMonsterNulls;<br /><br />   void reportMonster(){<br />      sys.println("reporting monster");<br />      entity target;<br />      entity list = $redMonsterNulls;<br />      entity list2 = $blueMonsterNulls;<br />      sys.println("size of red:" + qListCount(list));<br />      sys.println("size of blue:" + qListCount(list2));<br />   }<br /><br />   string registerRedMonster(entity monster){<br />      string name = "redMonster_" + redMonsterCount;<br />      monster.setKey("name", name);<br />      qListInsert(redMonsterNulls, monster);<br />      redMonsterCount++;   <br />      return name;<br />   }   <br /><br />   string registerBlueMonster(entity monster){<br />      string name = "blueMonster_" + redMonsterCount;<br />      monster.setKey("name", name);<br />      qListInsert(blueMonsterNulls, monster);<br />      blueMonsterCount++;      <br />      return name;<br />   }<br /><br />   void spawnRedWave(){<br />      sys.setSpawnArg("team","0");<br />      sys.setSpawnArg("auto_target","1");<br />      sys.setSpawnArg("target","ai_tether_radius_1");<br />      entity monster1 = sys.spawn("monster_tactical_mgun");<br />      <br />      string name;<br />      name = registerRedMonster(monster1);<br /><br />      $ai_tether_radius_1.setKey("target",name);<br /><br />      sys.setSpawnArg("team","0");<br />      sys.setSpawnArg("auto_target","1");<br />      sys.setSpawnArg("target","ai_tether_radius_1");<br />      entity monster2 = sys.spawn("monster_tactical_mgun");<br />      name = registerRedMonster(monster2);<br />      <br />      $ai_tether_radius_1.setKey("target_1",name);<br /><br />      sys.setSpawnArg("team","0");<br />      sys.setSpawnArg("auto_target","1");<br />      sys.setSpawnArg("target","ai_tether_radius_1");<br />      entity monster3 = sys.spawn("monster_tactical_mgun");<br />      name = registerRedMonster(monster3);<br />      $ai_tether_radius_1.setKey("target_2",name);<br /><br />      monster1.setWorldOrigin($redSpawn01.getWorldOrigin());<br />      monster2.setWorldOrigin($redSpawn02.getWorldOrigin());<br />      monster3.setWorldOrigin($redSpawn03.getWorldOrigin());<br />      sys.waitFrame();<br />      sys.trigger($ai_tether_radius_1);<br />   }<br /><br />   <br />   void spawnBlueWave(){<br />      sys.setSpawnArg("team","1");<br />      sys.setSpawnArg("auto_target","1");<br />      entity monster1 = sys.spawn("monster_strogg_marine");<br />      registerBlueMonster(monster1);<br />      <br />      sys.setSpawnArg("team","1");<br />      sys.setSpawnArg("auto_target","1");<br />      entity monster2 = sys.spawn("monster_strogg_marine");<br />      registerBlueMonster(monster2);<br />      <br />      sys.setSpawnArg("team","1");<br />      sys.setSpawnArg("auto_target","1");<br />      entity monster3 = sys.spawn("monster_strogg_marine");<br />      <br />      registerBlueMonster(monster3);<br />      monster1.setWorldOrigin($blueSpawn01.getWorldOrigin());<br />      monster2.setWorldOrigin($blueSpawn02.getWorldOrigin());<br />      monster3.setWorldOrigin($blueSpawn03.getWorldOrigin());<br />      <br />   }<br /><br /><br />   void init(){<br />      sys.setSpawnArg("name","blueMonsterNulls");<br />      blueMonsterNulls = sys.spawn("target_null");<br />      sys.waitFrame();<br />      sys.setSpawnArg("name","redMonsterNulls");<br />      redMonsterNulls = sys.spawn("target_null");<br />   }<br /><br />}<br /><br /><br /><br />void sendWaves(){<br />   while(1){<br />      world::spawnRedWave();<br />      sys.waitFrame();<br />      //world::spawnBlueWave();<br />      sys.waitFrame();<br />      sys.wait(2);<br />   }<br />}<br /><br />void reportMonster(){<br />   while(1){<br />      world::reportMonster();<br />      sys.wait(5);<br />   }<br />   <br />}<br />void main(){<br />   sys.waitFrame();<br />//   startCreeps();   <br />   world::init();<br />//   thread(sendWaves());<br />   world::spawnRedWave();<br />   world::spawnBlueWave();<br />   sys.waitFrame();<br />   thread(reportMonster());<br />}<br /><br /></div><br /><br />in this example the spawning is done in the world::spawnRedWave and  world::spawnBlueWave. Monsters will be spawned with their keys/values. after spawning theyll placed on the worldOrigins of the spawnpoints. same behaviour, we got monsters on the map....<br /><br />as i plan several waves for both teams on different spawnlocations in different intervalls, kept in mind that the func_spawner didn't work as i expected, i wonder if its the best way to put my own spawners as threads.<br /><br />eg. <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void spawnred(){<br />        while(flag){<br />        world::spawnRedWave();<br />        sys.wait(30);<br />      }<br />}<br />void main(){<br />      thread spawnred();<br />}<br /></div><br /><br />there will be lots of this so i wonder if its good to have like 10 - 20 threads waiting 30secs or if its better to have a control thread with a duration of like 1 min each iteration through the while which controls evrything. <br /><br />spawnred - blue<br />wait 5<br />spawnsomething else<br />wait 15<br />trigger ai, whatever<br />wait 8.. etc. <br /><br />what do you think ? <img src="https://web.archive.org/web/20101225114047im_/http://www.doom3world.org/phpbb2/images/smilies/icon_smile.gif" alt=":-)" title="Smile" /><br /><br />greets</div>]]></body></post><post id="p227595" date="Posted: Mon Sep 27, 2010 11:06 pm "><author>AnthonyJa</author><body><![CDATA[<div class="postbody"><div class="quotetitle">bdmn wrote:</div><div class="quotecontent">there will be lots of this so i wonder if its good to have like 10 - 20 threads waiting 30secs or if its better to have a control thread with a duration of like 1 min each iteration through the while which controls evrything. <br /></div><br /><br />Hm, well having lots of threads doesn't sound a good thing, but in reality, since they're not real threads but just different pieces of scripts each with their own state, it probably would work OK. <br /><br />I'd be more concerned about why the spawner stopped working - perhaps you're hitting some other limit? I know you mentioned you'd checked "max_active" - you could also have hit the spawnArg "count" (default "-1") which sets the number of things to spawn. I guess you don't have "max_team_test" but if you do remove it (appears to be obsolete but may be used in some Q4 maps).</div>]]></body></post><post id="p227504" date="Posted: Thu Sep 23, 2010 4:19 pm "><author>bdmn</author><body><![CDATA[<div class="postbody">hi guys,<br /><br />im kidding around with spawning and controling monsters in different ways. as the outcome is not 100% what i wanted, i ask here for help.<br /><br />in this thread ill show how i spawned the monsters, ill post another <a href="https://web.archive.org/web/20101225120348/http://www.doom3world.org/phpbb2/viewtopic.php?f=67&amp;t=23948&amp;p=227505#p227505" class="postlink">thread</a> for the controlling of it. <br /><br />i implemented several ways to spawn the monster waves and store them into run-time-persistent target_null lists, to keep reference for further controlling.<br /><br />in the map i got target_nulls for:<br /><br />blueSpawnPoint01<br />blueSpawnPoint02<br />blueSpawnPoint03<br /><br />redSpawnPoint01<br />redSpawnPoint02<br />redSpawnPoint03<br /><br />spawning my creatures way one: ( a func_spawner comes in handy )<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">namespace world{<br /><br />   float redMonsterCount = 0;<br />   float blueMonsterCount = 0;<br /><br />   void reportMonster(){<br />      sys.println("reporting monster");<br />      entity target;<br />      entity list = $redMonsterNulls;<br />      entity list2 = $blueMonsterNulls;<br />      sys.println("size of red:" + qListCount(list));<br />      sys.println("size of blue:" + qListCount(list2));<br />   }<br /><br />   string registerRedMonster(entity monster){<br />      string name = "redMonster_" + redMonsterCount;<br />      monster.setKey("name", name);<br />      monster.setKey("target", "ai_tether_behind_3");<br />      qListInsert($redMonsterNulls, monster);<br />      redMonsterCount++;   <br />      return name;<br />   }   <br /><br />   string registerBlueMonster(entity monster){<br />      string name = "blueMonster_" + redMonsterCount;<br />      monster.setKey("name", name);<br />      monster.setKey("target", "ai_tether_behind_4");<br />      qListInsert($blueMonsterNulls, monster);<br />      blueMonsterCount++;      <br />      return name;<br />   }<br />}<br /><br /><br />entity createBlueSpawner(){<br />    sys.setSpawnArg("target","blueSpawn01");<br />    sys.setSpawnArg("target_1","blueSpawn02");<br />    sys.setSpawnArg("target_2","blueSpawn03");<br />    sys.setSpawnArg("def_spawn_1", "monster_strogg_marine");<br />    sys.setSpawnArg("max_active", "30");<br />    sys.setSpawnArg("delay","4");        <br />    sys.setSpawnArg("auto_target", "1");<br />    sys.setSpawnArg("face_enemy", "1");<br />    sys.waitFrame();<br />    sys.setSpawnArg("waves","3");<br />    sys.setSpawnArg("skipVisible", "0");<br />    sys.setSpawnArg("remove", "0");        <br />    sys.setSpawnArg("call_spawned","world::registerBlueMonster");<br />    sys.setSpawnArg("spawn_neverdormant", "1");<br />    sys.setSpawnArg("spawn_team", "1");    // for spawning loots<br /><br />    sys.waitFrame();<br />    entity blueSpawner = sys.spawn( "func_spawner" );<br />    return blueSpawner;<br />}<br /><br /><br />entity createRedSpawner(){<br />    sys.setSpawnArg("target","redSpawn01");<br />    sys.setSpawnArg("target_1","redSpawn02");<br />    sys.setSpawnArg("target_2","redSpawn03");<br />    sys.setSpawnArg("def_spawn_1", "monster_strogg_marine");<br />    sys.setSpawnArg("max_active", "30");<br />    sys.setSpawnArg("delay","4");        <br />    sys.setSpawnArg("auto_target", "1");<br />    sys.setSpawnArg("face_enemy", "1");<br />    sys.waitFrame();<br />    sys.setSpawnArg("waves","3");<br />    sys.setSpawnArg("skipVisible", "0");<br />    sys.setSpawnArg("remove", "0");        <br />    sys.setSpawnArg("call_spawned","world::registerRedMonster");<br />    sys.setSpawnArg("spawn_neverdormant", "1");<br />    sys.setSpawnArg("spawn_team", "0");    // for spawning loots<br /><br />    sys.waitFrame();<br />    entity redSpawner = sys.spawn( "func_spawner" );<br />    return redSpawner;<br />}<br /><br /><br /><br />void startCreeps(){<br />    entity redspawner = createRedSpawner();<br />    sys.waitFrame();<br />    entity bluespawner = createBlueSpawner();<br />    sys.waitFrame();<br />    sys.trigger(redspawner);<br />    sys.waitFrame();<br />    sys.trigger(bluespawner);<br />}<br /><br />void main(){<br />    startCreeps();<br />}<br /><br /></div><br /><br />to explain the code:<br /><br />main function calls startcreeps which spawns two func_spawners. these funcspawners will populate the map. after spawning a monster, the function world::registerBlueMonster or world::registerRedMonster is called which adds the name of the new monster as a target location in a target_null list. so i can iterate over all the monsters for each time during the runtime to give further commands to them.<br /><br />i experienced some situations where the func_spawner stopped to spawn even if the max_active limit wasnt reached, so i tried to implement it on another way:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">    <br />#define ForEachTargetOf( ent, target )               \<br />   float index_##ent;                     \<br />   ent.removeNullTargets();                  \            <br />   for( index_##ent = 0; $null_entity != (target = ent.getTarget(index_##ent)); index_##ent++ )<br /><br />#define qListForEach(list,ent) ForEachTargetOf(list,ent)<br /><br />namespace world{<br /><br />   float redMonsterCount = 0;<br />   float blueMonsterCount = 0;<br />   entity redMonsterNulls;<br />   entity blueMonsterNulls;<br /><br />   void reportMonster(){<br />      sys.println("reporting monster");<br />      entity target;<br />      entity list = $redMonsterNulls;<br />      entity list2 = $blueMonsterNulls;<br />      sys.println("size of red:" + qListCount(list));<br />      sys.println("size of blue:" + qListCount(list2));<br />   }<br /><br />   string registerRedMonster(entity monster){<br />      string name = "redMonster_" + redMonsterCount;<br />      monster.setKey("name", name);<br />      qListInsert(redMonsterNulls, monster);<br />      redMonsterCount++;   <br />      return name;<br />   }   <br /><br />   string registerBlueMonster(entity monster){<br />      string name = "blueMonster_" + redMonsterCount;<br />      monster.setKey("name", name);<br />      qListInsert(blueMonsterNulls, monster);<br />      blueMonsterCount++;      <br />      return name;<br />   }<br /><br />   void spawnRedWave(){<br />      sys.setSpawnArg("team","0");<br />      sys.setSpawnArg("auto_target","1");<br />      sys.setSpawnArg("target","ai_tether_radius_1");<br />      entity monster1 = sys.spawn("monster_tactical_mgun");<br />      <br />      string name;<br />      name = registerRedMonster(monster1);<br /><br />      $ai_tether_radius_1.setKey("target",name);<br /><br />      sys.setSpawnArg("team","0");<br />      sys.setSpawnArg("auto_target","1");<br />      sys.setSpawnArg("target","ai_tether_radius_1");<br />      entity monster2 = sys.spawn("monster_tactical_mgun");<br />      name = registerRedMonster(monster2);<br />      <br />      $ai_tether_radius_1.setKey("target_1",name);<br /><br />      sys.setSpawnArg("team","0");<br />      sys.setSpawnArg("auto_target","1");<br />      sys.setSpawnArg("target","ai_tether_radius_1");<br />      entity monster3 = sys.spawn("monster_tactical_mgun");<br />      name = registerRedMonster(monster3);<br />      $ai_tether_radius_1.setKey("target_2",name);<br /><br />      monster1.setWorldOrigin($redSpawn01.getWorldOrigin());<br />      monster2.setWorldOrigin($redSpawn02.getWorldOrigin());<br />      monster3.setWorldOrigin($redSpawn03.getWorldOrigin());<br />      sys.waitFrame();<br />      sys.trigger($ai_tether_radius_1);<br />   }<br /><br />   <br />   void spawnBlueWave(){<br />      sys.setSpawnArg("team","1");<br />      sys.setSpawnArg("auto_target","1");<br />      entity monster1 = sys.spawn("monster_strogg_marine");<br />      registerBlueMonster(monster1);<br />      <br />      sys.setSpawnArg("team","1");<br />      sys.setSpawnArg("auto_target","1");<br />      entity monster2 = sys.spawn("monster_strogg_marine");<br />      registerBlueMonster(monster2);<br />      <br />      sys.setSpawnArg("team","1");<br />      sys.setSpawnArg("auto_target","1");<br />      entity monster3 = sys.spawn("monster_strogg_marine");<br />      <br />      registerBlueMonster(monster3);<br />      monster1.setWorldOrigin($blueSpawn01.getWorldOrigin());<br />      monster2.setWorldOrigin($blueSpawn02.getWorldOrigin());<br />      monster3.setWorldOrigin($blueSpawn03.getWorldOrigin());<br />      <br />   }<br /><br /><br />   void init(){<br />      sys.setSpawnArg("name","blueMonsterNulls");<br />      blueMonsterNulls = sys.spawn("target_null");<br />      sys.waitFrame();<br />      sys.setSpawnArg("name","redMonsterNulls");<br />      redMonsterNulls = sys.spawn("target_null");<br />   }<br /><br />}<br /><br /><br /><br />void sendWaves(){<br />   while(1){<br />      world::spawnRedWave();<br />      sys.waitFrame();<br />      //world::spawnBlueWave();<br />      sys.waitFrame();<br />      sys.wait(2);<br />   }<br />}<br /><br />void reportMonster(){<br />   while(1){<br />      world::reportMonster();<br />      sys.wait(5);<br />   }<br />   <br />}<br />void main(){<br />   sys.waitFrame();<br />//   startCreeps();   <br />   world::init();<br />//   thread(sendWaves());<br />   world::spawnRedWave();<br />   world::spawnBlueWave();<br />   sys.waitFrame();<br />   thread(reportMonster());<br />}<br /><br /></div><br /><br />in this example the spawning is done in the world::spawnRedWave and  world::spawnBlueWave. Monsters will be spawned with their keys/values. after spawning theyll placed on the worldOrigins of the spawnpoints. same behaviour, we got monsters on the map....<br /><br />as i plan several waves for both teams on different spawnlocations in different intervalls, kept in mind that the func_spawner didn't work as i expected, i wonder if its the best way to put my own spawners as threads.<br /><br />eg. <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void spawnred(){<br />        while(flag){<br />        world::spawnRedWave();<br />        sys.wait(30);<br />      }<br />}<br />void main(){<br />      thread spawnred();<br />}<br /></div><br /><br />there will be lots of this so i wonder if its good to have like 10 - 20 threads waiting 30secs or if its better to have a control thread with a duration of like 1 min each iteration through the while which controls evrything. <br /><br />spawnred - blue<br />wait 5<br />spawnsomething else<br />wait 15<br />trigger ai, whatever<br />wait 8.. etc. <br /><br />what do you think ? <img src="https://web.archive.org/web/20101225120348im_/http://www.doom3world.org/phpbb2/images/smilies/icon_smile.gif" alt=":-)" title="Smile" /><br /><br />greets</div>]]></body></post><post id="p227595" date="Posted: Mon Sep 27, 2010 11:06 pm "><author>AnthonyJa</author><body><![CDATA[<div class="postbody"><div class="quotetitle">bdmn wrote:</div><div class="quotecontent">there will be lots of this so i wonder if its good to have like 10 - 20 threads waiting 30secs or if its better to have a control thread with a duration of like 1 min each iteration through the while which controls evrything. <br /></div><br /><br />Hm, well having lots of threads doesn't sound a good thing, but in reality, since they're not real threads but just different pieces of scripts each with their own state, it probably would work OK. <br /><br />I'd be more concerned about why the spawner stopped working - perhaps you're hitting some other limit? I know you mentioned you'd checked "max_active" - you could also have hit the spawnArg "count" (default "-1") which sets the number of things to spawn. I guess you don't have "max_team_test" but if you do remove it (appears to be obsolete but may be used in some Q4 maps).</div>]]></body></post><post id="p227504" date="Posted: Thu Sep 23, 2010 4:19 pm "><author>bdmn</author><body><![CDATA[<div class="postbody">hi guys,<br /><br />im kidding around with spawning and controling monsters in different ways. as the outcome is not 100% what i wanted, i ask here for help.<br /><br />in this thread ill show how i spawned the monsters, ill post another <a href="https://web.archive.org/web/20101225120348/http://www.doom3world.org/phpbb2/viewtopic.php?f=67&amp;t=23948&amp;p=227505#p227505" class="postlink">thread</a> for the controlling of it. <br /><br />i implemented several ways to spawn the monster waves and store them into run-time-persistent target_null lists, to keep reference for further controlling.<br /><br />in the map i got target_nulls for:<br /><br />blueSpawnPoint01<br />blueSpawnPoint02<br />blueSpawnPoint03<br /><br />redSpawnPoint01<br />redSpawnPoint02<br />redSpawnPoint03<br /><br />spawning my creatures way one: ( a func_spawner comes in handy )<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">namespace world{<br /><br />   float redMonsterCount = 0;<br />   float blueMonsterCount = 0;<br /><br />   void reportMonster(){<br />      sys.println("reporting monster");<br />      entity target;<br />      entity list = $redMonsterNulls;<br />      entity list2 = $blueMonsterNulls;<br />      sys.println("size of red:" + qListCount(list));<br />      sys.println("size of blue:" + qListCount(list2));<br />   }<br /><br />   string registerRedMonster(entity monster){<br />      string name = "redMonster_" + redMonsterCount;<br />      monster.setKey("name", name);<br />      monster.setKey("target", "ai_tether_behind_3");<br />      qListInsert($redMonsterNulls, monster);<br />      redMonsterCount++;   <br />      return name;<br />   }   <br /><br />   string registerBlueMonster(entity monster){<br />      string name = "blueMonster_" + redMonsterCount;<br />      monster.setKey("name", name);<br />      monster.setKey("target", "ai_tether_behind_4");<br />      qListInsert($blueMonsterNulls, monster);<br />      blueMonsterCount++;      <br />      return name;<br />   }<br />}<br /><br /><br />entity createBlueSpawner(){<br />    sys.setSpawnArg("target","blueSpawn01");<br />    sys.setSpawnArg("target_1","blueSpawn02");<br />    sys.setSpawnArg("target_2","blueSpawn03");<br />    sys.setSpawnArg("def_spawn_1", "monster_strogg_marine");<br />    sys.setSpawnArg("max_active", "30");<br />    sys.setSpawnArg("delay","4");        <br />    sys.setSpawnArg("auto_target", "1");<br />    sys.setSpawnArg("face_enemy", "1");<br />    sys.waitFrame();<br />    sys.setSpawnArg("waves","3");<br />    sys.setSpawnArg("skipVisible", "0");<br />    sys.setSpawnArg("remove", "0");        <br />    sys.setSpawnArg("call_spawned","world::registerBlueMonster");<br />    sys.setSpawnArg("spawn_neverdormant", "1");<br />    sys.setSpawnArg("spawn_team", "1");    // for spawning loots<br /><br />    sys.waitFrame();<br />    entity blueSpawner = sys.spawn( "func_spawner" );<br />    return blueSpawner;<br />}<br /><br /><br />entity createRedSpawner(){<br />    sys.setSpawnArg("target","redSpawn01");<br />    sys.setSpawnArg("target_1","redSpawn02");<br />    sys.setSpawnArg("target_2","redSpawn03");<br />    sys.setSpawnArg("def_spawn_1", "monster_strogg_marine");<br />    sys.setSpawnArg("max_active", "30");<br />    sys.setSpawnArg("delay","4");        <br />    sys.setSpawnArg("auto_target", "1");<br />    sys.setSpawnArg("face_enemy", "1");<br />    sys.waitFrame();<br />    sys.setSpawnArg("waves","3");<br />    sys.setSpawnArg("skipVisible", "0");<br />    sys.setSpawnArg("remove", "0");        <br />    sys.setSpawnArg("call_spawned","world::registerRedMonster");<br />    sys.setSpawnArg("spawn_neverdormant", "1");<br />    sys.setSpawnArg("spawn_team", "0");    // for spawning loots<br /><br />    sys.waitFrame();<br />    entity redSpawner = sys.spawn( "func_spawner" );<br />    return redSpawner;<br />}<br /><br /><br /><br />void startCreeps(){<br />    entity redspawner = createRedSpawner();<br />    sys.waitFrame();<br />    entity bluespawner = createBlueSpawner();<br />    sys.waitFrame();<br />    sys.trigger(redspawner);<br />    sys.waitFrame();<br />    sys.trigger(bluespawner);<br />}<br /><br />void main(){<br />    startCreeps();<br />}<br /><br /></div><br /><br />to explain the code:<br /><br />main function calls startcreeps which spawns two func_spawners. these funcspawners will populate the map. after spawning a monster, the function world::registerBlueMonster or world::registerRedMonster is called which adds the name of the new monster as a target location in a target_null list. so i can iterate over all the monsters for each time during the runtime to give further commands to them.<br /><br />i experienced some situations where the func_spawner stopped to spawn even if the max_active limit wasnt reached, so i tried to implement it on another way:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">    <br />#define ForEachTargetOf( ent, target )               \<br />   float index_##ent;                     \<br />   ent.removeNullTargets();                  \            <br />   for( index_##ent = 0; $null_entity != (target = ent.getTarget(index_##ent)); index_##ent++ )<br /><br />#define qListForEach(list,ent) ForEachTargetOf(list,ent)<br /><br />namespace world{<br /><br />   float redMonsterCount = 0;<br />   float blueMonsterCount = 0;<br />   entity redMonsterNulls;<br />   entity blueMonsterNulls;<br /><br />   void reportMonster(){<br />      sys.println("reporting monster");<br />      entity target;<br />      entity list = $redMonsterNulls;<br />      entity list2 = $blueMonsterNulls;<br />      sys.println("size of red:" + qListCount(list));<br />      sys.println("size of blue:" + qListCount(list2));<br />   }<br /><br />   string registerRedMonster(entity monster){<br />      string name = "redMonster_" + redMonsterCount;<br />      monster.setKey("name", name);<br />      qListInsert(redMonsterNulls, monster);<br />      redMonsterCount++;   <br />      return name;<br />   }   <br /><br />   string registerBlueMonster(entity monster){<br />      string name = "blueMonster_" + redMonsterCount;<br />      monster.setKey("name", name);<br />      qListInsert(blueMonsterNulls, monster);<br />      blueMonsterCount++;      <br />      return name;<br />   }<br /><br />   void spawnRedWave(){<br />      sys.setSpawnArg("team","0");<br />      sys.setSpawnArg("auto_target","1");<br />      sys.setSpawnArg("target","ai_tether_radius_1");<br />      entity monster1 = sys.spawn("monster_tactical_mgun");<br />      <br />      string name;<br />      name = registerRedMonster(monster1);<br /><br />      $ai_tether_radius_1.setKey("target",name);<br /><br />      sys.setSpawnArg("team","0");<br />      sys.setSpawnArg("auto_target","1");<br />      sys.setSpawnArg("target","ai_tether_radius_1");<br />      entity monster2 = sys.spawn("monster_tactical_mgun");<br />      name = registerRedMonster(monster2);<br />      <br />      $ai_tether_radius_1.setKey("target_1",name);<br /><br />      sys.setSpawnArg("team","0");<br />      sys.setSpawnArg("auto_target","1");<br />      sys.setSpawnArg("target","ai_tether_radius_1");<br />      entity monster3 = sys.spawn("monster_tactical_mgun");<br />      name = registerRedMonster(monster3);<br />      $ai_tether_radius_1.setKey("target_2",name);<br /><br />      monster1.setWorldOrigin($redSpawn01.getWorldOrigin());<br />      monster2.setWorldOrigin($redSpawn02.getWorldOrigin());<br />      monster3.setWorldOrigin($redSpawn03.getWorldOrigin());<br />      sys.waitFrame();<br />      sys.trigger($ai_tether_radius_1);<br />   }<br /><br />   <br />   void spawnBlueWave(){<br />      sys.setSpawnArg("team","1");<br />      sys.setSpawnArg("auto_target","1");<br />      entity monster1 = sys.spawn("monster_strogg_marine");<br />      registerBlueMonster(monster1);<br />      <br />      sys.setSpawnArg("team","1");<br />      sys.setSpawnArg("auto_target","1");<br />      entity monster2 = sys.spawn("monster_strogg_marine");<br />      registerBlueMonster(monster2);<br />      <br />      sys.setSpawnArg("team","1");<br />      sys.setSpawnArg("auto_target","1");<br />      entity monster3 = sys.spawn("monster_strogg_marine");<br />      <br />      registerBlueMonster(monster3);<br />      monster1.setWorldOrigin($blueSpawn01.getWorldOrigin());<br />      monster2.setWorldOrigin($blueSpawn02.getWorldOrigin());<br />      monster3.setWorldOrigin($blueSpawn03.getWorldOrigin());<br />      <br />   }<br /><br /><br />   void init(){<br />      sys.setSpawnArg("name","blueMonsterNulls");<br />      blueMonsterNulls = sys.spawn("target_null");<br />      sys.waitFrame();<br />      sys.setSpawnArg("name","redMonsterNulls");<br />      redMonsterNulls = sys.spawn("target_null");<br />   }<br /><br />}<br /><br /><br /><br />void sendWaves(){<br />   while(1){<br />      world::spawnRedWave();<br />      sys.waitFrame();<br />      //world::spawnBlueWave();<br />      sys.waitFrame();<br />      sys.wait(2);<br />   }<br />}<br /><br />void reportMonster(){<br />   while(1){<br />      world::reportMonster();<br />      sys.wait(5);<br />   }<br />   <br />}<br />void main(){<br />   sys.waitFrame();<br />//   startCreeps();   <br />   world::init();<br />//   thread(sendWaves());<br />   world::spawnRedWave();<br />   world::spawnBlueWave();<br />   sys.waitFrame();<br />   thread(reportMonster());<br />}<br /><br /></div><br /><br />in this example the spawning is done in the world::spawnRedWave and  world::spawnBlueWave. Monsters will be spawned with their keys/values. after spawning theyll placed on the worldOrigins of the spawnpoints. same behaviour, we got monsters on the map....<br /><br />as i plan several waves for both teams on different spawnlocations in different intervalls, kept in mind that the func_spawner didn't work as i expected, i wonder if its the best way to put my own spawners as threads.<br /><br />eg. <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void spawnred(){<br />        while(flag){<br />        world::spawnRedWave();<br />        sys.wait(30);<br />      }<br />}<br />void main(){<br />      thread spawnred();<br />}<br /></div><br /><br />there will be lots of this so i wonder if its good to have like 10 - 20 threads waiting 30secs or if its better to have a control thread with a duration of like 1 min each iteration through the while which controls evrything. <br /><br />spawnred - blue<br />wait 5<br />spawnsomething else<br />wait 15<br />trigger ai, whatever<br />wait 8.. etc. <br /><br />what do you think ? <img src="https://web.archive.org/web/20101225120348im_/http://www.doom3world.org/phpbb2/images/smilies/icon_smile.gif" alt=":-)" title="Smile" /><br /><br />greets</div>]]></body></post><post id="p227595" date="Posted: Mon Sep 27, 2010 11:06 pm "><author>AnthonyJa</author><body><![CDATA[<div class="postbody"><div class="quotetitle">bdmn wrote:</div><div class="quotecontent">there will be lots of this so i wonder if its good to have like 10 - 20 threads waiting 30secs or if its better to have a control thread with a duration of like 1 min each iteration through the while which controls evrything. <br /></div><br /><br />Hm, well having lots of threads doesn't sound a good thing, but in reality, since they're not real threads but just different pieces of scripts each with their own state, it probably would work OK. <br /><br />I'd be more concerned about why the spawner stopped working - perhaps you're hitting some other limit? I know you mentioned you'd checked "max_active" - you could also have hit the spawnArg "count" (default "-1") which sets the number of things to spawn. I guess you don't have "max_team_test" but if you do remove it (appears to be obsolete but may be used in some Q4 maps).</div>]]></body></post></posts></thread></xml>
