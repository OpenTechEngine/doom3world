<?xml version="1.0" encoding="UTF-8"?>
<xml><thread id="3145"><title>Level Scripting Tutorial 2 - (UPDATED 8/04)</title><posts><post id="p30199" date="Posted: Sat Aug 07, 2004 5:40 pm "><author>rich_is_bored</author><body><![CDATA[<div class="postbody"><span style="font-size: 200%; line-height: normal"><span style="font-weight: bold">Level Scripting Tutorial 2</span></span><br /><br /><span style="font-size: 134%; line-height: normal"><span style="font-weight: bold">Introduction</span></span><br /><br />Welcome to the second in a series of three Scripting Tutorials.<br /><br />In the last tutorial I broke down scripting to the most basic elements. I explained the concept of programming and how a computer interprets code. I also included a list of commands thats syntax and function are known. And finally I walked you through creating a simple spinning box.<br /><br />Now you should already have a pretty good idea of how to script, if not program in general. You now know how to make a spinning box but who wants to put something dumb like that in their levels. Not me, and we are not going to continue where the other tutorial left off.<br /><br />In this tutorial we will begin making a mechanical arm. To save you the time and trouble of manually creating these moving parts I have included everything you will need in the zip in the link below. I am sparing you the trouble of learning a 3D modeling package which by the way is not easy when you are a complete newbie like myself.<br /><br /><span style="font-weight: bold">FILE IS NO LONGER AVAILABLE</span><br /><br />Eventually, I should get around to the third installment of these tutorials where we will take the knowledge and quite possibly the mechanical arm from this tutorial and create an assembly line. Um... it might take awhile for me to finish the advanced tutorial.<br /><br /><span style="font-size: 134%; line-height: normal"><span style="font-weight: bold">Creating Objects: Modeling Package VS. D3Radient (Part 1)</span></span><br /><br />This will probably end up turning in to some big debate as to which method to use. Some may find creating objects in a 3rd party modeling package easier while others will think D3Radient is the way to go. Here is a list of pros and cons to each method.<br /><br /><ul><li> Many external object formats (LWOs, ASEs, ECT...) import straight into the engine without conversion.</li><li> Native D3Radient objects can be created in the editor.</li><li> 3D modeling packages have more object related tools than D3Radient.</li><li> External objects cannot be textured in D3Radient, they require a separate material file.</li><li> External objects can be rotated in the editor without affecting their axises.</li><li> Native D3Radient objects inherit their axises from the game during dmap compile.</li><li> An external objects origin (pivot point) is assigned at it's origin (0, 0, 0) in its respective modeling program.</li><li> A Native D3Radient objects origin is assigned to the center of the object upon creation.</li></ul>If this all sounds like chinese to you now just keep reading and I'll get into this more at the end of the tutorial.<br /><br /><span style="font-size: 134%; line-height: normal"><span style="font-weight: bold">Intermediate: Creating a Mechanical Arm</span></span><br /><br />Before you can run you have to learn to walk. We were crawling around in the last tutorial and hopefully by the end of this one you should be walking around on two feet.<br /><br />I am trying to streamline this tutorial so that we can jump right into scripting. So, extract the zip to <span style="font-weight: bold">[Your Doom 3 Directory]\base</span> and make sure you allow it to extract to the subfolders. You will have a precompiled map, all the separate pieces of the arm, and the appropriate material file. Please excuse the poor texturing as I didn't feel it was nessecary to model I high poly version and create a normalmap.<br /><br />Now let me explain what I have already done for you.<br /><br />I have created a simple map. It is one room with 6 func_movers, a light, and a player starting point. This map uses the "same name" method so make sure you name and place your script appropriately. The "model" key/value pairs of all six func_movers have been set to the appropriate models in the model directory. The func_movers were moved and rotated to the positions which they should be bound.<br /><br /><span style="font-weight: bold">Note:</span> You do not have to model 3D objects in external programs. You can create these from within D3Radient however there will be slight differences. I go into detail about the changes nessecary at the end of this tutorial.<br /><br />The only thing I didn't do for you was give you the script itself. You'll be writing that up as we go.<br /><br />So let's get to making a script so you can see this cool arm and start moving it.<br /><br />First open editpad... or notepad if your stubborn. We are going to save a basic script just so we can load the map in the background. Copy the following into your text editor.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">////////////////////////////////////////////////////<br />//<br />//   Setup binds and times etc...<br />//<br />////////////////////////////////////////////////////<br /><br />void setup_objects()<br />{<br />}<br /><br />////////////////////////////////////////////////////<br />//<br />//   Mechanical Movement... <br />//<br />////////////////////////////////////////////////////<br /><br />////////////////////////////////////////////////////<br />//<br />//   MAIN<br />//<br />////////////////////////////////////////////////////<br /><br />void main ()<br />{<br />   setup_objects ();<br />   sys.wait (5);<br />}</div><br /><br />Now save this code as rich_scripting_tutorial_2.script. You did remeber that we're going to save this script to the maps folder right? Good, now we have a basic script that runs but does nothing visual.<br /><br />So... Load Doom 3 and type "map rich_scripting_tutorial_2" in the console. Switch to windowed mode so we can ALT + TAB between the game and text editor.<br /><br />What you should see is a simple square room with a mechanical arm hanging from the ceiling. The first thing we will need to do is attatch all these objects together so that they are in a child-parent relationship.<br /><br />Let me explain child-parent relationships real quick.<br /><br />Do you remember in the last tutorial how we attatched a light to the cube and watched how the light inhereted all the movements of the cube? That was a child-parent relationship. The light was a child to the cube. The cube was a parent to the light.<br /><br />So how is this going to play out in this tutorial? Well this arm is composed of several pieces which all move independantly. Here are the pieces and the names I assigned each entity in the editor.<br /><br /><ol style="list-style-type: arabic-numbers"><li>The base of the arm. (arm_base)</li><li>The shaft of the arm. (arm_shaft)</li><li>The rotating cuff of the arm. (finger_joint)</li><li>The fingers of the arm. (finger_1...2...3)</li></ol><br />If I were to rotate the base of the arm, I would expect all the parts to rotate with it. If I were to bend the shaft of the arm, I would expect all the parts except the base to move with it. If I were to rotate the cuff, I would expect the fingers to rotate with it. And the fingers... well they have nothing attached to them at least yet. We'll attatch things to the fingers in the next tutorial.<br /><br />So we need to add some bind commands to our setup_objects function. Add this code.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   $arm_shaft.bind($arm_base);<br />   $finger_joint.bind($arm_shaft);<br />   $finger_1.bind($finger_joint);<br />   $finger_2.bind($finger_joint);<br />   $finger_3.bind($finger_joint);</div><br /><br />Now the pieces are bound and I could move the entire arm as one piece just by moving the base. Let's create a test funciton to do so.<br /><br />Add the following code under the mechanical movements section.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void rotate_base_90_CW ()<br />{<br />   $arm_base.rotateOnce('0 90 0');<br />   sys.print ("rotating base 90 degrees CW\n");<br />   sys.waitFor($arm_base);<br />}</div><br /><br />This function will tell the base to rotate once 90 degrees clockwise. Add a call to rotate_base_90_CW to the main function and you are ready to test. Check to make sure your code looks like this and save.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">////////////////////////////////////////////////////<br />//<br />//   Setup binds and times etc...<br />//<br />////////////////////////////////////////////////////<br />void setup_objects()<br />{<br />   $arm_shaft.bind($arm_base);<br />   $finger_joint.bind($arm_shaft);<br />   $finger_1.bind($finger_joint);<br />   $finger_2.bind($finger_joint);<br />   $finger_3.bind($finger_joint);<br />}<br /><br />////////////////////////////////////////////////////<br /><br /><br />//<br />//   Mechanical Movement... <br />//<br />////////////////////////////////////////////////////<br /><br />void rotate_base_90_CW ()<br />{<br />   $arm_base.rotateOnce('0 90 0');<br />   sys.print ("rotating base 90 degrees CW\n");<br />   sys.waitFor($arm_base);<br />}<br /><br />////////////////////////////////////////////////////<br />//<br />//   MAIN<br />//<br />////////////////////////////////////////////////////<br /><br />void main ()<br />{<br />   setup_objects ();<br />   sys.wait (5);<br />   rotate_base_90_CW ();<br />}</div><br /><br />Now reload the map. After a five second delay the entire arm should rotate and stop.<br /><br />Now we have tested the movement of the base. Let's add functions for the rest of the parts.<br /><br />Add this code to the mechanical movement section.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void bend_arm_45_FW ()<br />{<br />   $arm_shaft.rotateOnce('45 0 0');<br />   sys.print ("bending arm 45 degrees FW\n");<br />   sys.waitFor($arm_shaft);<br />}<br /><br />void rotate_fingers_1800_CW ()<br />{<br />   $finger_joint.rotateOnce('0 1800 0');<br />   sys.print ("rotating fingers 1800 degrees CW\n");<br />   sys.waitFor($finger_joint);<br />}<br /><br />void finger_release ()<br />{<br />   $finger_1.rotateOnce('45 0 0');<br />   $finger_2.rotateOnce('45 0 0');<br />   $finger_3.rotateOnce('45 0 0');<br />   sys.print ("releasing finger grapple\n");<br />   sys.waitFor($finger_1);<br />   sys.waitFor($finger_2);<br />   sys.waitFor($finger_3);<br />}</div><br /><br />Now add these calls to the main function.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">bend_arm_45_FW ();<br />rotate_fingers_1800_CW ();<br />finger_release ();</div><br /><br />Again check to see that your code looks like this and save.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">////////////////////////////////////////////////////<br />//<br />//   Setup binds and times etc...<br />//<br />////////////////////////////////////////////////////<br />void setup_objects()<br />{<br />   $arm_shaft.bind($arm_base);<br />   $finger_joint.bind($arm_shaft);<br />   $finger_1.bind($finger_joint);<br />   $finger_2.bind($finger_joint);<br />   $finger_3.bind($finger_joint);<br />}<br /><br />////////////////////////////////////////////////////<br />//<br />//   Mechanical Movement... <br />//<br />////////////////////////////////////////////////////<br /><br />void rotate_base_90_CW ()<br />{<br />   $arm_base.rotateOnce('0 90 0');<br />   sys.print ("rotating base 90 degrees CW\n");<br />   sys.waitFor($arm_base);<br />}<br /><br />void bend_arm_45_FW ()<br />{<br />   $arm_shaft.rotateOnce('45 0 0');<br />   sys.print ("bending arm 45 degrees FW\n");<br />   sys.waitFor($arm_shaft);<br />}<br /><br />void rotate_fingers_1800_CW ()<br />{<br />   $finger_joint.rotateOnce('0 1800 0');<br />   sys.print ("rotating fingers 1800 degrees CW\n");<br />   sys.waitFor($finger_joint);<br />}<br /><br />void finger_release ()<br />{<br />   $finger_1.rotateOnce('45 0 0');<br />   $finger_2.rotateOnce('45 0 0');<br />   $finger_3.rotateOnce('45 0 0');<br />   sys.print ("releasing finger grapple\n");<br />   sys.waitFor($finger_1);<br />   sys.waitFor($finger_2);<br />   sys.waitFor($finger_3);<br />}<br /><br />////////////////////////////////////////////////////<br />//<br />//   MAIN<br />//<br />////////////////////////////////////////////////////<br /><br />void main ()<br />{<br />   setup_objects ();<br />   sys.wait (5);<br />   rotate_base_90_CW ();<br />   bend_arm_45_FW ();<br />   rotate_fingers_1800_CW ();<br />   finger_release ();<br /><br />}</div><br /><br />Now again, reload the map in game and watch as the arm rotates, bends, the cuff rotates, and the fingers extend. This is getting impressive.<br /><br />Now let's add some more functions so we have a little more control over the arms movement.<br /><br />Add the following code to the mechanical movement section.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void rotate_base_90_CCW ()<br />{<br />   $arm_base.rotateOnce('0 -90 0');<br />   sys.print ("rotating base 90 degrees CCW\n");<br />   sys.waitFor($arm_base);<br />}<br /><br />void bend_arm_45_BW ()<br />{<br />   $arm_shaft.rotateOnce('-45 0 0');<br />   sys.print ("bending arm 45 degrees BW\n");<br />   sys.waitFor($arm_shaft);<br />}<br /><br />void rotate_fingers_1800_CCW ()<br />{<br />   $finger_joint.rotateOnce('0 -1800 0');<br />   sys.print ("rotating fingers 1800 degrees CCW\n");<br />   sys.waitFor($finger_joint);<br />}<br /><br />void finger_grasp ()<br />{<br />   $finger_1.rotateOnce('-45 0 0');<br />   $finger_2.rotateOnce('-45 0 0');<br />   $finger_3.rotateOnce('-45 0 0');<br />   sys.print ("contracting finger grapple\n");<br />   sys.waitFor($finger_1);<br />   sys.waitFor($finger_2);<br />   sys.waitFor($finger_3);<br />}</div><br /><br />Now be creative here and try your own combination of movements by adding, changing, and deleting function calls from the main function. Save the script and reload the map in game.<br /><br />You should be able to create any kind of motion desireable. What you will notice is that the arm is not moving very fluidly. Let's change that. This time it won't take too much code.<br /><br />Add these lines to the setup_objects function. <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   $arm_base.time (.5);   <br />   $arm_shaft.time (.3);   <br />   $finger_joint.time (1);   <br />   $finger_1.time (.3);   <br />   $finger_2.time (.3);   <br />   $finger_3.time (.3);   <br />   $arm_base.accelTime (.3);   <br />   $arm_shaft.accelTime (.3);   <br />   $finger_joint.accelTime (.3);   <br />   $finger_1.accelTime (.3);   <br />   $finger_2.accelTime (.3);   <br />   $finger_3.accelTime (.3);<br />   $arm_base.decelTime (.3);   <br />   $arm_shaft.decelTime (.3);   <br />   $finger_joint.decelTime (.3);   <br />   $finger_1.decelTime (.3);   <br />   $finger_2.decelTime (.3);   <br />   $finger_3.decelTime (.3);</div><br /><br />These lines change the speed of each part, and add an amount of acceleration and deceleration. Feel free to adjust these values and experiment.<br /><br />Check your code to see that looks similar to this and save.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">////////////////////////////////////////////////////<br />//<br />//   Setup binds and times etc...<br />//<br />////////////////////////////////////////////////////<br />void setup_objects()<br />{<br /><br />   $arm_shaft.bind($arm_base);<br />   $finger_joint.bind($arm_shaft);<br />   $finger_1.bind($finger_joint);<br />   $finger_2.bind($finger_joint);<br />   $finger_3.bind($finger_joint);<br />   $arm_base.time (.5);   <br />   $arm_shaft.time (.3);   <br />   $finger_joint.time (1);   <br />   $finger_1.time (.3);   <br />   $finger_2.time (.3);   <br />   $finger_3.time (.3);   <br />   $arm_base.accelTime (.3);   <br />   $arm_shaft.accelTime (.3);   <br />   $finger_joint.accelTime (.3);   <br />   $finger_1.accelTime (.3);   <br />   $finger_2.accelTime (.3);   <br />   $finger_3.accelTime (.3);<br />   $arm_base.decelTime (.3);   <br />   $arm_shaft.decelTime (.3);   <br />   $finger_joint.decelTime (.3);   <br />   $finger_1.decelTime (.3);   <br />   $finger_2.decelTime (.3);   <br />   $finger_3.decelTime (.3);<br />}<br /><br /><br /><br />////////////////////////////////////////////////////<br />//<br />//   Mechanical Movement...<br />//<br />////////////////////////////////////////////////////<br /><br />void rotate_base_90_CW ()<br />{<br />   $arm_base.rotateOnce('0 90 0');<br />   sys.print ("rotating base 90 degrees CW\n");<br />   sys.waitFor($arm_base);<br />}<br /><br />void rotate_base_90_CCW ()<br />{<br />   $arm_base.rotateOnce('0 -90 0');<br />   sys.print ("rotating base 90 degrees CCW\n");<br />   sys.waitFor($arm_base);<br />}<br /><br />void bend_arm_45_FW ()<br />{<br />   $arm_shaft.rotateOnce('45 0 0');<br /><br />   sys.print ("bending arm 45 degrees FW\n");<br />   sys.waitFor($arm_shaft);<br />}<br /><br />void bend_arm_45_BW ()<br />{<br />   $arm_shaft.rotateOnce('-45 0 0');<br />   sys.print ("bending arm 45 degrees BW\n");<br />   sys.waitFor($arm_shaft);<br />}<br /><br />void rotate_fingers_1800_CW ()<br />{<br />   $finger_joint.rotateOnce('0 1800 0');<br />   sys.print ("rotating fingers 1800 degrees CW\n");<br />   sys.waitFor($finger_joint);<br />}<br /><br />void rotate_fingers_1800_CCW ()<br />{<br />   $finger_joint.rotateOnce('0 -1800 0');<br />   sys.print ("rotating fingers 1800 degrees CCW\n");<br />   sys.waitFor($finger_joint);<br />}<br /><br />void finger_release ()<br />{<br />   $finger_1.rotateOnce('45 0 0');<br />   $finger_2.rotateOnce('45 0 0');<br />   $finger_3.rotateOnce('45 0 0');<br />   sys.print ("releasing finger grapple\n");<br />   sys.waitFor($finger_1);<br />   sys.waitFor($finger_2);<br />   sys.waitFor($finger_3);<br />}<br /><br />void finger_grasp ()<br />{<br />   $finger_1.rotateOnce('-45 0 0');<br />   $finger_2.rotateOnce('-45 0 0');<br />   $finger_3.rotateOnce('-45 0 0');<br />   sys.print ("contracting finger grapple\n");<br />   sys.waitFor($finger_1);<br />   sys.waitFor($finger_2);<br />   sys.waitFor($finger_3);<br />}<br /><br />////////////////////////////////////////////////////<br />//<br />//   MAIN<br />//<br />////////////////////////////////////////////////////<br /><br />void main ()<br />{<br />   setup_objects ();<br />   sys.wait (5);<br />   rotate_base_90_CW ();<br />   finger_release ();<br />   bend_arm_45_FW ();<br />   rotate_fingers_1800_CW ();<br />}</div><br /><br />Now the arm moves more fluid and looks realistic. You should have a fully functional mechanical arm behaving how you want it. This should provide a good reference for constructing just about anything.<br /><br /><span style="font-size: 134%; line-height: normal"><span style="font-weight: bold">Conclusion</span></span><br /><br />Hey, were done! That was a lot of copying and pasting. <img src="https://web.archive.org/web/20121104033829im_/http://www.doom3world.org/phpbb2/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />Hopefully you understand what you were doing. If not just bombard me with questions like last time and I will try to answer them.<br /><br />Don't stop reading here. There is one last section that should answer most of your questions.<br /><br /><span style="font-size: 134%; line-height: normal"><span style="font-weight: bold">Creating Objects: Modeling Package VS. D3Radient (Part 2)</span></span><br /><br />Some of you may have noticed that the fingers all rotate on the X axis yet, they move in different directions. How is this possible? <img src="https://web.archive.org/web/20121104033829im_/http://www.doom3world.org/phpbb2/images/smilies/icon_confused.gif" alt=":?" title="Confused" /><br /><br />Well, there is some quirkiness related to the way you script objects depending on whether they are models or brushes.<br /><br />Let's talk about some of the pros and cons listed earlier. This is pretty difficult to explain in words alone so I busted out photoshop and make some simple diagrams to help things along.<br /><br />First, take a look at the picture below.<br /><br /><img src="https://web.archive.org/web/20121104033829im_/http://img.photobucket.com/albums/v36/rich_is_bored/hand.gif" alt="Image" /><br /><br />This is the hand portion of the mechanical arm. It is comprised of Finger_Joint.lwo and three instances of Finger.lwo.<br /><br />Notice how each instance of finger.lwo is rotated. Notice also that in each instance, the X axis is running parallel to the connecting rod. This is why I can use the command ...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">finger_X.rotateOnce('45 0 0');</div><br /><br />... on all three fingers and they will rotate away from the center of Finger_Joint.lwo.<br /><br />Now, whether I use a modeling package or D3Radient to create these objects my goal is the same. I want my objects, and their axises to be oriented like the picture above before I start animating it. The problem is that the steps involved are radically different because the game treats brushes and models differently.<br /><br /><span style="font-weight: bold">Model Scripting Setup</span><br /><br />If you use a 3rd party modeling package to create your objects, you can rotate your objects into postition in D3Radient and the objects' pivot points rotate with them. You can save your map with your objects in place and immediately begin scripting their animations.<br /><br /><ul><li>Build each object using your modeling package, so it is in line with the axis you plan to use in your animation.</li><li>Ensure that the origin (0, 0, 0) is positioned where you plan to rotate your object.</li><li>Follow the appropriate steps to ensure Doom 3 will import the object.</li><li>Assign each part to an entity through the use of the "model" key/value pair.</li><li>Move, Rotate, and otherwise position each part in place.</li><li>Save the map and begin scripting the animation.</li></ul><br /><span style="font-weight: bold">Brush Scripting Setup</span><br /><br />If I create an object in D3Radient and make it an entity, it won't matter how I move or rotate it. The pivot point will not rotate. The Z axis for that object will always run up and down. The X axis for that object will always run east to west. The Y axis for that object will always run north to south.<br /><br />The only time the pivot point actually rotates is when you rotate the objects with a script. In order to set things up like the arm in this tutorial, when you're working with brushes, you have build the objects in line with the axis you plan to use in your animation, save your map with them in that position, and then assemble the pieces using a portion of your script prior to actually animating your scene.<br /><br /><ul><li>Build each object using brushes in D3Radient, so it is in line with the axis you plan to use in your animation.</li><li>Select the brushes that make up one part and form and entity out of the group.</li><li>Repeat the step above for each part.</li><li>Adjust the origin of each part so it is positioned where you plan to rotate the object.</li><li>Position each part in place but <span style="font-weight: bold">do not</span> rotate them.</li><li>Save the map, and using a portion of your script, quickly rotate the objects into place.</li><li>Begin scripting the animation.</li></ul><br /><span style="font-weight: bold">More on Each Methods Differences</span><br /><br />Look at the picture below.<br /><br /><img src="https://web.archive.org/web/20121104033829im_/http://img.photobucket.com/albums/v36/rich_is_bored/finger.gif" alt="Image" /><br /><br /><br />Here is Finger.lwo. Notice that when I created this object I made certain that the X axis was running through the connecting rod. This makes certain that when the object is rotated around the X axis in a script, it rotates around the connecting rod.<br /><br />There are some more tricks involved. Also notice that the X, Y, and Z axis all meet at the center of the connecting rod. This is where the origin or "center point" will be placed when the object is loaded in D3Radient. So, if I were to rotate in any other direction (not that I would want to) it would rotate around the corresponding axis where the axis runs through the object.<br /><br />The origin is also the point used when you move your object. Let's say I told the finger to move to 342, 23, 975 (again, not that I would want to). The object would move until the origin was resting at 342, 23, 975.<br /><br />Now, Lets say I wanted to make this same shape in D3Radient. Again, I would have to make the X axis run through the connecting rod.<br /><br />I would have to open the entities properties and type in a numerical value for the origin key/value pair.<br /><br />After doing this for each part I have three identical fingers. But I have to make sure they all are in line with the X axis. How am I going to make my arm look like the first picture and have all the fingers in line? <img src="https://web.archive.org/web/20121104033829im_/http://www.doom3world.org/phpbb2/images/smilies/icon_confused.gif" alt=":?" title="Confused" /><br /><br />Well, I make the fingers in line and compile the map. Now before the player even gets the opportunity to start moving around in my map, I have to quickly move these fingers into their correct positions with a portion of my script.<br /><br />This requires I adjust the time of each finger so the objects move incredibly fast. Then I can move and rotate them into postition. Then set all those time values to the values I intend to use during animation. Finally, I can begin animating them.<br /><br />That pretty much sums it up. Don't get it? Post your questions here please. I want to make this the equivalent of a "scripting for dummies" book.  <img src="https://web.archive.org/web/20121104033829im_/http://www.doom3world.org/phpbb2/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /></div>]]></body></post><post id="p30237" date="Posted: Sat Aug 07, 2004 7:12 pm "><author>Prime</author><body><![CDATA[<div class="postbody"><img src="https://web.archive.org/web/20121104033829im_/http://www.doom3world.org/phpbb2/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br />*applauds at your series*
<br /><br />Very well done .. I'm not such a total newbie at scripting ( as I've messed with D3's weapons a ton of times cause its the only thing I know how to do ) but this seems like a short shot for me <img src="https://web.archive.org/web/20121104033829im_/http://www.doom3world.org/phpbb2/images/smilies/icon_smile.gif" alt=":)" title="Smile" />.
<br /><br />Great work.</div>]]></body></post><post id="p32620" date="Posted: Wed Aug 11, 2004 5:04 am "><author>Hell Byte</author><body><![CDATA[<div class="postbody">Hm, so where do tell the editor to look for the material file for the model?</div>]]></body></post><post id="p32680" date="Posted: Wed Aug 11, 2004 6:29 am "><author>BNA!</author><body><![CDATA[<div class="postbody"><div class="quotetitle">syphlitix wrote:</div><div class="quotecontent">Hm, so where do tell the editor to look for the material file for the model?</div>
<br /><br />You assign the surface name in LightWave.</div>]]></body></post><post id="p32682" date="Posted: Wed Aug 11, 2004 6:31 am "><author>Hell Byte</author><body><![CDATA[<div class="postbody">Hm, im not using lightwave, just doing a conversion. The converter writes the material data to the actual .lwo file i think, would this not work?</div>]]></body></post><post id="p32686" date="Posted: Wed Aug 11, 2004 6:38 am "><author>BNA!</author><body><![CDATA[<div class="postbody"><div class="quotetitle">syphlitix wrote:</div><div class="quotecontent">Hm, im not using lightwave, just doing a conversion. The converter writes the material data to the actual .lwo file i think, would this not work?</div>
<br /><br />It's only a surface name, no material data or such - the surface name is just the same as a shader name with full path like:
<br />"textures/base/wall/wall1"</div>]]></body></post><post id="p32702" date="Posted: Wed Aug 11, 2004 7:04 am "><author>Hell Byte</author><body><![CDATA[<div class="postbody">Ah, ok. Ill check my plugin, maybe the material didnt get imported along with the obj. 
<br /><br />Thanks though!</div>]]></body></post><post id="p33351" date="Posted: Wed Aug 11, 2004 11:09 pm "><author>ismodred</author><body><![CDATA[<div class="postbody">hmmm the models aren't working for me.
<br /><br />i extracted to the doom3/base/
<br />so i have
<br /><br />doom3/base/maps/rich_scripting_tutorial_2.cm
<br />doom3/base/maps/rich_scripting_tutorial_2.map
<br />doom3/base/maps/rich_scripting_tutorial_2.proc
<br /><br />doom3/base/models/rich_scripting_tutorials_arm_base.lwo
<br />doom3/base/models/rich_scripting_tutorials_arm_shaft.lwo
<br />doom3/base/models/rich_scripting_tutorials_finger.lwo
<br />doom3/base/models/rich_scripting_tutorials_finger_joint.lwo
<br />doom3/base/models/rich_scripting_tutorials_grey.tga
<br /><br />doom3/base/materials/rich_scripting_tutorials.mtr
<br /><br /><br />and added
<br />doom3/base/maps/rich_scripting_tutorial_2.script
<br /><br /><br />i open the editor and load the .map file
<br /><br />all of the arm parts are represented as black blocks.
<br />if i load the map, they are still just black blocks. they rotate and all, but just blocks.
<br /><br />possible reasons? solutions?
<br /><br /><br />edit.... goofy freaking program.  erased all extracted files.. then re-extracted.. no difference.
<br /><br />closed out d3, restarted and it all worked right.
<br /><br />goofy!!</div>]]></body></post><post id="p35562" date="Posted: Sat Aug 14, 2004 10:49 pm "><author>wviperw</author><body><![CDATA[<div class="postbody">Rich: As much as I liked your tut, I think it breaks D3 MP. The .zip file included with the tut puts a "rich_scripting_tutorials.mtr" file in the main "materials" directory. It seems that whenever this .mtr file is in that directory, it royally screws up MP (especially through ASE). When it gets to "connecting to server" it will kick me back to Windows. As soon as I either removed your .mtr file, or moved it into a subfolder (e.g. - "materials\rich\..."), it fixed it.
<br /><br />Could somebody please confirm this on their D3 install?</div>]]></body></post><post id="p40313" date="Posted: Mon Aug 23, 2004 1:58 am "><author>rich_is_bored</author><body><![CDATA[<div class="postbody">I hope that's not the case but even if it is it's nothing that deleting the tutorial won't fix right? <img src="https://web.archive.org/web/20121104033829im_/http://www.doom3world.org/phpbb2/images/smilies/icon_confused.gif" alt=":?" title="Confused" /><br /><br />Anyway, I'd put time into fixing the problem but I'm really pre-occupied with the aftermath of hurricane Charley. If you can confirm the problem, I'll work on the issue when things settle down here.
<br /><br />On a side note, I've changed the link above... again.  <img src="https://web.archive.org/web/20121104033829im_/http://www.doom3world.org/phpbb2/images/smilies/icon_sad.gif" alt=":(" title="Sad" /><br /><br />It seems that I'm never going to find a permanent place to host these damn tutorial files.</div>]]></body></post><post id="p40836" date="Posted: Tue Aug 24, 2004 2:44 am "><author>Strife</author><body><![CDATA[<div class="postbody"><div class="quotetitle">ismodred wrote:</div><div class="quotecontent">edit.... goofy freaking program.  erased all extracted files.. then re-extracted.. no difference.<br /><br />closed out d3, restarted and it all worked right.<br /><br />goofy!!</div>
<br /><br />The same exact thing happened to me.  Is there something that causes this, as this would become a pain in the arse if I have to do the same thing every time for similar procedures.</div>]]></body></post><post id="p40882" date="Posted: Tue Aug 24, 2004 5:24 am "><author>rich_is_bored</author><body><![CDATA[<div class="postbody">Are you guys extracting the files with Doom 3 running in the background?
<br /><br />It's the only thing I can think of as Doom 3 has to load the custom content before it can display it.</div>]]></body></post><post id="p46771" date="Posted: Sat Sep 04, 2004 5:08 pm "><author>SonicClang</author><body><![CDATA[<div class="postbody">I'm getting black blocks instead of models as well. 
<br /><br />I exctracted to base\maps\script2\... and kept file structure intact from the .zip file. The wall texture "grey.tga" shows up just fine, but no models.</div>]]></body></post><post id="p46773" date="Posted: Sat Sep 04, 2004 5:12 pm "><author>SonicClang</author><body><![CDATA[<div class="postbody">Easy fix...
<br /><br />I just have to insert "maps/script2/" in front of the path you already typed in for the path of the model. Now when I reload the map in the editor it shows up correctly.
<br /><br />Still all black though. Is there also a path for the textures of the models?</div>]]></body></post><post id="p46788" date="Posted: Sat Sep 04, 2004 6:11 pm "><author>SonicClang</author><body><![CDATA[<div class="postbody">Ok Rich,
<br /><br />A couple problems with my script. 
<br /><br />1) The arm does the first few movements, but then doesn't retract. It gets all the way to unlreleasing the grapple, but doesn't come back to the beginning. I've even copied all your text into my script file and it still doesn't come bak.
<br /><br />2) No matter what it doesn't seem as though adjusting the .time and the .accelTime numbers does anything. The arm still flails around very jumpy and I can't smooth it out. When it spins the finger joint around 1800 degrees, that movment is very jumpy, and then goes directly into opening the fingers. I'd like to have a nice smooth accel time and have it spin for 5 seconds. So I put this in the script:
<br /><br />$finger_joint.time (5);
<br />and
<br />$finger_joint.accelTime (3);
<br /><br />As far as I can tell that should force the whole movment of the joint to last 5 seconds, with a 3 second accel time. Well, it's still lasting 1 second instead of 5.
<br /><br />3) Maybe you cover this in the third tut, but how do I put a pause between movements? I'm a mechanical engineer, and I've never seen a machine go from one movement to the next so quickly. I understand this is just a tutorial, but is there a way to pause before going on? If this is in your next tutorial just tell to read that, which I will anyway right now <img src="https://web.archive.org/web/20121104033829im_/http://www.doom3world.org/phpbb2/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> I really am learning a lot by typing all this code in.
<br /><br />And still the models are all black.
<br /><br />EDIT: Ok, I realized my error with the .time and .accelTime numbers. I put them under the main section instead of the setup section. MY BAD!!! <img src="https://web.archive.org/web/20121104033829im_/http://www.doom3world.org/phpbb2/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /></div>]]></body></post><post id="p46792" date="Posted: Sat Sep 04, 2004 6:17 pm "><author>DCBKNC1701</author><body><![CDATA[<div class="postbody">to pause,you put wait( 3 ); for example,which would make a wait of 3</div>]]></body></post><post id="p46802" date="Posted: Sat Sep 04, 2004 6:28 pm "><author>SonicClang</author><body><![CDATA[<div class="postbody">Ok I think I figured out everything I had a question on in my last post. Except for the models still being black. 
<br /><br />I guess I didn't realize I had to call the reverse actions at the end of the code. Strange that wasn't shown in the tut. I must have missed something, I'll read it again.</div>]]></body></post><post id="p46815" date="Posted: Sat Sep 04, 2004 6:40 pm "><author>rich_is_bored</author><body><![CDATA[<div class="postbody">If you noticed, almost this entire tutorial tries to step away from the traditional "step by step" method. The goal here is to get you to start thinking about how you'd write up the script yourself.
<br /><br />Anyway, if you want to add pauses by using the wait command then just insert it wherever you think there should be a pause.
<br /><br />For example...
<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void main ()<br />{<br />   setup_objects ();<br />   sys.wait (5);<br />   rotate_base_90_CW ();<br />   bend_arm_45_FW ();<br />   rotate_fingers_1800_CW ();<br />   finger_release ();<br /><br />}</div><br /><br />becomes...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void main ()<br />{<br />   setup_objects ();<br />   sys.wait (5);<br />   rotate_base_90_CW ();<br />   sys.wait (5);<br />   bend_arm_45_FW ();<br />   sys.wait (5);<br />   rotate_fingers_1800_CW ();<br />   sys.wait (5);<br />   finger_release ();<br />}</div></div>]]></body></post><post id="p46819" date="Posted: Sat Sep 04, 2004 6:46 pm "><author>SonicClang</author><body><![CDATA[<div class="postbody">Rich, I've already started playing around with the code. I know what you mean about creating code by myself. I'm playing around with pauses, acceltime and all that stuff. I'm going to try creating some stuff myself after playing around with the existing code. 
<br /><br />I'll wait a little longer next time before posting stupid questions! <img src="https://web.archive.org/web/20121104033829im_/http://www.doom3world.org/phpbb2/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /></div>]]></body></post><post id="p116517" date="Posted: Tue Oct 18, 2005 7:48 am "><author>rich_is_bored</author><body><![CDATA[<div class="postbody">Link updated...
<br /><br /><!-- m --><a class="postlink" href="https://web.archive.org/web/20121104033829/http://www.pcgamemods.com/mod/6920.html">http://www.pcgamemods.com/mod/6920.html</a><!-- m --></div>]]></body></post></posts></thread></xml>
