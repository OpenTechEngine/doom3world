<?xml version="1.0" encoding="UTF-8"?>
<xml><thread id="21149"><title>Bumpmapped low-poly tree volumes technique (rant)</title><posts><post id="p194588" date="Posted: Wed Feb 06, 2008 4:17 am "><author>LDAsh</author><body><![CDATA[<div class="postbody">I've been getting back to doing some work on tree models but as we all know it's difficult because trees are volumes and you need to have a lot of surfaces intersecting to do a good low-poly tree, and the more low-poly, the more trees you can have in one spot, which is also what we want.  The problem is that rendering a flat surface in the likes of Doom3 is going to be precisely lit and never match the light of intersecting surfaces on different angles.  So we tend to see trees in Doom3 baring very harsh seams along intersections, or without a lot of volume to minimise intersections, or dull flat lighting using strong ambient light, or using single-pass blends and avoiding alphatest altogether.  I've tried them all, none are ideal.<br />I was looking at some real trees and realised they're like volumes of individually faceted leaves on all angles, always appearing bright and dark mixed together, and I thought this can't really be done with a normalmap, the problem is using normals that only project from the limits of its parent surface, so in a "traditional" normalmap bake no matter how many different angles you put your leaves on, it's still basically lit relative to its flat parent surface and any surface intersecting will appear to be lit very different and therefore creating harsh ugly noticeable seams.<br />Then I remembered some normalmaps I borked a while back that somehow captured light incorrectly, I got some yellow in the normalmap which caught light from the opposite direction, and looking at the tree I realised this could really work well within a single normalmap of a leaves material for a tree model, by truly having each individual leaf on an entirely different angle to the point where it would capture light from a light source behind the geometry itself, which sounds impossible but it really can happen.  Ideally you never want to see yellow in your normalmaps but for normalmapped alphatest materials trying to create volumes, this could be the answer.  It would mean no matter where strong light is coming from, there would be a balance of light and colour, at least some of the leaves on the surface will be catching it and give the illusion that the surface isn't just a flat twosided material but truly more like a volume, and it would equalise the lighting on all surfaces, leaf by individual leaf as like the true nature of a tree, instead of flattening the light on the entire surface affecting every leaf.  Cynically you might say it's making such a horrible mess of the normalmap it doesn't know what the hell it's doing, but you can have low-poly trees capable of great light interactions this way without noticeable seams or any other gimmicks to hide them. <br /><br /><img src="https://web.archive.org/web/20081121080938im_/http://www.violationentertainment.com/temp/SHleafusbush080206a.jpg" alt="Image" /><br /><br />Here we have a quick test to demonstrate inverted normalmaps.  I got this normalmap by actually properly baking it using a negative projection depth, it is a proper bake, so it is a true negative and not just inverted colours of the normalmap image, even though that produces _exactly_ the same result and that's how I will be mostly doing it later.  The blue circle catches light from the proper direction, but the green circle is inverted and catching light from the opposite direction of the actual light source, as if the light is in a mirrored position relative to the surface but only for those specific texels.  There is only one light in that scene and you can clearly see it's on the other side of the geometry.  Apart from that, it's still dynamically lit as the light source is moved around like a regular normalmap would behave, and still relative to the light source in other ways.  It's still a valid normalmap and using valid normalmap colours, just producing a result flipped around to the opposite side.  Never really purposely used, but still valid as in it doesn't cause any performance issues or cause Doom3 to crash or anything like that.  To benefit it would also seem the green circle isn't actually catching an equal amount of light there even though it's on the exact same quad as the blue, see how the blue bleeds at specular but the green doesn't, even though it's using one material and one set of textures.  Why on Earth would you want to do that though?  Well now to actually applying this to some leaves material for a tree model.<br /><br /><img src="https://web.archive.org/web/20081121080938im_/http://www.violationentertainment.com/temp/SHleafusbush080206b.jpg" alt="Image" /><br /><br /><img src="https://web.archive.org/web/20081121080938im_/http://www.violationentertainment.com/temp/SHleafusbush080206c.jpg" alt="Image" /><br /><br />By having the normals of individual leaves in all directions and not only within the limits of it parent surface you can start to create some true volumes that at least minimise harsh seams along intersecting geometry and under different lighting conditions.  To create these reverse normals from the opposite side you need give the normalmap negative/inverted colours, then rotated 180° or flipped/mirrored, and you get your inverted normalmap that will catch light/cast shadows from the opposite direction. This is a million times easier than actually baking negative projections separately which I don't know if that's even possible using Doom3 renderbump.  In theory it sounds like it's doing the job of the "twosided" keyword in a material but that doesn't solve lighting issues, it makes a material appear from both sides of the surface but still lights it from one.<br />The way I've done it in my leaves material is to split the hi-res leaves model into 2 parts, with the second less-populated part later to become inverted, which also will appear to rest behind (underneath) the main "traditional" layer.  You want to have minimal number of inverted leaves but enough to separate the proper normalmap from itself and make the leaves appear to spread out and still have a balance of all variety of angles, even though the texture is quite occupied there's still plenty of transparency.  Balance here is the key, keeping in mind how all of these leafy angles attribute to the normalmap work as a whole.  I then create separate normalmaps from each layer, but I rotate the second (underneath) layer 180° before baking the normalmap, then I invert the colours and rotate back 180°.  This ensures the angles are correct when inverting the colours because inverting a normalmap also assumes it's flipped and mirrored, which we don't want.  Then I combine the two normalmaps, I used an alpha in the "traditional" layer and just filled the inverted normalmap back into it, to create one single, very colourful normalmap.  You want to keep the traditional normalmap component layered over the inverted normalmap component, as well as combine it with some leaves on different angles for both the traditional front and the inverted back, so you're not just dealing with leaves that are either front or back, but mixed together using all angles.  Because you're trying to create as much of a volume as you can, you can afford to have leaves on sideways angles in your material.<br /><br /><img src="https://web.archive.org/web/20081121080938im_/http://www.violationentertainment.com/temp/SHleafusbush080206d.jpg" alt="Image" /><br /><br /><img src="https://web.archive.org/web/20081121080938im_/http://www.violationentertainment.com/temp/SHleafusbush080206e.jpg" alt="Image" /><br /><br />Here you see a quick and dirty final comparison between the inverted-combination normalmap and a "traditional" "flat" normalmap.  It doesn't solve intersections entirely of course, but you can see, especially from a distance, how the main seams and the general lighting conditions of each intersecting surface is drastically minimised using inverted normalmaps in harmony with proper normalmaps.  It especially pays off if you want to have strong dynamic lights.  Using the traditional method it makes the actual model structure so apparent, but using this new technique it allows the materials to behave more like a volume and disguise the model structure while still allowing for plenty of light interaction, contrast and detail, not to mention actually having bumpmapped trees with specularity.<br />So, leaf by leaf you can tell which direction the main light is coming from, but as a whole flat surface it becomes difficult to tell because there's so many different angles on there, in front and behind, but then ultimately as an entire tree object, from a distance, I find you get the best of both aspects, it seems the entire material works as a whole to at least give the impression of a volume.  As an entire tree, it enables the material to catch light mostly from the proper direction by the normalmap, but also all light from all directions as to avoid letting the geometry dictate what light and how much.<br />One major downside to this is that I don't like your chances of using photosource images to quickly work with, you're really going to need to get your hands dirty with some high-definition modelling to do this.  It requires a careful balance of angles in the normalmap that you can't possibly do by converting images directly into normalmaps.<br /><br />To finish, I want to mention some extra little techniques for spicing up alphatest, especially trees.  They come at a price but they are pretty nice.  One is that alphatest isn't texture-filtered nor can it be antialiased, so you notice as you move further away from it, it becomes these harsh and sharp floating lumps of nonsense pixels because it can't filter into anything easy on the eyes, only ons and offs.  You can use a "fuzz" material which is basically white with a dark coloured silhouette outline (gl_zero , gl_one_minus_src_color) around every sharp alphatest edge in your material, as just a little light/fog-friendly helper to give your tree back that soft fuzzy feeling, especially when viewing at extra-close or extra-far distances.  I can't see this as a problem because it's a single pass texture that doesn't use normalmapping and can't be mapped onto by lightshaders and such, so I wouldn't assume this as being a massive performance killer as an extra.  Visually it's up to you how you think it looks and helps.<br />Next you probably all already know about vertex-painting/vertex-blending, well basically you blend your material with a different material via vertex-painting, or to be more efficient you can half-blend your material with basic single-pass fullblack, and give the foliage a little more overall depth using the vertices instead of trying to manage it all in one big normalmap.  Again, I don't assume this as major performance draining extra, so why wouldn't you use vertex blending like that.  Again with the material itself, you could go ahead and give it some subtle very low-res cubemap reflections, with all the chaos in the normalmap the cubemap reflections will spread out evenly and may give your tree a subtle dewy or wet appearance.  This can be a performance drain but personally if it's done right a subtle reflection can have beautiful results, moreso in Quake IV where cubemap reflections don't glow-in-the-dark.  Cubemapping does warp/flow with the normalmapping within the alphatest of course which is why it's considered for use.  Also material-wise you can give it a subtle swaying movement using the "deform turbulent" keyword, although this doesn't work well with alphatest and you'll only get the alpha swaying/wobbling, you may still like to have that feature, although if you can this would be far better done as an animating scenery object.  Lastly concerning materials, you may like to blend in some "detail mapping" to give the foliage more grittiness and perception of a higher-detail texture.  Again, that's a personal choice but personally I'll probably find myself doing it as usual.  It's debatable whether or not it's something that has a place with normalmaps in Doom3, but it's easy to turn off, and I like it, so I use it.<br />Next is casting proper shadow for your whole tree, and not just the trunk and branches, because as you know alphas can't cast shadows, only whole geometry.  This involves a few techniques.  First take a screenshot of your tree (and only your tree against a black background) from the exact position and angle of the light that is going to cast the shadow, but viewing it aligned with the middle vertical range of the tree and exactly horizontal, preferably orthographic.  Get it fullbright from all angles so it's all white, and take a high-res screenshot.  You can then create an alpha of how the whole tree looks from that angle, preferably only 2-colour (1-bit) fullblack and fullwhite image with no antialiasing.  Next you want to use that image as a displacement, and displace a heavily subdivided plane so the tree shape sticks out, then you can easily delete the lower (background) parts of the plane so you now should have just a flat model of the silhouette of your tree shape, to some triangulated degree.  Find your nearest optimisation tools and get to work at it until you've used enough judgement to get what will make a good shadow caster but without going insane with the polycount, taking into consideration what parts will be casting shadow onto what in-game, and with the help of the common/shadow material, align your shadow-caster to face the light source and this will be an invisible nonsolid but shadowing-caster for your tree, complete with the foliage shadow, while the actual tree model materials will cast no shadows at all.  There are probably better/easier ways to get this done, but that's how I do it.<br />I was also thinking, with this technique it may just be possible to use some alphatest autosprites well enough now.  That means intersections will be increased, but your tree/weed/bush will have better coverage/filling from ALL angles, so it will always look "full" from all angles with proper use of autosprites.  Sometimes a cleverly-placed autosprite can fill in some gaps that would take more than a quad otherwise, plus I think if used appropriately it can make an interesting effect when you combine autosprites with static geometry, but it's up to the individual taste.  You may find for creating a bush/hedge that clumps of autosprites may work better than a static mesh, but that's up to you.  Definitely something I will experiment more with now.<br /><br />Okay, I'm ready to shut up.  I'll post back here when I actually put my money where my mouth is and create some proper big trees properly using these techniques and hopefully get a whole bunch of them together and looking and performing decently.</div>]]></body></post><post id="p194589" date="Posted: Wed Feb 06, 2008 5:09 am "><author>The Happy Friar</author><body><![CDATA[<div class="postbody"><img src="https://web.archive.org/web/20081121080938im_/http://www.doom3world.org/phpbb2/images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" /><br /><br />nice.  very very nice.   <img src="https://web.archive.org/web/20081121080938im_/http://www.doom3world.org/phpbb2/images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div>]]></body></post><post id="p194590" date="Posted: Wed Feb 06, 2008 5:13 am "><author>bladeghost</author><body><![CDATA[<div class="postbody">I'm wondering if leaves can just be made as particles as like in moving leaves in the wind?<br />using a particle system.</div>]]></body></post><post id="p194601" date="Posted: Wed Feb 06, 2008 11:39 am "><author>6th Venom</author><body><![CDATA[<div class="postbody">Great post, thanks LDAsh!</div>]]></body></post><post id="p194625" date="Posted: Thu Feb 07, 2008 6:34 am "><author>rich_is_bored</author><body><![CDATA[<div class="postbody">Here's an interesting idea.<br /><br />Overlap two surfaces. One with a traditional normal map and the other with an inverted normal map. Make both surfaces 50% transparent using the "translucent" keyword. <br /><br />This should produce what appears to be a fully opaque surface that's illuminated from either side.</div>]]></body></post><post id="p194798" date="Posted: Mon Feb 11, 2008 1:24 am "><author>Tron</author><body><![CDATA[<div class="postbody"><div class="quotetitle">rich_is_bored wrote:</div><div class="quotecontent">Here's an interesting idea.<br /><br />Overlap two surfaces. One with a traditional normal map and the other with an inverted normal map. Make both surfaces 50% transparent using the "translucent" keyword. <br /><br />This should produce what appears to be a fully opaque surface that's illuminated from either side.</div><br /><br />I did a few experiments trying to get something like that to work properly when working on the D3 megatexture test map, couldn't get it to work properly though.<br /><br />I was trying to do it all through the material system though, I didn't think of actually overlaying two polys with different materials on them.  Would be really interesting to see if someone can do it right.</div>]]></body></post><post id="p194809" date="Posted: Mon Feb 11, 2008 4:41 am "><author>LDAsh</author><body><![CDATA[<div class="postbody"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm wondering if leaves can just be made as particles as like in moving leaves in the wind?<br />using a particle system.</div>That's a great idea, but for maybe 1 tree in a courtyard in an enclosed area of a map.  The point of this technique is for creating low-poly trees that a map can accommodate many of.  Those bushes in my shots are 64 triangles each.  So that's 32 leaves, which would make for one pretty miserable-looking tree, to be honest.  I would recommend using cleverly animated MD5s for trees-in-the-wind, you can probably set something up for minimal bones using vertex weights to have some variation on wind effects, possibly, otherwise easily a performance killer I'm sure.  I haven't tried it yet so I'm just using the deform keyword for some "life".<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Here's an interesting idea.<br />Overlap two surfaces. One with a traditional normal map and the other with an inverted normal map. Make both surfaces 50% transparent using the "translucent" keyword.<br />This should produce what appears to be a fully opaque surface that's illuminated from either side.</div>I'm not sure I understand this overlapping geometry idea, why would you want the entire back-side lit which costs more triangles for duller lighting conditions?  These inverted normal colours is to create a little backlighting into normals producing lighting from all directions but _mostly_ "normal", just enough to eliminate obvious seams.  The inverted normal colours cannot be too prominent on the normalmap otherwise it lights completely opposite, so it's used more like some midway point to break the direction of light, but only minimally.<br />I will post a video to better show this, so you can see the light interaction more clearly and how the bushes follow the lightsource.  There are a lot of ideas for foliage but I haven't come across or seen any that handle stressful lighting conditions with such low polycount as what I've come up with here.  There are good techniques if you want flat lighting and all that, but that's exactly what I'm trying to avoid.  When you get to the point where you've got to flatten everything out just to get a feature done, it's probably time for a whole other engine to mod.<br /><br />Personally what I'm trying to do is create a very populated forest map with some creepy lighting, assets that work well in both day and night(-ish) atmospheres, shadows and flashlights, relying on distance-portalling of Quake IV and texture optimisations, so to have open-areas with thick FarCry-like foliage that can blend behind culling fog, but keep the light interactions of the engine.  Nothing better than having a rocket flying through the forest and seeing all the trees and bushes and plants lighting up around it, it's so cool!  It's like some ghostly presence in the map, my trees catch all the light and you can always see where a gunfight is happening in nearby areas.</div>]]></body></post><post id="p194814" date="Posted: Mon Feb 11, 2008 7:40 am "><author>rich_is_bored</author><body><![CDATA[<div class="postbody"><div class="quotetitle">LDAsh wrote:</div><div class="quotecontent">I'm not sure I understand this overlapping geometry idea, why would you want the entire back-side lit which costs more triangles for duller lighting conditions?</div><br /><br />I was thinking it would produce translucent vegetation where the illumination on the backface would be averaged with that on the front face.<br /><br />But after reading your critique, I think you're right. The result would be dull lighting conditions because both faces would still only account for lights on one side dispite their normal maps.</div>]]></body></post><post id="p195453" date="Posted: Sat Feb 23, 2008 12:39 am "><author>mikebart</author><body><![CDATA[<div class="postbody">great technique Ldash, thanks for sharing, i think you've probably cleared up a heap of visual issues i've been having with my trees, do you think you could you show the shadow caster working in game? sounds like a great idea too.</div>]]></body></post><post id="p201520" date="Posted: Wed Jul 09, 2008 11:34 am "><author>LDAsh</author><body><![CDATA[<div class="postbody">Here's a long awaited video of this inverse-normalmap technique of mine:-<br /><a href="https://web.archive.org/web/20081121080938/http://www.violationentertainment.com/temp/SHshrubsingame080706b.avi" class="postlink">http://www.violationentertainment.com/temp/SHshrubsingame080706b.avi</a><br />I will redo this because it's A&gt; supposed to show a comparison between this technique and the old conventional approaches and B&gt; all the shadows working, in this video the overlapping shadows were removed, so it needs to be rendered out again.<br />Keep in mind the most important thing here is the dynamic lights and attempting a volumetic appearance to disguise the seams of the low-poly mesh.</div>]]></body></post><post id="p201535" date="Posted: Wed Jul 09, 2008 2:53 pm "><author>pbmax</author><body><![CDATA[<div class="postbody">that looks great!</div>]]></body></post><post id="p201820" date="Posted: Sun Jul 13, 2008 1:42 pm "><author>bashport</author><body><![CDATA[<div class="postbody">nice done LDAsh, looks great.<br /><br />I have a question regarding texture shaders and it seems for me that this thread holds the right persons to ask &gt;<br /><br />is there a way to multiply or overlay the specular with the diffuse map?</div>]]></body></post><post id="p201902" date="Posted: Mon Jul 14, 2008 12:38 pm "><author>LDAsh</author><body><![CDATA[<div class="postbody">Specular doesn't seem to respond to "RGB" values in Quake 4 at least, but you can increase specularity (provided you've tried editing the actual image first!) by layering blends in the material:-<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">textures/sh/brickwall3<br />   {<br />   qer_editorimage   textures/sh/brickwall3_color.tga<br />   bumpmap       textures/sh/brickwall3_local.tga<br />   diffusemap       textures/sh/brickwall3_color.tga<br />   {<br />      blend specularmap<br />      map textures/sh/brickwall3_spec.tga<br />      rgb 2.0 //this doesn't work btw, just demonstrating<br />   }<br />}<br /></div><br />=<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">textures/sh/brickwall3<br />   {<br />   qer_editorimage   textures/sh/brickwall3_color.tga<br />   bumpmap       textures/sh/brickwall3_local.tga<br />   diffusemap       textures/sh/brickwall3_color.tga<br />   {<br />      blend specularmap<br />      map textures/sh/brickwall3_spec.tga<br />   }<br />   {<br />      blend specularmap<br />      map textures/sh/brickwall3_spec.tga<br />   }<br />}<br /></div><br />Not sure why you'd want to do this though, because you'll end up with something bleeding specular in low light conditions.  I might use this for something like white plastic only.  Can't think of anything else.  Otherwise there's nothing you can't do in a single specular map.<br />Unless I misunderstood the question, sorry.</div>]]></body></post><post id="p202006" date="Posted: Tue Jul 15, 2008 10:38 am "><author>bashport</author><body><![CDATA[<div class="postbody">Thanks ash.<br />I'm quite new in d3 editing stuff and just looking for every way of using the engines possibilitys.</div>]]></body></post><post id="p194588" date="Posted: Wed Feb 06, 2008 4:17 am "><author>LDAsh</author><body><![CDATA[<div class="postbody">I've been getting back to doing some work on tree models but as we all know it's difficult because trees are volumes and you need to have a lot of surfaces intersecting to do a good low-poly tree, and the more low-poly, the more trees you can have in one spot, which is also what we want.  The problem is that rendering a flat surface in the likes of Doom3 is going to be precisely lit and never match the light of intersecting surfaces on different angles.  So we tend to see trees in Doom3 baring very harsh seams along intersections, or without a lot of volume to minimise intersections, or dull flat lighting using strong ambient light, or using single-pass blends and avoiding alphatest altogether.  I've tried them all, none are ideal.<br />I was looking at some real trees and realised they're like volumes of individually faceted leaves on all angles, always appearing bright and dark mixed together, and I thought this can't really be done with a normalmap, the problem is using normals that only project from the limits of its parent surface, so in a "traditional" normalmap bake no matter how many different angles you put your leaves on, it's still basically lit relative to its flat parent surface and any surface intersecting will appear to be lit very different and therefore creating harsh ugly noticeable seams.<br />Then I remembered some normalmaps I borked a while back that somehow captured light incorrectly, I got some yellow in the normalmap which caught light from the opposite direction, and looking at the tree I realised this could really work well within a single normalmap of a leaves material for a tree model, by truly having each individual leaf on an entirely different angle to the point where it would capture light from a light source behind the geometry itself, which sounds impossible but it really can happen.  Ideally you never want to see yellow in your normalmaps but for normalmapped alphatest materials trying to create volumes, this could be the answer.  It would mean no matter where strong light is coming from, there would be a balance of light and colour, at least some of the leaves on the surface will be catching it and give the illusion that the surface isn't just a flat twosided material but truly more like a volume, and it would equalise the lighting on all surfaces, leaf by individual leaf as like the true nature of a tree, instead of flattening the light on the entire surface affecting every leaf.  Cynically you might say it's making such a horrible mess of the normalmap it doesn't know what the hell it's doing, but you can have low-poly trees capable of great light interactions this way without noticeable seams or any other gimmicks to hide them. <br /><br /><img src="https://web.archive.org/web/20081121082152im_/http://www.violationentertainment.com/temp/SHleafusbush080206a.jpg" alt="Image" /><br /><br />Here we have a quick test to demonstrate inverted normalmaps.  I got this normalmap by actually properly baking it using a negative projection depth, it is a proper bake, so it is a true negative and not just inverted colours of the normalmap image, even though that produces _exactly_ the same result and that's how I will be mostly doing it later.  The blue circle catches light from the proper direction, but the green circle is inverted and catching light from the opposite direction of the actual light source, as if the light is in a mirrored position relative to the surface but only for those specific texels.  There is only one light in that scene and you can clearly see it's on the other side of the geometry.  Apart from that, it's still dynamically lit as the light source is moved around like a regular normalmap would behave, and still relative to the light source in other ways.  It's still a valid normalmap and using valid normalmap colours, just producing a result flipped around to the opposite side.  Never really purposely used, but still valid as in it doesn't cause any performance issues or cause Doom3 to crash or anything like that.  To benefit it would also seem the green circle isn't actually catching an equal amount of light there even though it's on the exact same quad as the blue, see how the blue bleeds at specular but the green doesn't, even though it's using one material and one set of textures.  Why on Earth would you want to do that though?  Well now to actually applying this to some leaves material for a tree model.<br /><br /><img src="https://web.archive.org/web/20081121082152im_/http://www.violationentertainment.com/temp/SHleafusbush080206b.jpg" alt="Image" /><br /><br /><img src="https://web.archive.org/web/20081121082152im_/http://www.violationentertainment.com/temp/SHleafusbush080206c.jpg" alt="Image" /><br /><br />By having the normals of individual leaves in all directions and not only within the limits of it parent surface you can start to create some true volumes that at least minimise harsh seams along intersecting geometry and under different lighting conditions.  To create these reverse normals from the opposite side you need give the normalmap negative/inverted colours, then rotated 180° or flipped/mirrored, and you get your inverted normalmap that will catch light/cast shadows from the opposite direction. This is a million times easier than actually baking negative projections separately which I don't know if that's even possible using Doom3 renderbump.  In theory it sounds like it's doing the job of the "twosided" keyword in a material but that doesn't solve lighting issues, it makes a material appear from both sides of the surface but still lights it from one.<br />The way I've done it in my leaves material is to split the hi-res leaves model into 2 parts, with the second less-populated part later to become inverted, which also will appear to rest behind (underneath) the main "traditional" layer.  You want to have minimal number of inverted leaves but enough to separate the proper normalmap from itself and make the leaves appear to spread out and still have a balance of all variety of angles, even though the texture is quite occupied there's still plenty of transparency.  Balance here is the key, keeping in mind how all of these leafy angles attribute to the normalmap work as a whole.  I then create separate normalmaps from each layer, but I rotate the second (underneath) layer 180° before baking the normalmap, then I invert the colours and rotate back 180°.  This ensures the angles are correct when inverting the colours because inverting a normalmap also assumes it's flipped and mirrored, which we don't want.  Then I combine the two normalmaps, I used an alpha in the "traditional" layer and just filled the inverted normalmap back into it, to create one single, very colourful normalmap.  You want to keep the traditional normalmap component layered over the inverted normalmap component, as well as combine it with some leaves on different angles for both the traditional front and the inverted back, so you're not just dealing with leaves that are either front or back, but mixed together using all angles.  Because you're trying to create as much of a volume as you can, you can afford to have leaves on sideways angles in your material.<br /><br /><img src="https://web.archive.org/web/20081121082152im_/http://www.violationentertainment.com/temp/SHleafusbush080206d.jpg" alt="Image" /><br /><br /><img src="https://web.archive.org/web/20081121082152im_/http://www.violationentertainment.com/temp/SHleafusbush080206e.jpg" alt="Image" /><br /><br />Here you see a quick and dirty final comparison between the inverted-combination normalmap and a "traditional" "flat" normalmap.  It doesn't solve intersections entirely of course, but you can see, especially from a distance, how the main seams and the general lighting conditions of each intersecting surface is drastically minimised using inverted normalmaps in harmony with proper normalmaps.  It especially pays off if you want to have strong dynamic lights.  Using the traditional method it makes the actual model structure so apparent, but using this new technique it allows the materials to behave more like a volume and disguise the model structure while still allowing for plenty of light interaction, contrast and detail, not to mention actually having bumpmapped trees with specularity.<br />So, leaf by leaf you can tell which direction the main light is coming from, but as a whole flat surface it becomes difficult to tell because there's so many different angles on there, in front and behind, but then ultimately as an entire tree object, from a distance, I find you get the best of both aspects, it seems the entire material works as a whole to at least give the impression of a volume.  As an entire tree, it enables the material to catch light mostly from the proper direction by the normalmap, but also all light from all directions as to avoid letting the geometry dictate what light and how much.<br />One major downside to this is that I don't like your chances of using photosource images to quickly work with, you're really going to need to get your hands dirty with some high-definition modelling to do this.  It requires a careful balance of angles in the normalmap that you can't possibly do by converting images directly into normalmaps.<br /><br />To finish, I want to mention some extra little techniques for spicing up alphatest, especially trees.  They come at a price but they are pretty nice.  One is that alphatest isn't texture-filtered nor can it be antialiased, so you notice as you move further away from it, it becomes these harsh and sharp floating lumps of nonsense pixels because it can't filter into anything easy on the eyes, only ons and offs.  You can use a "fuzz" material which is basically white with a dark coloured silhouette outline (gl_zero , gl_one_minus_src_color) around every sharp alphatest edge in your material, as just a little light/fog-friendly helper to give your tree back that soft fuzzy feeling, especially when viewing at extra-close or extra-far distances.  I can't see this as a problem because it's a single pass texture that doesn't use normalmapping and can't be mapped onto by lightshaders and such, so I wouldn't assume this as being a massive performance killer as an extra.  Visually it's up to you how you think it looks and helps.<br />Next you probably all already know about vertex-painting/vertex-blending, well basically you blend your material with a different material via vertex-painting, or to be more efficient you can half-blend your material with basic single-pass fullblack, and give the foliage a little more overall depth using the vertices instead of trying to manage it all in one big normalmap.  Again, I don't assume this as major performance draining extra, so why wouldn't you use vertex blending like that.  Again with the material itself, you could go ahead and give it some subtle very low-res cubemap reflections, with all the chaos in the normalmap the cubemap reflections will spread out evenly and may give your tree a subtle dewy or wet appearance.  This can be a performance drain but personally if it's done right a subtle reflection can have beautiful results, moreso in Quake IV where cubemap reflections don't glow-in-the-dark.  Cubemapping does warp/flow with the normalmapping within the alphatest of course which is why it's considered for use.  Also material-wise you can give it a subtle swaying movement using the "deform turbulent" keyword, although this doesn't work well with alphatest and you'll only get the alpha swaying/wobbling, you may still like to have that feature, although if you can this would be far better done as an animating scenery object.  Lastly concerning materials, you may like to blend in some "detail mapping" to give the foliage more grittiness and perception of a higher-detail texture.  Again, that's a personal choice but personally I'll probably find myself doing it as usual.  It's debatable whether or not it's something that has a place with normalmaps in Doom3, but it's easy to turn off, and I like it, so I use it.<br />Next is casting proper shadow for your whole tree, and not just the trunk and branches, because as you know alphas can't cast shadows, only whole geometry.  This involves a few techniques.  First take a screenshot of your tree (and only your tree against a black background) from the exact position and angle of the light that is going to cast the shadow, but viewing it aligned with the middle vertical range of the tree and exactly horizontal, preferably orthographic.  Get it fullbright from all angles so it's all white, and take a high-res screenshot.  You can then create an alpha of how the whole tree looks from that angle, preferably only 2-colour (1-bit) fullblack and fullwhite image with no antialiasing.  Next you want to use that image as a displacement, and displace a heavily subdivided plane so the tree shape sticks out, then you can easily delete the lower (background) parts of the plane so you now should have just a flat model of the silhouette of your tree shape, to some triangulated degree.  Find your nearest optimisation tools and get to work at it until you've used enough judgement to get what will make a good shadow caster but without going insane with the polycount, taking into consideration what parts will be casting shadow onto what in-game, and with the help of the common/shadow material, align your shadow-caster to face the light source and this will be an invisible nonsolid but shadowing-caster for your tree, complete with the foliage shadow, while the actual tree model materials will cast no shadows at all.  There are probably better/easier ways to get this done, but that's how I do it.<br />I was also thinking, with this technique it may just be possible to use some alphatest autosprites well enough now.  That means intersections will be increased, but your tree/weed/bush will have better coverage/filling from ALL angles, so it will always look "full" from all angles with proper use of autosprites.  Sometimes a cleverly-placed autosprite can fill in some gaps that would take more than a quad otherwise, plus I think if used appropriately it can make an interesting effect when you combine autosprites with static geometry, but it's up to the individual taste.  You may find for creating a bush/hedge that clumps of autosprites may work better than a static mesh, but that's up to you.  Definitely something I will experiment more with now.<br /><br />Okay, I'm ready to shut up.  I'll post back here when I actually put my money where my mouth is and create some proper big trees properly using these techniques and hopefully get a whole bunch of them together and looking and performing decently.</div>]]></body></post><post id="p194589" date="Posted: Wed Feb 06, 2008 5:09 am "><author>The Happy Friar</author><body><![CDATA[<div class="postbody"><img src="https://web.archive.org/web/20081121082152im_/http://www.doom3world.org/phpbb2/images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" /><br /><br />nice.  very very nice.   <img src="https://web.archive.org/web/20081121082152im_/http://www.doom3world.org/phpbb2/images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div>]]></body></post><post id="p194590" date="Posted: Wed Feb 06, 2008 5:13 am "><author>bladeghost</author><body><![CDATA[<div class="postbody">I'm wondering if leaves can just be made as particles as like in moving leaves in the wind?<br />using a particle system.</div>]]></body></post><post id="p194601" date="Posted: Wed Feb 06, 2008 11:39 am "><author>6th Venom</author><body><![CDATA[<div class="postbody">Great post, thanks LDAsh!</div>]]></body></post><post id="p194625" date="Posted: Thu Feb 07, 2008 6:34 am "><author>rich_is_bored</author><body><![CDATA[<div class="postbody">Here's an interesting idea.<br /><br />Overlap two surfaces. One with a traditional normal map and the other with an inverted normal map. Make both surfaces 50% transparent using the "translucent" keyword. <br /><br />This should produce what appears to be a fully opaque surface that's illuminated from either side.</div>]]></body></post><post id="p194798" date="Posted: Mon Feb 11, 2008 1:24 am "><author>Tron</author><body><![CDATA[<div class="postbody"><div class="quotetitle">rich_is_bored wrote:</div><div class="quotecontent">Here's an interesting idea.<br /><br />Overlap two surfaces. One with a traditional normal map and the other with an inverted normal map. Make both surfaces 50% transparent using the "translucent" keyword. <br /><br />This should produce what appears to be a fully opaque surface that's illuminated from either side.</div><br /><br />I did a few experiments trying to get something like that to work properly when working on the D3 megatexture test map, couldn't get it to work properly though.<br /><br />I was trying to do it all through the material system though, I didn't think of actually overlaying two polys with different materials on them.  Would be really interesting to see if someone can do it right.</div>]]></body></post><post id="p194809" date="Posted: Mon Feb 11, 2008 4:41 am "><author>LDAsh</author><body><![CDATA[<div class="postbody"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm wondering if leaves can just be made as particles as like in moving leaves in the wind?<br />using a particle system.</div>That's a great idea, but for maybe 1 tree in a courtyard in an enclosed area of a map.  The point of this technique is for creating low-poly trees that a map can accommodate many of.  Those bushes in my shots are 64 triangles each.  So that's 32 leaves, which would make for one pretty miserable-looking tree, to be honest.  I would recommend using cleverly animated MD5s for trees-in-the-wind, you can probably set something up for minimal bones using vertex weights to have some variation on wind effects, possibly, otherwise easily a performance killer I'm sure.  I haven't tried it yet so I'm just using the deform keyword for some "life".<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Here's an interesting idea.<br />Overlap two surfaces. One with a traditional normal map and the other with an inverted normal map. Make both surfaces 50% transparent using the "translucent" keyword.<br />This should produce what appears to be a fully opaque surface that's illuminated from either side.</div>I'm not sure I understand this overlapping geometry idea, why would you want the entire back-side lit which costs more triangles for duller lighting conditions?  These inverted normal colours is to create a little backlighting into normals producing lighting from all directions but _mostly_ "normal", just enough to eliminate obvious seams.  The inverted normal colours cannot be too prominent on the normalmap otherwise it lights completely opposite, so it's used more like some midway point to break the direction of light, but only minimally.<br />I will post a video to better show this, so you can see the light interaction more clearly and how the bushes follow the lightsource.  There are a lot of ideas for foliage but I haven't come across or seen any that handle stressful lighting conditions with such low polycount as what I've come up with here.  There are good techniques if you want flat lighting and all that, but that's exactly what I'm trying to avoid.  When you get to the point where you've got to flatten everything out just to get a feature done, it's probably time for a whole other engine to mod.<br /><br />Personally what I'm trying to do is create a very populated forest map with some creepy lighting, assets that work well in both day and night(-ish) atmospheres, shadows and flashlights, relying on distance-portalling of Quake IV and texture optimisations, so to have open-areas with thick FarCry-like foliage that can blend behind culling fog, but keep the light interactions of the engine.  Nothing better than having a rocket flying through the forest and seeing all the trees and bushes and plants lighting up around it, it's so cool!  It's like some ghostly presence in the map, my trees catch all the light and you can always see where a gunfight is happening in nearby areas.</div>]]></body></post><post id="p194814" date="Posted: Mon Feb 11, 2008 7:40 am "><author>rich_is_bored</author><body><![CDATA[<div class="postbody"><div class="quotetitle">LDAsh wrote:</div><div class="quotecontent">I'm not sure I understand this overlapping geometry idea, why would you want the entire back-side lit which costs more triangles for duller lighting conditions?</div><br /><br />I was thinking it would produce translucent vegetation where the illumination on the backface would be averaged with that on the front face.<br /><br />But after reading your critique, I think you're right. The result would be dull lighting conditions because both faces would still only account for lights on one side dispite their normal maps.</div>]]></body></post><post id="p195453" date="Posted: Sat Feb 23, 2008 12:39 am "><author>mikebart</author><body><![CDATA[<div class="postbody">great technique Ldash, thanks for sharing, i think you've probably cleared up a heap of visual issues i've been having with my trees, do you think you could you show the shadow caster working in game? sounds like a great idea too.</div>]]></body></post><post id="p201520" date="Posted: Wed Jul 09, 2008 11:34 am "><author>LDAsh</author><body><![CDATA[<div class="postbody">Here's a long awaited video of this inverse-normalmap technique of mine:-<br /><a href="https://web.archive.org/web/20081121082152/http://www.violationentertainment.com/temp/SHshrubsingame080706b.avi" class="postlink">http://www.violationentertainment.com/temp/SHshrubsingame080706b.avi</a><br />I will redo this because it's A&gt; supposed to show a comparison between this technique and the old conventional approaches and B&gt; all the shadows working, in this video the overlapping shadows were removed, so it needs to be rendered out again.<br />Keep in mind the most important thing here is the dynamic lights and attempting a volumetic appearance to disguise the seams of the low-poly mesh.</div>]]></body></post><post id="p201535" date="Posted: Wed Jul 09, 2008 2:53 pm "><author>pbmax</author><body><![CDATA[<div class="postbody">that looks great!</div>]]></body></post><post id="p201820" date="Posted: Sun Jul 13, 2008 1:42 pm "><author>bashport</author><body><![CDATA[<div class="postbody">nice done LDAsh, looks great.<br /><br />I have a question regarding texture shaders and it seems for me that this thread holds the right persons to ask &gt;<br /><br />is there a way to multiply or overlay the specular with the diffuse map?</div>]]></body></post><post id="p201902" date="Posted: Mon Jul 14, 2008 12:38 pm "><author>LDAsh</author><body><![CDATA[<div class="postbody">Specular doesn't seem to respond to "RGB" values in Quake 4 at least, but you can increase specularity (provided you've tried editing the actual image first!) by layering blends in the material:-<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">textures/sh/brickwall3<br />   {<br />   qer_editorimage   textures/sh/brickwall3_color.tga<br />   bumpmap       textures/sh/brickwall3_local.tga<br />   diffusemap       textures/sh/brickwall3_color.tga<br />   {<br />      blend specularmap<br />      map textures/sh/brickwall3_spec.tga<br />      rgb 2.0 //this doesn't work btw, just demonstrating<br />   }<br />}<br /></div><br />=<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">textures/sh/brickwall3<br />   {<br />   qer_editorimage   textures/sh/brickwall3_color.tga<br />   bumpmap       textures/sh/brickwall3_local.tga<br />   diffusemap       textures/sh/brickwall3_color.tga<br />   {<br />      blend specularmap<br />      map textures/sh/brickwall3_spec.tga<br />   }<br />   {<br />      blend specularmap<br />      map textures/sh/brickwall3_spec.tga<br />   }<br />}<br /></div><br />Not sure why you'd want to do this though, because you'll end up with something bleeding specular in low light conditions.  I might use this for something like white plastic only.  Can't think of anything else.  Otherwise there's nothing you can't do in a single specular map.<br />Unless I misunderstood the question, sorry.</div>]]></body></post><post id="p202006" date="Posted: Tue Jul 15, 2008 10:38 am "><author>bashport</author><body><![CDATA[<div class="postbody">Thanks ash.<br />I'm quite new in d3 editing stuff and just looking for every way of using the engines possibilitys.</div>]]></body></post></posts></thread></xml>
