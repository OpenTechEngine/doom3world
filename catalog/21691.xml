<?xml version="1.0" encoding="UTF-8"?>
<xml><thread id="21691"><title>Making Mwoody's Radar work in Multiplayer.</title><posts><post id="p201145" date="Posted: Wed Jul 02, 2008 7:47 am "><author>cuteunit</author><body><![CDATA[<div class="postbody">I've tried. I've tried so hard.  So very hard.<br /><br />And I've had no success.<br /><br />in Multiplayer the game seems to rotate who is the "owner" produced by getOwner(); called from the gun itself.  In addition,  GUI parms called by setGUIParm seem to be affecting all instances of the gui, across every gun, based on who Owner is this very second ( like I said it seems to keep changing..).  Example is that I have a guiparm of "isfiring" that should pop up a gui element to hide the radar during fire... it comes up if player 1 shoots, on both player1 and player2's screens.<br /><br />I really don't know whats going on.  my ai_monster_base is building the key list tabe for the monsters from state::begin and setting the keys on $world, and the gun is checking from there.<br /><br />I have like sixty hours and two sleepless nights trying to figure this out, and I dont think this is something I can solve with hard work anymore.. I need knowledge I dont have and the worthless completeley absent travesty of a lack of documentation that is id dev net and ( to a smaller extent, but I'm glad it's there) modwiki arent illuminating things for me..<br /><br />*weeeeeeeeeeeeeeeeeep*<br /><br />Anyways here is the code I'm using right now in weapon_plasmagun.script.  Dont mind the mess... think of it as fingerpainting, I want it to work first then be aesthetic later. Some bits in the firing code are lifted from the chaingun to further confuse things I guess.<br /><br />heeeeelp....<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">/***********************************************************************<br /><br />weapon_plasmagun.script<br /><br />***********************************************************************/<br /><br />#define PLASMAGUN_FIRERATE         0.225 //changed by Tim<br />#define PLASMAGUN_LOWAMMO         10<br />#define PLASMAGUN_NUMPROJECTILES   2<br /><br />// blend times<br />#define PLASMAGUN_IDLE_TO_LOWER      4<br />#define PLASMAGUN_IDLE_TO_FIRE      1<br />#define   PLASMAGUN_IDLE_TO_RELOAD   4<br />#define PLASMAGUN_RAISE_TO_IDLE      4<br />#define PLASMAGUN_FIRE_TO_IDLE      4<br />#define PLASMAGUN_RELOAD_TO_IDLE   4<br />#define   PLASMAGUN_CHAMBER_SPEED      ( 30 * ( GAME_FPS / 6 ) )<br />#define   PLASMAGUN_CHAMBER_ACCEL_TIME   0.5<br />#define PLASMAGUN_CHAMBER_DECCEL_TIME   2.0<br />#define   PLASMAGUN_CHAMBER_ACCEL      ( PLASMAGUN_CHAMBER_SPEED / PLASMAGUN_CHAMBER_ACCEL_TIME )<br />#define PLASMAGUN_CHAMBER_DECCEL      ( PLASMAGUN_CHAMBER_SPEED / PLASMAGUN_CHAMBER_DECCEL_TIME )<br /><br />object weapon_plasmagun : weapon_base {<br />   float      next_attack;<br />   float      spread;<br />   float      current_rate;<br />   float      start_rate;<br />   float      end_rate;<br />   float      spin_start;<br />   float      spin_end;<br />   float       repCounter;<br />   float       stability;<br />   float       runonce;<br />   void      init();<br />   void      SpinUp();<br />   void      SpinDown();<br />   void      Lower();<br />   void      Raise();<br />   void      Idle();<br />   void      Fire();<br />   void      Reload();<br />   void      ExitCinematic();<br />   entity owner;<br />};<br /><br />void weapon_plasmagun::init() {<br /><br />   next_attack = 0;<br />   current_rate   = 0;<br />   start_rate      = 0;<br />   end_rate      = 0;<br />   spin_start      = 0;<br />   spin_end      = 0;<br />   spread      = 0.5;<br />   owner = getOwner();<br />   sys.println(" I set owner to "+owner.getName());<br />   repCounter = 0;<br />   weaponState( "Raise", 0 );<br />}<br />void weapon_plasmagun::UpdateChamber() {<br />   float currentTime;<br />   float t;<br />   vector ang;<br />   currentTime = sys.getTime();<br />   if ( currentTime &lt; spin_end ) {<br />      t = ( currentTime - spin_start ) / ( spin_end - spin_start );<br />      current_rate = start_rate + t * ( end_rate - start_rate );<br />   } else {<br />      current_rate = end_rate;<br />   }<br />   string ownermotion = owner.getAnimState(ANIMCHANNEL_LEGS);<br />   if(ownermotion == "Legs_Crouched" || ownermotion == "Legs_CrouchWalk" || ownermotion == "Legs_CrouchWalk_Backward")<br />   {<br />      stability = 1;<br />   }<br />   else<br />   {<br />      stability = 0;<br />   }<br />   if (stability == 1)<br />   {<br />   setGuiParm("ownerstability", 1);<br />   }<br />   else<br />   {<br />   setGuiParm("ownerstability", 0);<br />   }<br />   //setGuiParm("chambercharge",current_rate);<br />}<br /><br />void weapon_plasmagun::destroy() {<br /><br />   stopSound( SND_CHANNEL_WEAPON, 1 );<br />   clearPersistantArgs();<br /><br />}<br />void weapon_plasmagun::Raise() {<br /><br />   weaponRising();<br />   setGuiParm("isFiring", 0);<br />   setGuiParm("productplacement",1);<br />   playAnim( ANIMCHANNEL_ALL, "raise" );<br />   waitUntil( animDone( ANIMCHANNEL_ALL, PLASMAGUN_RAISE_TO_IDLE ) );<br />   setGuiParm("productplacement",0);<br />   weaponState( "Idle", PLASMAGUN_RAISE_TO_IDLE );<br />}<br /><br />void weapon_plasmagun::Lower() {<br />   weaponLowering();<br />   setGuiParm("productplacement",1);<br />   playAnim( ANIMCHANNEL_ALL, "putaway" );<br />   waitUntil( animDone( ANIMCHANNEL_ALL, 0 ) );<br />   weaponHolstered();<br />   waitUntil( WEAPON_RAISEWEAPON );<br />   weaponState( "Raise", 0 );<br />}<br />void weapon_plasmagun::SpinUp() {<br />   start_rate = current_rate;<br />   end_rate = PLASMAGUN_CHAMBER_SPEED;<br />   spin_start = sys.getTime();<br />   spin_end = spin_start + ( end_rate - current_rate ) / PLASMAGUN_CHAMBER_ACCEL;<br />   startSound( "snd_windup", SND_CHANNEL_BODY3, 1 );<br />}<br />void weapon_plasmagun::SpinDown() {<br />   start_rate = current_rate;<br />   end_rate = 0;<br />   spin_start = sys.getTime();<br />   spin_end = spin_start + ( current_rate - end_rate ) / PLASMAGUN_CHAMBER_DECCEL;<br />   startSound( "snd_winddown", SND_CHANNEL_BODY3, 1 );<br />}<br /><br /><br /><br />void weapon_plasmagun::Idle() {<br /><br />   float currentTime;<br />   float ammoClip;<br />   float avail;<br />   float clip_size;<br /><br />   string monsterstate;<br />   clip_size = clipSize();   <br />   <br />   if ( !ammoInClip() ) {<br />      weaponOutOfAmmo();<br />   } else {<br />      weaponReady();<br />   }<br /><br />      if (spread &gt;0.5)<br />      {<br />         spread = 0.5;<br />      }<br /><br />   // Added by radar mod   <br />   // The following is only updated every 10 frames, or 6 times a second, to save time.  repCounter tracks this.<br />   float repCounter = 0;<br />   while( 1 ) {<br /><br /><br />      repCounter++;<br />      if(repCounter &gt;= 120) {<br />         repCounter = 0;<br />         sys.println (owner.getName() + " is owner called this pass");         <br />         // numBlips = number of blips currently on the radar.  If we hit the max (10) it immediately stops checking creatures.  It does NOT keep those closest; this would be more computationally intensive than I care to do.<br />         float numBlips = 0;<br />         // Location/rotation of player<br />         vector ppos = owner.getViewAngles();<br />         float pr = ppos_y+180;<br />         ppos = owner.getWorldOrigin();<br />         // The following 360-&gt;180 is from doom_util.script - it moves from a -180 -&gt; 180 degree system to a 0 -&gt; 360 degree system.<br />         while( pr &lt; 0 ) {<br />            pr += 360;<br />         }<br />         while( pr &gt;= 360 ) {<br />            pr -= 360;<br />         }<br />         float loop;<br />         float lpLim = $world.getFloatKey("monsterNum");<br />         // This loop steps through all the creatures that have registered themselves with the player during their Init()<br />         // If we hit 10 blips, it cancels out of the list early.<br /><br />         for(loop = 1; loop &lt;= lpLim &amp;&amp; numBlips &lt; 10; loop++)<br />         {<br />            entity monsterPointer = sys.getEntity($world.getKey("monsterList" + loop));//old hopefully can obsolete this<br />//            entity monsterPointer = sys.getEntity(sys.getPersistantString("monsterList"+loop));<br />            // If creature is dead or no longer existant, do nothing - oh, my kingdom for a linked list!<br />            // Condition also fails if radar is full<br />            entity monsterfoe = monsterPointer.getEnemy();<br />            string monstermoving = monsterfoe.getName(); //monsterPointer.getAnimState(ANIMCHANNEL_TORSO);<br />            // string monstermovingCA= monsterPointer.getName() +"::state_Begin";<br />            if(monsterPointer.getHealth() &gt; 0 &amp;&amp; monstermoving != "")<br />            {<br />   <br />                  // Location of this creature<br />                  vector blipLoc = monsterPointer.getWorldOrigin();<br />                  blipLoc = ppos-blipLoc;<br />                  // dt = distance between player and creature<br />                  float dt = sys.vecLength(blipLoc);<br />                  // Test for distance from player<br />                  if(dt &lt;= 800 )<br />                  {<br /><br />                     blipLoc = sys.VecToAngles(blipLoc);<br />                     // dr = difference of angle, in degrees, between current player facing and creature direction<br />                     float dr = blipLoc_y - pr;<br />                     // Creatures behind the player (or directly to either side) don't show up on the radar<br />                     // Technically, clipping in the GUI will take care of this anyway, but I worry about passing obscenely large values to the gui rect command.  Plus, it saves us unecessary calls to sin/cos.<br />                     // The dx1/dy1, dx2/dy2, etc. generated here are pixel locations for the gun GUI blips.  A value of -1 in either will result in the GUI hiding the blip altogether.<br />                     if(dr &gt; -85 &amp;&amp; dr &lt; 85)<br />                     {<br />                     // Increment blip counter<br />                     numBlips++;<br />                     // Uncomment the following lines to get full, real-time info on creatures on the radar.<br />                     //sys.println("monsterPointer #" + numBlips + ": " + monsterPointer.getName() + "(" + dt + "units away)");<br />                     //sys.println("  rotation: " + dr + "  |  radar x/y: " + (274+(dt/3)*sys.cos(dr+90)) + " / " + (349-(dt/3)*sys.sin(dr+90)));<br />                     // Convert data to usable pixel locations on radar GUI<br />                     //sys.println(monstermoving);<br />                     //sys.println(monstermovingCA + " Is comparison");<br />                     setGuiParm("dx" + numBlips, 274+(dt/3)*sys.cos(dr+90)); //was 274<br />                     setGuiParm("dy" + numBlips, 349-(dt/3)*sys.sin(dr+90)); //was 349<br />                     }<br />                  }<br />               }<br />         <br />      }<br />         // Sets all coords for unusued blips to -1 so that the GUI hides them<br />         while(numBlips &lt; 10) {<br />            numBlips++;<br />            //sys.println("Deadblip: " + numBlips);<br />            setGuiParm("dx" + numBlips, -1);<br />            setGuiParm("dy" + numBlips, -1);<br />         }<br />         //sys.println("----");<br />      }<br />      // End added by radar mod<br />      if ( WEAPON_LOWERWEAPON ) {<br />         weaponState( "Lower", PLASMAGUN_IDLE_TO_LOWER );<br />      }<br />      currentTime = sys.getTime();<br />      ammoClip = ammoInClip();<br />      if ( ( currentTime &gt;= next_attack ) &amp;&amp; WEAPON_ATTACK ) {<br />         if ( ammoClip &gt; 0 ) {<br />            weaponState( "Fire", PLASMAGUN_IDLE_TO_FIRE );<br />         } else if ( ammoAvailable() &gt; 0 ) {<br />            if ( autoReload() ) {<br />               netReload();<br />               weaponState( "Reload", PLASMAGUN_IDLE_TO_RELOAD );<br />            }<br />         }<br />      }<br />      if ( WEAPON_RELOAD &amp;&amp; ( ammoAvailable() &gt; ammoClip ) &amp;&amp; ( ammoClip &lt; clip_size ) ) {<br />         netReload();<br />         weaponState( "Reload", PLASMAGUN_IDLE_TO_RELOAD );<br />      }<br />      if ( WEAPON_NETRELOAD ) {<br />         WEAPON_NETRELOAD = false;<br />         weaponState( "Reload", PLASMAGUN_IDLE_TO_RELOAD );         <br />      }<br /><br />      UpdateChamber();<br />      waitFrame();<br />   }<br />}<br /><br /><br /><br />void weapon_plasmagun::Fire() {<br />   float ammoClip;<br />   float currentTime;<br />   float skip;<br />   float accuratecount;<br />   SpinUp();<br /><br />   setGuiParm("isFiring", 1);// bring up GUI element to hide tracker.. just aesthetics<br />   ammoClip = ammoInClip();<br />   currentTime = sys.getTime(); // - overheat_count;<br /><br />   while( ( current_rate &lt; end_rate ) &amp;&amp; !WEAPON_RELOAD &amp;&amp; ( WEAPON_NETFIRING || ( WEAPON_ATTACK &amp;&amp; ( ammoClip &gt; 0 ) ) ) ) {<br />      UpdateChamber();<br />      waitFrame();<br />      ammoClip = ammoInClip();<br />   }<br />   startSound( "snd_fire", SND_CHANNEL_WEAPON, 1 );<br />   ammoClip = ammoInClip();<br />   while ( !WEAPON_RELOAD &amp;&amp; ( WEAPON_NETFIRING || ( WEAPON_ATTACK &amp;&amp; ( ammoClip &gt; 0 ) ) ) ) {<br />      if (spread &lt;20.0)<br />      {<br /><br />         //sys.println(ownermotion);<br />         if( stability == 1)<br />         {<br />            spread = spread;<br />         }<br />         else<br />            {<br /><br />            spread = spread *1.5;<br />            }<br />      }<br />      launchProjectiles( 1, spread, 0, 1.0, 1.0 );<br />//      startSound( "snd_fire", SND_CHANNEL_WEAPON, false );<br />      ammoClip = ammoInClip();<br /><br />      if ( ammoClip == PLASMAGUN_LOWAMMO ) {<br />      startSound( "snd_lowammo", SND_CHANNEL_ITEM, true );<br />      }<br />      for( skip = 0; skip &lt; 6; skip++ ) {<br />         UpdateChamber();<br />         waitFrame();<br />      }<br />      <br />   }<br />   <br />   stopSound( SND_CHANNEL_WEAPON, 1 );<br />   SpinDown();<br />   setGuiParm("isFiring", 0);<br />   weaponState( "Idle", PLASMAGUN_FIRE_TO_IDLE );<br />}<br /><br />void weapon_plasmagun::Reload() {<br />   weaponReloading();<br />   playAnim( ANIMCHANNEL_ALL, "reload" );<br />   waitUntil( animDone( ANIMCHANNEL_ALL, PLASMAGUN_RELOAD_TO_IDLE ) );<br />   addToClip( clipSize() );<br />   weaponState( "Idle", PLASMAGUN_RELOAD_TO_IDLE );<br />}<br /><br />void weapon_plasmagun::ExitCinematic() {<br />   current_rate   = 0;<br />   start_rate      = 0;<br />   end_rate      = 0;<br />   spin_start      = 0;<br />   spin_end      = 0;<br />   weaponState( "Idle", 0 );<br />}<br /></div></div>]]></body></post><post id="p201146" date="Posted: Wed Jul 02, 2008 8:00 am "><author>cuteunit</author><body><![CDATA[<div class="postbody"><img src="https://web.archive.org/web/20081122031125im_/http://www.dropfiles.net//files/635/shot00005.jpg" alt="Image" /><br /><br />the gui I made.. it works well and looks nice I think.. and I should add that if there is only ONE PLAYER on the server, the code listed above works without flaw and delivers all expected functionality.   It only goes to pooch when there's more than one player <img src="https://web.archive.org/web/20081122031125im_/http://www.doom3world.org/phpbb2/images/smilies/icon_sad.gif" alt=":(" title="Sad" /><br /><br />I dont understand  and am horribly depressed <img src="https://web.archive.org/web/20081122031125im_/http://www.doom3world.org/phpbb2/images/smilies/icon_sad.gif" alt=":(" title="Sad" /><br /><br />(trying to use this with opencoop btw)</div>]]></body></post><post id="p201155" date="Posted: Wed Jul 02, 2008 11:18 am "><author>lowdragon</author><body><![CDATA[<div class="postbody">Hmmm, i just started scripting so iam not of a big help here but i had something similar with my q3mod which its origin was the networking. I guess i fixed it with something like "owner-&gt;self" or by giving each player a number.<br /><br />hth, low</div>]]></body></post><post id="p201160" date="Posted: Wed Jul 02, 2008 12:07 pm "><author>cuteunit</author><body><![CDATA[<div class="postbody">Any more detail than that?</div>]]></body></post><post id="p201169" date="Posted: Wed Jul 02, 2008 1:54 pm "><author>lowdragon</author><body><![CDATA[<div class="postbody">My guess is you apparently sharing info you shouldnt and dont want to share, however thats how the game handels  player info. So you need to verify playerinfo before sending them or dont send em at all - i dont know why it isnt part of the code in the first place, since you need the real player info (position) for the "blip" anyway.</div>]]></body></post><post id="p201178" date="Posted: Wed Jul 02, 2008 3:39 pm "><author>wal</author><body><![CDATA[<div class="postbody">That looks nice. I think this is just because you need to distinguish between the different players. They're all using owner so it will keep changing. You need owner1, owner2 etc and a way of distinguishing them. This is off the top of my head but something like this might work.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">if ( owner.getKey( "name" ) == player2 ) {<br />   entity owner2 = getOwner();<br />}</div></div>]]></body></post><post id="p201197" date="Posted: Wed Jul 02, 2008 9:21 pm "><author>Ivan_the_B</author><body><![CDATA[<div class="postbody"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">in Multiplayer the game seems to rotate who is the "owner" produced by getOwner(); called from the gun itself.</div><br />Are you sure? It seems very odd... <br />May be what you see printed in the console is from different players holding a plasmagun.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">GUI parms called by setGUIParm seem to be affecting all instances of the gui,</div><br />Yes, it works in that way for every gui, including the hud.<br />Don't know in multiplayer... it should be like default weapons guis. They are the same gui for every player but shows different values.  <img src="https://web.archive.org/web/20081122031125im_/http://www.doom3world.org/phpbb2/images/smilies/icon_confused.gif" alt=":?" title="Confused" /></div>]]></body></post><post id="p201207" date="Posted: Thu Jul 03, 2008 2:55 am "><author>cuteunit</author><body><![CDATA[<div class="postbody">How can I provide provisions in the code to make this work in multi then?  Particularly if the guis are being shared..<br /><br />ugh, stupid system.  So cool but so stupid.</div>]]></body></post><post id="p201252" date="Posted: Thu Jul 03, 2008 6:05 pm "><author>cuteunit</author><body><![CDATA[<div class="postbody">
  <img src="https://web.archive.org/web/20081122031125im_/http://www.doom3world.org/phpbb2/images/smilies/icon_sad.gif" alt=":(" title="Sad" />
</div>]]></body></post><post id="p201260" date="Posted: Thu Jul 03, 2008 7:20 pm "><author>Ivan_the_B</author><body><![CDATA[<div class="postbody">sorry, but I 've never even touched D3 multiplayer.  <img src="https://web.archive.org/web/20081122031125im_/http://www.doom3world.org/phpbb2/images/smilies/icon_confused.gif" alt=":?" title="Confused" /><br />You should<br />1) understand how to use not shared guis on weapons. <br />It's odd that it works this way... for example BFG script sets a GuiParm on the weapon. But in multiplayer it only affects your own weapon, doesn't it?<br /><br />2) understand how get a list of all the players...<br />It's seems absurd that getOwner gives you every time a different result. You are probably observing in the cosole the results of all the instances of the scriptobject (1 for every player holding that weapon).<br /><br /><img src="https://web.archive.org/web/20081122031125im_/http://www.doom3world.org/phpbb2/images/smilies/icon_confused.gif" alt=":?" title="Confused" /></div>]]></body></post><post id="p201291" date="Posted: Fri Jul 04, 2008 6:54 am "><author>cuteunit</author><body><![CDATA[<div class="postbody">the BFG weaponscript doesn't seem to do anything differrently to what I do in my weapon.  It calls setGuiParm just like I do.<br /><br />However I do not understand why it works there and not in my script. For example, my script checks the animstate of the owner's legs (checked from getOwner()) to see if he's crouching, to modify the spread of the weapon and to set a variable to true.  If it's true, I set a gui parm named "stabilized" to 1, if it is not true, I set it back to 0.. and I check this prettymuch anytime the gun is doing anything.<br /><br />in multiplayer, whenever the hosting player crouches ( if both the host and player 2 have a modded plasmagun) then the stabilized parm is getting set on BOTH of their weapons, unhiding the GUI element it's tied to.  I don't understand it.<br /><br />On top of this, the blips don't work for player 2 AT ALL.  only player 1</div>]]></body></post><post id="p201293" date="Posted: Fri Jul 04, 2008 7:17 am "><author>simulation</author><body><![CDATA[<div class="postbody">Instead of using getOwner() in "::init()" and caching the value, try using <div class="codetitle"><b>Code:</b></div><div class="codecontent">entity owner = getOwner();</div> in each method where you need it. In MP the weapon/owner relationship is synced in the netcode and you may be caching the wrong thing.</div>]]></body></post><post id="p201325" date="Posted: Sat Jul 05, 2008 9:01 am "><author>cuteunit</author><body><![CDATA[<div class="postbody">Tried that first, actually.  Was doing that exact thing, in Idle and in Fire<br /><br />Same effect.</div>]]></body></post><post id="p201366" date="Posted: Sun Jul 06, 2008 12:47 pm "><author>cuteunit</author><body><![CDATA[<div class="postbody">Has anyone tried it themselves yet?  I'd be so sad if I never found out what was wrong.</div>]]></body></post><post id="p202485" date="Posted: Wed Jul 23, 2008 2:36 am "><author>cuteunit</author><body><![CDATA[<div class="postbody">No ideas on this one?</div>]]></body></post><post id="p202493" date="Posted: Wed Jul 23, 2008 7:39 am "><author>lowdragon</author><body><![CDATA[<div class="postbody">Didnt had the time to take a look into this - i thought about adding a own "playerList" similar to the "monsterList" so the script can differ. However this alone may not help with "process jumping" from player to player. <img src="https://web.archive.org/web/20081122031125im_/http://www.doom3world.org/phpbb2/images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div>]]></body></post><post id="p202628" date="Posted: Sat Jul 26, 2008 8:15 am "><author>cuteunit</author><body><![CDATA[<div class="postbody">it bothers me greatly that it's so much easier to do things like this in an Unreal engine than it is in the Doom engine.</div>]]></body></post><post id="p202632" date="Posted: Sat Jul 26, 2008 11:48 am "><author>wal</author><body><![CDATA[<div class="postbody">If you're still having trouble with <span style="font-weight: bold">getOwner();</span>, use this:<div class="codetitle"><b>Code:</b></div><div class="codecontent">   entity weapon = getWeaponEntity();<br />   if ( weapon.getName() == "player1_weapon" ) {etc...</div></div>]]></body></post><post id="p202810" date="Posted: Tue Jul 29, 2008 2:06 pm "><author>cuteunit</author><body><![CDATA[<div class="postbody">I've run out of patience to keep trying at it... &gt;_&lt; though I'd still be quite happy if another got it to work</div>]]></body></post></posts></thread></xml>
