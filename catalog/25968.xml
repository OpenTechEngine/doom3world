<?xml version="1.0" encoding="UTF-8"?>
<xml><thread id="25968"><title>New opportunity, fixing the Doom 3 EXP renderer</title><posts><post id="p243538" date="Posted: Sat Oct 27, 2012 12:54 am "><author>jmarshall23</author><body><![CDATA[<div class="postbody">I'm about ready to pass out, I pulled a all nighter last night but I had a idea to actually look inside of the Doom 3 BFG renderprogs folder, and I saw it comes with some of the missing arb shaders. It contains Carmacks original megatexture.vfp as well as the shadow mapping shaders, the only thing its missing is the bloom stuff which in theory shouldn't be that hard to re-create. <br /><br />My thinking is, would it be worth while in the end to fix this up? I played with it a bit after fixing a couple crashes I got it to almost load in game when it got to R_MakeCurrent calling wglReleaseTexImageARB, which returns ERROR_INVALID_OPERATION. I haven't used wgl puffers in a long time, so I won't try and tackle that disaster till probably tomarrow, but my thinking is fixing it up might be beneficial depending on how wells things work in the current code.<br /><br />Just curious what everyone's thoughts are.</div>]]></body></post><post id="p243573" date="Posted: Sat Oct 27, 2012 9:53 am "><author>Tr3B</author><body><![CDATA[<div class="postbody">What about your idtech4cdk renderer? Wasn't the shadow mapping implementation already better?<br /><br />Working with WGL pixelbuffers for shadow mapping is really a method from 2004 .. I think at least your initial approach with FBOs was better.<br />I tried to fix the exp renderer in march and my first impression was that it was damn slow.<br />There were too many context switches for shadow mapping and interaction rendering. I got like 20 fps.<br />After that I supplemented the exp backend with my XreaL GLSL interface and my approach to render shadowmaps and especially point light shadow cubes. I use FBOs and that way I get stable 70 - 90 fps on a Geforce GTX 275. I can recommend shadow mapping with Doom 3 because it scales very well with newer gfx cards. I get 120 fps on my new GTX 660 Ti and the Doom 3 scenes are usually a nightmare for shadow mapping. I think almost no game has so many point lights that cast shadows. We also made a few tests with other commercial engines and they weren't faster.<br /><br />One way you can really improve speed is by implementing light pre pass deferred shading. Standard deferred shading is too fillrate limited because the gbuffer is too fat. It is a trade-off to render the scene twice for the light buffer applied to geometry but it really allows to have 300 moving lights at 200 fps on a 3 years old card. The original Doom 3 renderer was like 15 fps. The only downside is that deferred shading approaches are only a win for non-shadow casting lights. Wolfgang Engel also supplied some ideas for massive shadow map rendering but I never invested enough time to understand it.</div>]]></body></post><post id="p243593" date="Posted: Sat Oct 27, 2012 4:36 pm "><author>jmarshall23</author><body><![CDATA[<div class="postbody"><div class="quotetitle">Tr3B wrote:</div><div class="quotecontent">What about your idtech4cdk renderer? Wasn't the shadow mapping implementation already better?<br /><br />Working with WGL pixelbuffers for shadow mapping is really a method from 2004 .. I think at least your initial approach with FBOs was better.<br />I tried to fix the exp renderer in march and my first impression was that it was damn slow.<br />There were too many context switches for shadow mapping and interaction rendering. I got like 20 fps.<br />After that I supplemented the exp backend with my XreaL GLSL interface and my approach to render shadowmaps and especially point light shadow cubes. I use FBOs and that way I get stable 70 - 90 fps on a Geforce GTX 275. I can recommend shadow mapping with Doom 3 because it scales very well with newer gfx cards. I get 120 fps on my new GTX 660 Ti and the Doom 3 scenes are usually a nightmare for shadow mapping. I think almost no game has so many point lights that cast shadows. We also made a few tests with other commercial engines and they weren't faster.<br /><br />One way you can really improve speed is by implementing light pre pass deferred shading. Standard deferred shading is too fillrate limited because the gbuffer is too fat. It is a trade-off to render the scene twice for the light buffer applied to geometry but it really allows to have 300 moving lights at 200 fps on a 3 years old card. The original Doom 3 renderer was like 15 fps. The only downside is that deferred shading approaches are only a win for non-shadow casting lights. Wolfgang Engel also supplied some ideas for massive shadow map rendering but I never invested enough time to understand it.</div><br /><br />This is entirely seperate from anything related to idtech 4 cdk, and this would have been something I would have typed up in a tutorial. I'm thinking about a shadow mapping tutorial after the megatexture tuts, but as it is the first megtexture tutorial I put up was around 40 pages long and shadow mapping would be almost twice that size.<br /><br />Just was looking to see if it was worthwhile or not I got that impression as well that was extremely slow, but if it was like a 10 page tutorial to fix it someone might have benefited from it, but I agree it's probably not worthwhile with the bfg going open source cause it looks more like they just fixed up the exp renderer.</div>]]></body></post><post id="p244863" date="Posted: Mon Dec 17, 2012 7:02 pm "><author>nbohr1more</author><body><![CDATA[<div class="postbody"><div class="quotetitle">Tr3B wrote:</div><div class="quotecontent">What about your idtech4cdk renderer? Wasn't the shadow mapping implementation already better?<br /><br />Working with WGL pixelbuffers for shadow mapping is really a method from 2004 .. I think at least your initial approach with FBOs was better.<br />I tried to fix the exp renderer in march and my first impression was that it was damn slow.<br />There were too many context switches for shadow mapping and interaction rendering. I got like 20 fps.<br />After that I supplemented the exp backend with my XreaL GLSL interface and my approach to render shadowmaps and especially point light shadow cubes. I use FBOs and that way I get stable 70 - 90 fps on a Geforce GTX 275. I can recommend shadow mapping with Doom 3 because it scales very well with newer gfx cards. I get 120 fps on my new GTX 660 Ti and the Doom 3 scenes are usually a nightmare for shadow mapping. I think almost no game has so many point lights that cast shadows. We also made a few tests with other commercial engines and they weren't faster.<br /><br />One way you can really improve speed is by implementing light pre pass deferred shading. Standard deferred shading is too fillrate limited because the gbuffer is too fat. It is a trade-off to render the scene twice for the light buffer applied to geometry but it really allows to have 300 moving lights at 200 fps on a 3 years old card. The original Doom 3 renderer was like 15 fps. The only downside is that deferred shading approaches are only a win for non-shadow casting lights. Wolfgang Engel also supplied some ideas for massive shadow map rendering but I never invested enough time to understand it.</div><br /><br />How does this compare to what is being done in BFG?<br /><br />From what I can tell, it's still an immediate mode renderer but appears to have 3 shadow methods?</div>]]></body></post><post id="p244883" date="Posted: Wed Dec 19, 2012 4:43 pm "><author>Tr3B</author><body><![CDATA[<div class="postbody">I can't say too much on the BFG renderer yet. It does not run in the main thread with com_smp 1 and it uses parallel jobs in the renderer frontend for adding lights and models.<br /><br />It is a lot faster than the original Doom 3 in testmaps/test_lotsaimps.map. However my old renderer has the same speed with shadow mapping and without any multithreading. <img src="https://web.archive.org/web/20130319220856im_/http://www.doom3world.org/phpbb2/images/smilies/icon_surprised.gif" alt=":o" title="Surprised" /></div>]]></body></post><post id="p244884" date="Posted: Thu Dec 20, 2012 12:04 am "><author>nbohr1more</author><body><![CDATA[<div class="postbody">Thanks.<br /><br />Out of curiosity, are you still planning on uploading that old renderer to your Github profile?<br /><br />It sounds like a better solution all around (including your last implication...)  <img src="https://web.archive.org/web/20130319220856im_/http://www.doom3world.org/phpbb2/images/smilies/icon_mrgreen.gif" alt=":mrgreen:" title="Mr. Green" /></div>]]></body></post><post id="p244885" date="Posted: Thu Dec 20, 2012 12:44 am "><author>Tr3B</author><body><![CDATA[<div class="postbody">I'm going to upload everything except the tools sooner or later. However I'm in the process of merging a lot stuff into my Doom 3 branch.<br />The Doom 3 BFG edition is nice but I don't want to scrap my mobile plans with it. The BFG code clutters SSE intrinsics all over the place without a #else c++ fallback and there are almost no x86 based mobile chips.</div>]]></body></post><post id="p244915" date="Posted: Thu Dec 20, 2012 7:31 pm "><author>nbohr1more</author><body><![CDATA[<div class="postbody">Thanks again.<br /><br />What hardware generation does your renderer require as a minimum?<br /><br />Shader Model 3.0 ?<br /><br />Do the mobile sets really support much beyond that for the mainstream market share?</div>]]></body></post><post id="p243538" date="Posted: Sat Oct 27, 2012 12:54 am "><author>jmarshall23</author><body><![CDATA[<div class="postbody">I'm about ready to pass out, I pulled a all nighter last night but I had a idea to actually look inside of the Doom 3 BFG renderprogs folder, and I saw it comes with some of the missing arb shaders. It contains Carmacks original megatexture.vfp as well as the shadow mapping shaders, the only thing its missing is the bloom stuff which in theory shouldn't be that hard to re-create. <br /><br />My thinking is, would it be worth while in the end to fix this up? I played with it a bit after fixing a couple crashes I got it to almost load in game when it got to R_MakeCurrent calling wglReleaseTexImageARB, which returns ERROR_INVALID_OPERATION. I haven't used wgl puffers in a long time, so I won't try and tackle that disaster till probably tomarrow, but my thinking is fixing it up might be beneficial depending on how wells things work in the current code.<br /><br />Just curious what everyone's thoughts are.</div>]]></body></post><post id="p243573" date="Posted: Sat Oct 27, 2012 9:53 am "><author>Tr3B</author><body><![CDATA[<div class="postbody">What about your idtech4cdk renderer? Wasn't the shadow mapping implementation already better?<br /><br />Working with WGL pixelbuffers for shadow mapping is really a method from 2004 .. I think at least your initial approach with FBOs was better.<br />I tried to fix the exp renderer in march and my first impression was that it was damn slow.<br />There were too many context switches for shadow mapping and interaction rendering. I got like 20 fps.<br />After that I supplemented the exp backend with my XreaL GLSL interface and my approach to render shadowmaps and especially point light shadow cubes. I use FBOs and that way I get stable 70 - 90 fps on a Geforce GTX 275. I can recommend shadow mapping with Doom 3 because it scales very well with newer gfx cards. I get 120 fps on my new GTX 660 Ti and the Doom 3 scenes are usually a nightmare for shadow mapping. I think almost no game has so many point lights that cast shadows. We also made a few tests with other commercial engines and they weren't faster.<br /><br />One way you can really improve speed is by implementing light pre pass deferred shading. Standard deferred shading is too fillrate limited because the gbuffer is too fat. It is a trade-off to render the scene twice for the light buffer applied to geometry but it really allows to have 300 moving lights at 200 fps on a 3 years old card. The original Doom 3 renderer was like 15 fps. The only downside is that deferred shading approaches are only a win for non-shadow casting lights. Wolfgang Engel also supplied some ideas for massive shadow map rendering but I never invested enough time to understand it.</div>]]></body></post><post id="p243593" date="Posted: Sat Oct 27, 2012 4:36 pm "><author>jmarshall23</author><body><![CDATA[<div class="postbody"><div class="quotetitle">Tr3B wrote:</div><div class="quotecontent">What about your idtech4cdk renderer? Wasn't the shadow mapping implementation already better?<br /><br />Working with WGL pixelbuffers for shadow mapping is really a method from 2004 .. I think at least your initial approach with FBOs was better.<br />I tried to fix the exp renderer in march and my first impression was that it was damn slow.<br />There were too many context switches for shadow mapping and interaction rendering. I got like 20 fps.<br />After that I supplemented the exp backend with my XreaL GLSL interface and my approach to render shadowmaps and especially point light shadow cubes. I use FBOs and that way I get stable 70 - 90 fps on a Geforce GTX 275. I can recommend shadow mapping with Doom 3 because it scales very well with newer gfx cards. I get 120 fps on my new GTX 660 Ti and the Doom 3 scenes are usually a nightmare for shadow mapping. I think almost no game has so many point lights that cast shadows. We also made a few tests with other commercial engines and they weren't faster.<br /><br />One way you can really improve speed is by implementing light pre pass deferred shading. Standard deferred shading is too fillrate limited because the gbuffer is too fat. It is a trade-off to render the scene twice for the light buffer applied to geometry but it really allows to have 300 moving lights at 200 fps on a 3 years old card. The original Doom 3 renderer was like 15 fps. The only downside is that deferred shading approaches are only a win for non-shadow casting lights. Wolfgang Engel also supplied some ideas for massive shadow map rendering but I never invested enough time to understand it.</div><br /><br />This is entirely seperate from anything related to idtech 4 cdk, and this would have been something I would have typed up in a tutorial. I'm thinking about a shadow mapping tutorial after the megatexture tuts, but as it is the first megtexture tutorial I put up was around 40 pages long and shadow mapping would be almost twice that size.<br /><br />Just was looking to see if it was worthwhile or not I got that impression as well that was extremely slow, but if it was like a 10 page tutorial to fix it someone might have benefited from it, but I agree it's probably not worthwhile with the bfg going open source cause it looks more like they just fixed up the exp renderer.</div>]]></body></post><post id="p244863" date="Posted: Mon Dec 17, 2012 7:02 pm "><author>nbohr1more</author><body><![CDATA[<div class="postbody"><div class="quotetitle">Tr3B wrote:</div><div class="quotecontent">What about your idtech4cdk renderer? Wasn't the shadow mapping implementation already better?<br /><br />Working with WGL pixelbuffers for shadow mapping is really a method from 2004 .. I think at least your initial approach with FBOs was better.<br />I tried to fix the exp renderer in march and my first impression was that it was damn slow.<br />There were too many context switches for shadow mapping and interaction rendering. I got like 20 fps.<br />After that I supplemented the exp backend with my XreaL GLSL interface and my approach to render shadowmaps and especially point light shadow cubes. I use FBOs and that way I get stable 70 - 90 fps on a Geforce GTX 275. I can recommend shadow mapping with Doom 3 because it scales very well with newer gfx cards. I get 120 fps on my new GTX 660 Ti and the Doom 3 scenes are usually a nightmare for shadow mapping. I think almost no game has so many point lights that cast shadows. We also made a few tests with other commercial engines and they weren't faster.<br /><br />One way you can really improve speed is by implementing light pre pass deferred shading. Standard deferred shading is too fillrate limited because the gbuffer is too fat. It is a trade-off to render the scene twice for the light buffer applied to geometry but it really allows to have 300 moving lights at 200 fps on a 3 years old card. The original Doom 3 renderer was like 15 fps. The only downside is that deferred shading approaches are only a win for non-shadow casting lights. Wolfgang Engel also supplied some ideas for massive shadow map rendering but I never invested enough time to understand it.</div><br /><br />How does this compare to what is being done in BFG?<br /><br />From what I can tell, it's still an immediate mode renderer but appears to have 3 shadow methods?</div>]]></body></post><post id="p244883" date="Posted: Wed Dec 19, 2012 4:43 pm "><author>Tr3B</author><body><![CDATA[<div class="postbody">I can't say too much on the BFG renderer yet. It does not run in the main thread with com_smp 1 and it uses parallel jobs in the renderer frontend for adding lights and models.<br /><br />It is a lot faster than the original Doom 3 in testmaps/test_lotsaimps.map. However my old renderer has the same speed with shadow mapping and without any multithreading. <img src="https://web.archive.org/web/20130319220221im_/http://www.doom3world.org/phpbb2/images/smilies/icon_surprised.gif" alt=":o" title="Surprised" /></div>]]></body></post><post id="p244884" date="Posted: Thu Dec 20, 2012 12:04 am "><author>nbohr1more</author><body><![CDATA[<div class="postbody">Thanks.<br /><br />Out of curiosity, are you still planning on uploading that old renderer to your Github profile?<br /><br />It sounds like a better solution all around (including your last implication...)  <img src="https://web.archive.org/web/20130319220221im_/http://www.doom3world.org/phpbb2/images/smilies/icon_mrgreen.gif" alt=":mrgreen:" title="Mr. Green" /></div>]]></body></post><post id="p244885" date="Posted: Thu Dec 20, 2012 12:44 am "><author>Tr3B</author><body><![CDATA[<div class="postbody">I'm going to upload everything except the tools sooner or later. However I'm in the process of merging a lot stuff into my Doom 3 branch.<br />The Doom 3 BFG edition is nice but I don't want to scrap my mobile plans with it. The BFG code clutters SSE intrinsics all over the place without a #else c++ fallback and there are almost no x86 based mobile chips.</div>]]></body></post><post id="p244915" date="Posted: Thu Dec 20, 2012 7:31 pm "><author>nbohr1more</author><body><![CDATA[<div class="postbody">Thanks again.<br /><br />What hardware generation does your renderer require as a minimum?<br /><br />Shader Model 3.0 ?<br /><br />Do the mobile sets really support much beyond that for the mainstream market share?</div>]]></body></post></posts></thread></xml>
