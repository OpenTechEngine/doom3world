<?xml version="1.0" encoding="UTF-8"?>
<xml><thread id="5543"><title>Complete GUI Scripting - 9: Animating the marine face HUD</title><posts><post id="p47212" date="Posted: Sun Sep 05, 2004 3:47 pm "><author>zeh</author><body><![CDATA[<div class="postbody">Hello, and welcome to lesson number nine in the GUI scripting series. This also is the 10th lesson on this series -- it has come a long way.
<br /><br />In the classic HUD we're creating, we'll finally get the marine face to update. We'll use a little animation, and then some more conditional statements to respond to certain events.
<br /><br /><span style="font-size: 167%; line-height: normal"><span style="font-weight: bold">Complete GUI Scripting - 9: Animating the marine face HUD</span></span>
<br /><br />One of the coolest things the marine face could do on the original DOOM game was react to what was happening around him. He would:
<br /><br /><ul><li>Continually look around suspiciously, rising an eyebrow as he looked to his sides</li><li>Get a happy/twisted look to his face when he got a new gun</li><li>Do a pain face when suffered damage, looking to the side the pain came from</li><li>Start to bleed and look in bad shape according to his health</li></ul>While we won't get him to look to the sides he took damage from - it might be possible, but I never found a way to get this information to use on the GUI system - the rest is easily doable and we'll implement that on this lesson. The first thing you might want to do is download the tutorial files for this lesson as it contains all the materials file we'll use (all the marine faces) and unzip it to the correct directories (the same &lt;doom 3&gt;/classichud/guis and &lt;doom 3&gt;/classichud/guis/assets folders we used on the previous lessons).<br /><br />Anyways, here's our HUD as it is until now.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">windowDef Desktop {<br />   rect   0,0,640,480<br />   visible   1<br />   noevents   1<br />   nocursor  1<br /><br />//=============================================================================<br />// Events<br />//=============================================================================<br /><br />   onNamedEvent newWeapon {<br />      // Now turns on the correct number when a new weapon is picked<br />      if ("gui::newweapon" == 2) { <br />         set "gun_3::forecolor" "1,1,0,1";<br />      }<br />      if ("gui::newweapon" == 3) { <br />         set "gun_4::forecolor" "1,1,0,1";<br />      }<br />      if ("gui::newweapon" == 4) { <br />         set "gun_5::forecolor" "1,1,0,1";<br />      }<br />      if ("gui::newweapon" == 5) { <br />         set "gun_6::forecolor" "1,1,0,1";<br />      }<br />      if ("gui::newweapon" == 6) { <br />         set "gun_7::forecolor" "1,1,0,1";<br />      }<br />   }<br /><br />//=============================================================================<br />// Main bar<br />//=============================================================================<br /><br />   windowDef base {<br />      rect   0,416,1024,64<br />      visible   1<br />      background   "guis/assets/hud_base"<br />      matcolor   1,1,1,1<br />   }<br /><br />//-----------------------------------------------------------------------------<br />// Standard indications: ammo, armor, health<br />//-----------------------------------------------------------------------------<br /><br />   windowDef bar_health {<br />      rect   110,420,60,49<br />      visible   1<br />      forecolor   1,1,1,1<br />      text   "gui::player_health"<br />      textscale   0.6<br />      textalign   2<br />      font   "fonts/english"<br />   }<br />   windowDef bar_health_percent {<br />      rect   170,420,40,49<br />      visible   1<br />      forecolor   1,1,1,1<br />      text   "%"<br />      textscale   0.6<br /><br />      textalign   0<br />      font   "fonts/english"<br />   }<br />   windowDef bar_armor {<br />      rect   370,420,60,49<br />      visible   1<br />      forecolor   1,1,1,1<br />      text   "gui::player_armor"<br />      textscale   0.6<br />      textalign   2<br />      font   "fonts/english"<br />   }<br />   windowDef bar_armor_percent {<br />      rect   430,420,40,49<br />      visible   1<br />      forecolor   1,1,1,1<br />      text   "%"<br />      textscale   0.6<br />      textalign   0<br />      font   "fonts/english"<br />   }<br />   windowDef bar_ammo {<br />      rect   15,420,60,49<br />      visible   1<br />      forecolor   1,1,1,1<br />      text   "gui::player_ammo"<br />      textscale   0.6<br />      textalign   2<br />      font   "fonts/english"<br />   }<br /><br />//-----------------------------------------------------------------------------<br />// Weapon numbers<br />//-----------------------------------------------------------------------------<br /><br />   windowDef gun_2 {<br />      rect   218, 416, 40, 40<br />      visible   1<br />      forecolor   1,1,0,1<br />      text   "2"<br />      textscale   0.25<br />      font   "fonts/micro"<br />   }<br /><br />   windowDef gun_3 {<br />      rect   242, 416, 40, 40<br />      visible   1<br />      forecolor   1,1,1,0.4<br />      text   "3"<br />      textscale   0.25<br />      font   "fonts/micro"<br />   }<br /><br />   windowDef gun_4 {<br />      rect   266, 416, 40, 40<br />      visible   1<br />      forecolor   1,1,1,0.4<br />      text   "4"<br />      textscale   0.25<br />      font   "fonts/micro"<br />   }<br /><br />   windowDef gun_5 {<br />      rect   218, 436, 40, 40<br />      visible   1<br />      forecolor   1,1,1,0.4<br />      text   "5"<br />      textscale   0.25<br />      font   "fonts/micro"<br />   }<br /><br />   windowDef gun_6 {<br />      rect   242, 436, 40, 40<br />      visible   1<br />      forecolor   1,1,1,0.4<br />      text   "6"<br />      textscale   0.25<br />      font   "fonts/micro"<br />   }<br /><br />   windowDef gun_7 {<br />      rect   266, 436, 40, 40<br />      visible   1<br />      forecolor   1,1,1,0.4<br />      text   "7"<br />      textscale   0.25<br />      font   "fonts/micro"<br />   }<br /><br />//=============================================================================<br />// Marine faces<br />//=============================================================================<br /><br />//-----------------------------------------------------------------------------<br />// Normal face<br />//-----------------------------------------------------------------------------<br /><br />   windowDef marineFace {<br />      rect   290,418,64,64<br />      visible   1<br />      background   "guis/assets/hud_face_100_center"<br />      matcolor   1,1,1,1<br />   }<br /><br />}</div><br /><br /><br />So we get our basic textfields with armor, ammo and health data, the weapon numbers, and a static marine face.<br /><br /><img src="https://web.archive.org/web/20100522163006im_/http://hosted.zeh.com.br/doom3/tutorials/tut9_01.jpg" alt="Image" /><br /><br />What we will do first is animate the marine so he can look around suspiciously. So open up &lt;doom 3&gt;/classichud/guis/hud.gui, or create a new one with the code provided above, use our classic hud testing shortcut to run DOOM 3 in windowed mode with the HUD preview, and let's get this party started.<br /><br />If you remember the original game, the marine face would, from time to time, look left, right, or centered, as if he was checking if there was something to worry about on his sides. This was more of a random movement. We won't do it here, though; the animation will be scripted and not random at all -- I don't think the GUI system can handle anything random without the use of crazy engine interactions so it'll be easier this way.<br /><br />Ok, so we have to create a simple animation: marine faces up front, faces left, faces up front again, then faces right, then gets back to facing up front, and continue like this on an endless loop. Easy.<br /><br />This is our marine code as it is now.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">(...strip...)<br /><br />//=============================================================================<br />// Marine faces<br />//=============================================================================<br /><br />//-----------------------------------------------------------------------------<br />// Normal face<br />//-----------------------------------------------------------------------------<br /><br />   windowDef marineFace {<br />      rect   290,418,64,64<br />      visible   1<br />      background   "guis/assets/hud_face_100_center"<br />      matcolor   1,1,1,1<br />   }<br /><br />}</div><br /><br />What we will do now is add <span style="font-weight: bold">onTime</span> events. Like onNamedEvents, onTime is an special event block that gets executed when a certain condition has been met - in this case, after a certain time has passed. With the use of several onTime blocks, you can create timed animations... emulating a timeline, in a sort of way.<br /><br />Let's add the first onTime event.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">(...strip...)<br /><br />//=============================================================================<br />// Marine faces<br />//=============================================================================<br /><br />//-----------------------------------------------------------------------------<br />// Normal face<br />//-----------------------------------------------------------------------------<br /><br />   windowDef marineFace {<br />      rect   290,418,64,64<br />      visible   1<br />      background   "guis/assets/hud_face_100_center"<br />      matcolor   1,1,1,1<br /><br />      onTime 0 {<br />         // set face: LOOKING STRAIGHT<br />         set "background" "guis/assets/hud_face_100_center";<br />      }<br />   }<br />}</div><br /><br />So, when the GUI system time reaches 0 milliseconds (that is, right after starting), it sets the windowDef background to "guis/assets/hud_face_100_center". This will have absolutely no action in this case - the default background is already this. This will be used, however, when looping our animation, so we need to reset it from time to time.<br /><br />Now we can simply put the other images on our animation, with different times.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">(...strip...)<br /><br />//=============================================================================<br />// Marine faces<br />//=============================================================================<br /><br />//-----------------------------------------------------------------------------<br />// Normal face<br />//-----------------------------------------------------------------------------<br /><br />   windowDef marineFace {<br />      rect   290,418,64,64<br />      visible   1<br />      background   "guis/assets/hud_face_100_center"<br />      matcolor   1,1,1,1<br /><br />      onTime 0 {<br />         // set face: LOOKING STRAIGHT<br />         set "background" "guis/assets/hud_face_100_center";<br />      }<br /><br />      onTime 2500 {<br />         // set face: LOOKING LEFT<br />         set "background" "guis/assets/hud_face_100_left";<br />      }<br /><br />      onTime 3500 {<br />         // set face: LOOKING STRAIGHT<br />         set "background" "guis/assets/hud_face_100_center";<br />      }<br /><br />      onTime 4000 {<br />         // set face: LOOKING RIGHT<br />         set "background" "guis/assets/hud_face_100_right";<br />      }<br /><br />      onTime 4500 {<br />         resetTime "0";<br />      }<br />   }<br />}</div><br /><br />Easy enough. Notice, now, that when the windowDef animation time reaches 4500 milliseconds, a new command is issued - resetTime. This command will reset the time back to 0, that is, executing the statements inside of the "onTime 0 {}" block once again, and ultimately creating a looped animation.<br /><br />Now, get back to the game, do a reloadguis and let's see if it works.<br /><br /><img src="https://web.archive.org/web/20100522163006im_/http://hosted.zeh.com.br/doom3/tutorials/tut9_02.jpg" alt="Image" /><br />Our marine starts looking right at you..<br /><br /><img src="https://web.archive.org/web/20100522163006im_/http://hosted.zeh.com.br/doom3/tutorials/tut9_03.jpg" alt="Image" /><br />Do a quick glance at the left...<br /><br /><img src="https://web.archive.org/web/20100522163006im_/http://hosted.zeh.com.br/doom3/tutorials/tut9_04.jpg" alt="Image" /><br />Gets back to looking straight...<br /><br /><img src="https://web.archive.org/web/20100522163006im_/http://hosted.zeh.com.br/doom3/tutorials/tut9_05.jpg" alt="Image" /><br />Looks right...<br /><br /><img src="https://web.archive.org/web/20100522163006im_/http://hosted.zeh.com.br/doom3/tutorials/tut9_06.jpg" alt="Image" /><br />Then gets straight again and restart the cycle.<br /><br />Nice, it's working. You can play with the time values if you wish; you can make the animation faster, for example, if you want a marine face on crack.<br /><br />We get to an important point right now. On the original DOOM, the marine face wasn't always this mean-looking straight face. Depending on how much damage he had taken, the marine face would start to bleed and look more and more wasted. Just like the game had graphics for straight, right and left looks with a perfect normal marine, it also had graphics for looking straight, left and right for the marine in increasingly bad shape.<br /><br />We have to use it on our animation cycle, then. Instead of just setting the correct face at the time, we have to set the correct face related to the health.<br /><br />Getting back to our "animation reset" code block, it looks like this.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">(...strip...)<br /><br />      onTime 0 {<br />         // set face: LOOKING STRAIGHT<br />         set "background" "guis/assets/hud_face_100_center";<br />      }<br /><br />(...strip...)</div><br /><br />But instead of using "guis/assets/hud_face_100_center" as the background, we have to be able to select which is the correct image at the time. We'll do something like this:<br /><br /><ul><li>If the player health is higher than 79, use "guis/assets/hud_face_100_center"</li><li>Otherwise, if the player health is higher than 59, use "guis/assets/hud_face_80_center"</li><li>Otherwise, if the player health is higher than 39, use "guis/assets/hud_face_60_center"</li><li>Otherwise, if the player health is higher than 19, use "guis/assets/hud_face_40_center"</li><li>Otherwise, if the player health is higher than 0, use "guis/assets/hud_face_00_center"</li><li>Otherwise (the player is dead) use "guis/assets/hud_face_00_center"</li></ul><br />And, of course, this is achieved by the use of conditional if/else statements.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">(...strip...)<br /><br />      onTime 0 {<br />         // set face: LOOKING STRAIGHT<br />         if ("gui::player_health" &gt;= 80) {<br />            set "background" "guis/assets/hud_face_100_center";<br />         } else {<br />         }<br />      }<br /><br />(...strip...)</div><br /><br />Notice that on the IF line, I'm comparing the built-in variable "gui::player_health" against 80. If it's higher than or equal to 80, use "guis/assets/hud_face_100_center" as a background. If not, skip to the "else" block, where we will do other checks. To make a long story short, this will be the end result.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">(...strip...)<br /><br />      onTime 0 {<br />         // set face: LOOKING STRAIGHT<br />         if ("gui::player_health" &gt;= 80) {<br />            set "background" "guis/assets/hud_face_100_center";<br />         } else {<br />            if ("gui::player_health" &gt;= 60) {<br />               set "background" "guis/assets/hud_face_80_center";<br />            } else {<br />               if ("gui::player_health" &gt;= 40) {<br />                  set "background" "guis/assets/hud_face_60_center";<br />               } else {<br />                  if ("gui::player_health" &gt;= 20) {<br />                     set "background" "guis/assets/hud_face_40_center";<br />                  } else {<br />                     if ("gui::player_health" &gt;= 1) {<br />                        set "background" "guis/assets/hud_face_20_center";<br />                     } else {<br />                        set "background" "guis/assets/hud_face_00_center";<br />                     }<br />                  }<br />               }<br />            }<br />         }<br />      }<br /><br />(...strip...)</div><br /><br />This may look bad to read, but it's how it goes with nested IF statements. It continuously check each condition, until it finally finds out the background value it has to use. Unfortunately, the GUI system doesn't seem to have switch statements or single-line IF statements, so this is probably the simplest way to do it.<br /><br />Anyway, let's check how (and if) it works in game. Back to the game, do a reloadguis, and do something to take damage (I usually just fall from the bridge).<br /><br /><img src="https://web.archive.org/web/20100522163006im_/http://hosted.zeh.com.br/doom3/tutorials/tut9_07.jpg" alt="Image" /><br /><br />Hey, cool - our marine nose's bleeding! (off-topic: <a href="https://web.archive.org/web/20100522163006/http://www.animenation.net/forums/archive/index.php/t-152173.html" class="postlink">You know what this means...</a>)<br /><br />However, there's something wrong. As soon as the animation cycle starts and the marine looks to the right and left sides, his face is back to the normal, brand new state.<br /><br />That is, of course, due to the fact that we only changed the first step on the animation cycle. We have to add conditional IF statements on all other time blocks, so he'll look to the sides using the correct animation. This can be lengthy, but it's easy enough - just a repetition of the concept used above - so here we go.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">(...strip...)<br /><br />//=============================================================================<br />// Marine faces<br />//=============================================================================<br /><br />//-----------------------------------------------------------------------------<br />// Normal face + look around animation<br />//-----------------------------------------------------------------------------<br /><br />   windowDef marineFace {<br />      rect   290,418,64,64<br />      visible   1<br />      background   "guis/assets/hud_face_100_center"<br />      matcolor   1,1,1,1<br /><br />      onTime 0 {<br />         // set face: LOOKING STRAIGHT<br />         if ("gui::player_health" &gt;= 80) {<br />            set "background" "guis/assets/hud_face_100_center";<br />         } else {<br />            if ("gui::player_health" &gt;= 60) {<br />               set "background" "guis/assets/hud_face_80_center";<br />            } else {<br />               if ("gui::player_health" &gt;= 40) {<br />                  set "background" "guis/assets/hud_face_60_center";<br />               } else {<br />                  if ("gui::player_health" &gt;= 20) {<br />                     set "background" "guis/assets/hud_face_40_center";<br />                  } else {<br />                     if ("gui::player_health" &gt;= 1) {<br />                        set "background" "guis/assets/hud_face_20_center";<br />                     } else {<br />                        set "background" "guis/assets/hud_face_00_center";<br />                     }<br />                  }<br />               }<br />            }<br />         }<br />      }<br /><br />      onTime 2500 {<br />         // set face: LOOKING LEFT<br />         if ("gui::player_health" &gt;= 80) {<br />            set "background" "guis/assets/hud_face_100_left";<br />         } else {<br />            if ("gui::player_health" &gt;= 60) {<br />               set "background" "guis/assets/hud_face_80_left";<br />            } else {<br />               if ("gui::player_health" &gt;= 40) {<br />                  set "background" "guis/assets/hud_face_60_left";<br />               } else {<br />                  if ("gui::player_health" &gt;= 20) {<br />                     set "background" "guis/assets/hud_face_40_left";<br />                  } else {<br />                     if ("gui::player_health" &gt;= 1) {<br />                        set "background" "guis/assets/hud_face_20_left";<br />                     }<br />                  }<br />               }<br />            }<br />         }<br />      }<br /><br />      onTime 3500 {<br />         // set face: LOOKING STRAIGHT<br />         if ("gui::player_health" &gt;= 80) {<br />            set "background" "guis/assets/hud_face_100_center";<br />         } else {<br />            if ("gui::player_health" &gt;= 60) {<br />               set "background" "guis/assets/hud_face_80_center";<br />            } else {<br />               if ("gui::player_health" &gt;= 40) {<br />                  set "background" "guis/assets/hud_face_60_center";<br />               } else {<br />                  if ("gui::player_health" &gt;= 20) {<br />                     set "background" "guis/assets/hud_face_40_center";<br />                  } else {<br />                     if ("gui::player_health" &gt;= 1) {<br />                        set "background" "guis/assets/hud_face_20_center";<br />                     } else {<br />                        set "background" "guis/assets/hud_face_00_center";<br />                     }<br />                  }<br />               }<br />            }<br />         }<br />      }<br /><br />      onTime 4000 {<br />         // set face: LOOKING RIGHT<br />         if ("gui::player_health" &gt;= 80) {<br />            set "background" "guis/assets/hud_face_100_right";<br />         } else {<br />            if ("gui::player_health" &gt;= 60) {<br />               set "background" "guis/assets/hud_face_80_right";<br />            } else {<br />               if ("gui::player_health" &gt;= 40) {<br />                  set "background" "guis/assets/hud_face_60_right";<br />               } else {<br />                  if ("gui::player_health" &gt;= 20) {<br />                     set "background" "guis/assets/hud_face_40_right";<br />                  } else {<br />                     if ("gui::player_health" &gt;= 1) {<br />                        set "background" "guis/assets/hud_face_20_right";<br />                     }<br />                  }<br />               }<br />            }<br />         }<br />      }<br /><br />      onTime 4500 {<br />         resetTime "0";<br />      }<br /><br />   }<br />}</div><br /><br />So here we go. You'll notice that if the health is less than 1, it will never get updated on the animation cycles too - he's dead, there's no looking around animation.<br /><br />Well, back to the game, reloadguis, wait for him to look around and...<br /><br /><img src="https://web.archive.org/web/20100522163006im_/http://hosted.zeh.com.br/doom3/tutorials/tut9_08.jpg" alt="Image" /><br /><br />Nice. He even looks a bit more worried when looking to the left. Let me take more damage for the effect to be a bit more obvious...<br /><br /><img src="https://web.archive.org/web/20100522163006im_/http://hosted.zeh.com.br/doom3/tutorials/tut9_09.jpg" alt="Image" /><br /><br />Cool.<br /><br />Now, one more thing, something not so obvious but that should not be forgotten. While our animation looks and works good, we have to make sure the marine face gets updated as soon as he is hit; or else, we're at the risk of having a bright looking marine face when he's barely alive, even if it's for just a few seconds.<br /><br />So we have to use one new named event - "updateArmorHealthAir". This HUD event is fired up when there's some change on the armor, health, or air values, so it's fired when the player takes damage.<br /><br />Getting back to the begin of our HUD script file, it looks like this.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">windowDef Desktop {<br />   rect   0,0,640,480<br />   visible   1<br />   noevents   1<br />   nocursor  1<br /><br />//=============================================================================<br />// Events<br />//=============================================================================<br /><br />(...strip...)</div><br /><br />So let's add the main block for our event.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">windowDef Desktop {<br />   rect   0,0,640,480<br />   visible   1<br />   noevents   1<br />   nocursor  1<br /><br />//=============================================================================<br />// Events<br />//=============================================================================<br /><br />   onNamedEvent updateArmorHealthAir {<br />   }<br /><br />(...strip...)</div><br /><br />Easy enough. What we need to do is make sure the marine face windowDef gets updated with the right face. We don't need to have all those IF statements again to check which one is the correct marine face to be displayed, though; since the marine face uses an animation, we just need to reset its time -- it'll automatically fire up the updating animations. So we just do a resetTime again, this time with two parameters so we can reset another windowDef 'remotely'.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">windowDef Desktop {<br />   rect   0,0,640,480<br />   visible   1<br />   noevents   1<br />   nocursor  1<br /><br />//=============================================================================<br />// Events<br />//=============================================================================<br /><br />   onNamedEvent updateArmorHealthAir {<br />      resetTime "marineFace" "0";<br />   }<br /><br />(...strip...)<br /></div><br /><br />Easy. Now, when the player takes damage or grabs some health, his animation will restart and immediately update the face with the correct one. Test it in-game if you want; I won't provide a screenshot for this change because it won't make much sense (it'll be the same as the previous ones).<br /><br />We can now add the next step in our marine face: makes him grin when he grabs a new gun.<br /><br />We could make it in two ways: first, when a new gun is picked up, change the "background" of the marineFace windowDef to the grinning face for a while. Or second, create a new windowDef with a grinning face and make it visible or invisible.<br /><br />I tried the first option, since it'd be easier with less windowDefs, but in the end I had some trouble with resetTime. While you can change the time the windowDef is at the moment, if you have some alternative 'animation paths' to follow, there's a big can of worms to be dealt with. When you do a resetTime, it looks like all previous time code blocks are executed, so I couldn't have alternative animations... it's complicated to explain and I don't want to extend much with personal ramblings on this lesson, so suffice to say I decided for the second alternative.<br /><br />So we will have a simple (hidden) grinning windowDef at the same position of the original marine face. When a new gun is grabbed, the animation on this grinning windowDef is activated: it makes itself visible, makes the normal marineFace invisible, and after a while gets back to normal. This is probably easier for the engine to do, since there will be no file reading involved, just toggling windowDefs visibilities on and off. While I don't believe the background setting we did in the normal cycle of the marine face is heavy at all - backgrounds get cached by the engine - you never know what to expect.<br /><br />Anyways, back to our HUD code, we have the marineFace windowDef.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">(...strip...)<br /><br />//-----------------------------------------------------------------------------<br />// Normal face + look around animation<br />//-----------------------------------------------------------------------------<br /><br />   windowDef marineFace {<br />      rect   290,418,64,64<br />      visible   1<br />      background   "guis/assets/hud_face_100_center"<br />      matcolor   1,1,1,1<br /><br />(...strip...)</div><br /><br />We'll add a new windowDef, marineFacePickup, and make it invisible, right above our marineFace windowDef (order doesn't matter anyways).<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">(...strip...)<br /><br />//-----------------------------------------------------------------------------<br />// Pickup (happy) overlay<br />//-----------------------------------------------------------------------------<br /><br />   windowDef marineFacePickup {<br />      rect   290,418,64,64<br />      visible   0<br />      background   "guis/assets/hud_face_100_pickup"<br />      matcolor   1,1,1,1<br />   }<br /><br />//-----------------------------------------------------------------------------<br />// Normal face + look around animation<br />//-----------------------------------------------------------------------------<br /><br />   windowDef marineFace {<br /><br />(...strip...)</div><br /><br />Notice how the "marineFacePickup" windowDef has a "visible" property of 0 - it's hidden by default.<br /><br />Now, we need a timed animation. This animation will be fired when a new weapon is picked up, and it'll simply make the marineFacePickup windowDef visible while hiding the normal marineFace windowDef. It goes like this...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">(...strip...)<br /><br />//-----------------------------------------------------------------------------<br />// Pickup (happy) overlay<br />//-----------------------------------------------------------------------------<br /><br />   windowDef marineFacePickup {<br />      rect   290,418,64,64<br />      visible   0<br />      background   "guis/assets/hud_face_100_pickup"<br />      matcolor   1,1,1,1<br />      notime   1<br /><br />      onTime 0 {<br />         set "marineFacePickup::visible" "1";<br />         set "marineFace::visible" "0";<br />      }<br /><br />      onTime 800 {<br />         set "marineFacePickup::visible" "0";<br />         set "marineFace::visible" "1";<br />      }<br />   }<br /><br />(...strip...)</div><br /><br />Okey, there are a few things to be considered. First, notice I've added a new property to the windowDef "notime" with a value of "1". This tells the GUI system that, even though this windowDef has some time event blocks, they should not be used right now, they shouldn't fire up by default - they will be fired manually through a resetTime command. By using "notime 1", you have the ability to create complex animations elsewhere - animations that can be fired when you desire.<br /><br />Now, looking at the animation: when it is fired (time 0), it simply makes itself visible and hides the original marineFace. When it reaches 800, it gets back to normal. Pretty easy.<br /><br />We're almost ready to go. While our happy marine face is done, we still have to fire it. Now, remember we already used a "newWeapon" named event on the previous lesson...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">(...strip...)<br /><br />   onNamedEvent newWeapon {<br />      // Now turns on the correct number when a new weapon is picked<br />      if ("gui::newweapon" == 2) { <br />         set "gun_3::forecolor" "1,1,0,1";<br />      }<br /><br />(...strip...)</div><br /><br />...we just need to add one more command to this event: resetTime firing up the animation on "marineFacePickup".<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">(...strip...)<br /><br />   onNamedEvent newWeapon {<br />      // Makes the marine face happy<br />      resetTime "marineFacePickup" "0";<br /><br />      // Now turns on the correct number when a new weapon is picked<br />      if ("gui::newweapon" == 2) { <br />         set "gun_3::forecolor" "1,1,0,1";<br />      }<br /><br />(...strip...)</div><br /><br />Great. Save, do a reloadguis on the game, and let's test.<br /><br /><img src="https://web.archive.org/web/20100522163006im_/http://hosted.zeh.com.br/doom3/tutorials/tut9_10.jpg" alt="Image" /><br />So we're getting close to the gun...<br /><br /><img src="https://web.archive.org/web/20100522163006im_/http://hosted.zeh.com.br/doom3/tutorials/tut9_11.jpg" alt="Image" /><br />...and grabbing it. Notice the happy look in the face of the marine. Mad happy.<br /><br />It's all fine and dandy, but there's something wrong. Of course, our marine already had his nose bleeding, but when he grabs the shotgun, he's all fine again. Obviously, the health/bleeding states also apply to the happy marine face, so we have to add conditional statements to the marineFacePickup animation too. Just like the previous marineFace animation, we do it with one big nest of if statements at the "onTime 0 {}" event block, this time right after everything visible or invisible.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">(...strip...)<br /><br />//-----------------------------------------------------------------------------<br />// Pickup (happy) overlay<br />//-----------------------------------------------------------------------------<br /><br />   windowDef marineFacePickup {<br />      rect   290,418,64,64<br />      visible   0<br />      background   "guis/assets/hud_face_100_pickup"<br />      matcolor   1,1,1,1<br />      notime   1<br /><br />      onTime 0 {<br />         set "marineFacePickup::visible" "1";<br />         set "marineFace::visible" "0";<br />         // set face: PAIN STRAIGHT<br />         if ("gui::player_health" &gt;= 80) {<br />            set "background" "guis/assets/hud_face_100_pickup";<br />         } else {<br />            if ("gui::player_health" &gt;= 60) {<br />               set "background" "guis/assets/hud_face_80_pickup";<br />            } else {<br />               if ("gui::player_health" &gt;= 40) {<br />                  set "background" "guis/assets/hud_face_60_pickup";<br />               } else {<br />                  if ("gui::player_health" &gt;= 20) {<br />                     set "background" "guis/assets/hud_face_40_pickup";<br />                  } else {<br />                     if ("gui::player_health" &gt;= 1) {<br />                        set "background" "guis/assets/hud_face_20_pickup";<br />                     }<br />                  }<br />               }<br />            }<br />         }<br />      }<br /><br />      onTime 800 {<br />         set "marineFacePickup::visible" "0";<br />         set "marineFace::visible" "1";<br />      }<br />   }<br /><br />(...strip...)</div><br /><br />Getting back to the game, and doing a "reloadguis; map game/mp/d3dm1" console command to reset the map...<br /><br /><img src="https://web.archive.org/web/20100522163006im_/http://hosted.zeh.com.br/doom3/tutorials/tut9_12.jpg" alt="Image" /><br />The marine is in a bad shape, then we approach the shotgun...<br /><br /><img src="https://web.archive.org/web/20100522163006im_/http://hosted.zeh.com.br/doom3/tutorials/tut9_13.jpg" alt="Image" /><br />...now he's in a bad shape and happy. Mad happy.<br /><br />Great! We got our marine looking to the sides, changing his face according to his damage status, getting happy when he grabs a new gun... what else?<br /><br />The pain look, that's what else. When the marine gets hit, his face stretches in pain. Just like the weapon pickup we did above, this is done with a new overlay windowDef with a timed animation and an event block, but there's a little twist I'll discuss further. Let's get started.<br /><br />This is part of our code right now, the beginning of the marineFaceHappy windowDef.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">(...strip...)<br /><br />//=============================================================================<br />// Marine faces<br />//=============================================================================<br /><br />//-----------------------------------------------------------------------------<br />// Pickup (happy) overlay<br />//-----------------------------------------------------------------------------<br /><br />   windowDef marineFacePickup {<br /><br />(...strip...)</div><br /><br />We'll add a new windowDef on top of it (again, order doesn't really matter): marineFacePain.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">(...strip...)<br /><br />//=============================================================================<br />// Marine faces<br />//=============================================================================<br /><br />//-----------------------------------------------------------------------------<br />// Pain overlay<br />//-----------------------------------------------------------------------------<br /><br />   windowDef marineFacePain {<br />      rect   290,418,64,64<br />      visible   0<br />      background   "guis/assets/hud_face_100_paincenter"<br />      matcolor   1,1,1,1<br />      notime   1<br /><br />      onTime 0 {<br />         set "marineFacePain::visible" "1";<br />         set "marineFace::visible" "0";<br />         // set face: PAIN STRAIGHT<br />         if ("gui::player_health" &gt;= 80) {<br />            set "background" "guis/assets/hud_face_100_paincenter";<br />         } else {<br />            if ("gui::player_health" &gt;= 60) {<br />               set "background" "guis/assets/hud_face_80_paincenter";<br />            } else {<br />               if ("gui::player_health" &gt;= 40) {<br />                  set "background" "guis/assets/hud_face_60_paincenter";<br />               } else {<br />                  if ("gui::player_health" &gt;= 20) {<br />                     set "background" "guis/assets/hud_face_40_paincenter";<br />                  } else {<br />                     if ("gui::player_health" &gt;= 1) {<br />                        set "background" "guis/assets/hud_face_20_paincenter";<br />                     }<br />                  }<br />               }<br />            }<br />         }<br />      }<br /><br />      onTime 500 {<br />         set "marineFacePain::visible" "0";<br />         set "marineFace::visible" "1";<br />      }<br />   }<br /><br />//-----------------------------------------------------------------------------<br />// Pickup (happy) overlay<br />//-----------------------------------------------------------------------------<br /><br />   windowDef marineFacePickup {<br /><br />(...strip...)</div><br /><br />No big deal here: it works just like the marineFacePickup windowDef. The first real difference done is the time on the second block (500 instead of 800), since I wanted the "pain" face animation to last shorter. The rest has been adapted to work with the pain backgrounds and marineFacePain windowDef accordingly.<br /><br />There's one catch, though. You see, when the marineFacePickup animation was fired, we made it visible and hide the standard marineFace.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">(...strip...)<br /><br />      onTime 0 {<br />         set "marineFacePickup::visible" "1";<br />         set "marineFace::visible" "0";<br /><br />(...strip...)</div><br /><br />But since we're dealing with two overlay windowDefs, now, this won't do. We could have the marine grab a gun at the same (or at a close) time he suffered damage, so we'd end up with two different overlay windowDefs standing on top of each other.<br /><br />To avoid this, we'll have to make sure that when each animation/overlay windowDef is activated, it disables all previous overlays. So we need to make sure the marineFacePickup disables the marineFacePain windowDef, and vice versa. We do this by adding one more line to the blocks, like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">(...strip...)<br /><br />      onTime 0 {<br />         set "marineFacePickup::visible" "1";<br />         set "marineFacePain::visible" "0";<br />         set "marineFace::visible" "0";<br /><br />(...strip...)</div><br /><br />Easy enough. After doing this where it's needed, this is what our "overlay" windowDefs will look like.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">(...strip...)<br /><br />//=============================================================================<br />// Marine faces<br />//=============================================================================<br /><br />//-----------------------------------------------------------------------------<br />// Pain overlay<br />//-----------------------------------------------------------------------------<br /><br />   windowDef marineFacePain {<br />      rect   290,418,64,64<br />      visible   0<br />      background   "guis/assets/hud_face_100_paincenter"<br />      matcolor   1,1,1,1<br />      notime   1<br /><br />      onTime 0 {<br />         set "marineFacePickup::visible" "0";<br />         set "marineFacePain::visible" "1";<br />         set "marineFace::visible" "0";<br />         // set face: PAIN STRAIGHT<br />         if ("gui::player_health" &gt;= 80) {<br />            set "background" "guis/assets/hud_face_100_paincenter";<br />         } else {<br />            if ("gui::player_health" &gt;= 60) {<br />               set "background" "guis/assets/hud_face_80_paincenter";<br />            } else {<br />               if ("gui::player_health" &gt;= 40) {<br />                  set "background" "guis/assets/hud_face_60_paincenter";<br />               } else {<br />                  if ("gui::player_health" &gt;= 20) {<br />                     set "background" "guis/assets/hud_face_40_paincenter";<br />                  } else {<br />                     if ("gui::player_health" &gt;= 1) {<br />                        set "background" "guis/assets/hud_face_20_paincenter";<br />                     }<br />                  }<br />               }<br />            }<br />         }<br />      }<br /><br />      onTime 500 {<br />         set "marineFacePickup::visible" "0";<br />         set "marineFacePain::visible" "0";<br />         set "marineFace::visible" "1";<br />      }<br />   }<br /><br />//-----------------------------------------------------------------------------<br />// Pickup (happy) overlay<br />//-----------------------------------------------------------------------------<br /><br />   windowDef marineFacePickup {<br />      rect   290,418,64,64<br />      visible   0<br />      background   "guis/assets/hud_face_100_pickup"<br />      matcolor   1,1,1,1<br />      notime   1<br /><br />      onTime 0 {<br />         set "marineFacePickup::visible" "1";<br />         set "marineFacePain::visible" "0";<br />         set "marineFace::visible" "0";<br />         // set face: PAIN STRAIGHT<br />         if ("gui::player_health" &gt;= 80) {<br />            set "background" "guis/assets/hud_face_100_pickup";<br />         } else {<br />            if ("gui::player_health" &gt;= 60) {<br />               set "background" "guis/assets/hud_face_80_pickup";<br />            } else {<br />               if ("gui::player_health" &gt;= 40) {<br />                  set "background" "guis/assets/hud_face_60_pickup";<br /><br />               } else {<br />                  if ("gui::player_health" &gt;= 20) {<br />                     set "background" "guis/assets/hud_face_40_pickup";<br />                  } else {<br />                     if ("gui::player_health" &gt;= 1) {<br />                        set "background" "guis/assets/hud_face_20_pickup";<br />                     }<br />                  }<br />               }<br />            }<br />         }<br />      }<br /><br />      onTime 800 {<br />         set "marineFacePickup::visible" "0";<br />         set "marineFacePain::visible" "0";<br />         set "marineFace::visible" "1";<br />      }<br />   }<br /><br />//-----------------------------------------------------------------------------<br />// Normal face + look around animation<br />//-----------------------------------------------------------------------------<br /><br />(...strip...)</div><br /><br />There's still one catch to this code, though. If, for example, a damage animation is fired, then a pickup animation is fired, the marine face will get back to normal as soon as the damage animation finishes. This could be avoided with the use of some auxiliary variables, but it'll be a rare case and I'll chose to ignore it. It'll never be anything so blatant as having two faces activated at the same time on top of each other.<br /><br />Now we need to get this pain animation fired just like we did with the pickup animation. This is done using the "updateArmorHealthAir" name event again, just like we used it to reset the marine face status. This is what our updateArmorHealthAir event block looks right now.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">windowDef Desktop {<br />   rect   0,0,640,480<br />   visible   1<br />   noevents   1<br />   nocursor  1<br /><br />//=============================================================================<br />// Events<br />//=============================================================================<br /><br />   onNamedEvent updateArmorHealthAir {<br />      resetTime "marineFace" "0";<br />   }<br /><br />(...strip...)</div><br /><br />We can't just fire up the marineFacePain animation when there's a change to health, though: this event is fired when there's damage (less health) or when a health pack is picked up (more health). This is the twist I mentioned earlier: we need to make sure the animation only gets fired when the new health is less than the previous health, that is, damage has been done.<br /><br />To do this, we need to use an auxiliary variable. I'll call it "lastHealth", since it'll control the last known player health. We add a new variable by declaring it as float on the windowDef properties declaration -- in this case I'll use the desktop windowDef itself.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">windowDef Desktop {<br />   rect   0,0,640,480<br />   visible   1<br />   noevents   1<br />   nocursor  1<br />   float lastHealth 0<br /><br />//=============================================================================<br />// Events<br />//=============================================================================<br /><br />   onNamedEvent updateArmorHealthAir {<br />      resetTime "marineFace" "0";<br />   }<br /><br />(...strip...)</div><br /><br />I've also initialized it with a value of "0".<br /><br />What we have to do - in the "updateArmorHealthAir" block - is this: check if the current health is more or less than the previous known health.<br /><br />If it's more, the player has grabbed a health pickup, so just update the marineFace normally.<br /><br />If it's less, fire up the damage animation.<br /><br />After this is done, update the auxiliary variable "lastHealth" with the current value, so we know what to compare to in the next iteration of health update. So here we go...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">windowDef Desktop {<br />   rect   0,0,640,480<br />   visible   1<br />   noevents   1<br />   nocursor  1<br />   float lastHealth 0<br /><br />//=============================================================================<br />// Events<br />//=============================================================================<br /><br />   onNamedEvent updateArmorHealthAir {<br />      if ("lastHealth" != "gui::player_health") {<br />         if ("lastHealth" &gt; "gui::player_health" &amp;&amp; "gui::player_health" &gt; 0) {<br />            // Health change, less<br />            resetTime "marineFacePain" "0";<br />         } else {<br />            // Health change, more<br />            resetTime "marineFace" "0";<br />         }<br />         set "lastHealth" "gui::player_health";<br />      }<br />   }<br /><br />(...strip...)</div>
<br /><br />Easy. You'll notice I also added a "lastHealth" != "gui::player_health" condition - this way, the animation update will only get fired when there's a change in health. Or else, we'd have the risk of having the marineFace animation reset when the player picked up armor or his air supply level changed.
<br /><br />Back to the game, testing again through doing a reloadguis and resetting the map...
<br /><br /><img src="https://web.archive.org/web/20100522163006im_/http://hosted.zeh.com.br/doom3/tutorials/tut9_14.jpg" alt="Image" /><br />We're on the top of the bridge...
<br /><br /><img src="https://web.archive.org/web/20100522163006im_/http://hosted.zeh.com.br/doom3/tutorials/tut9_15.jpg" alt="Image" /><br />...the marine falls down, takes damage, and makes a pain face.
<br /><br /><img src="https://web.archive.org/web/20100522163006im_/http://hosted.zeh.com.br/doom3/tutorials/tut9_16.jpg" alt="Image" /><br />We get next to the health pack...
<br /><br /><img src="https://web.archive.org/web/20100522163006im_/http://hosted.zeh.com.br/doom3/tutorials/tut9_17.jpg" alt="Image" /><br />...and sure enough, the pain animation doesn't fire - rather, his face updates and he stops bleeding.
<br /><br />Wew! That's it, our marine face works. That was kind of long, but covered animation and a few more events and conditional cases to a great extent. I'm pretty happy with the results, even though the marine can't look to the sides he's taking damage from.
<br /><br />The next lesson - <span style="font-weight: bold">hopefully, as I depend on information probably present on the SDK</span> - will be on putting the original DOOM fonts to work, making the graphic assets on our HUD 100% like the original. See you there!
<br /><br /><a href="https://web.archive.org/web/20100522163006/http://hosted.zeh.com.br/doom3/tutorials/classichud9.pk4" class="postlink">Download final mod files in DOOM 3-friendly PK4 format</a> (42kb) (use on the "&lt;doom 3&gt;/classichud" folder)</div>]]></body></post><post id="p47215" date="Posted: Sun Sep 05, 2004 3:59 pm "><author>Cryect</author><body><![CDATA[<div class="postbody">Damn nice again zeh!</div>]]></body></post><post id="p47218" date="Posted: Sun Sep 05, 2004 4:03 pm "><author>MNeMiC</author><body><![CDATA[<div class="postbody">I need time to try all this out man!
<br /><br />GJ as hell, keep up the awsome work.</div>]]></body></post><post id="p47231" date="Posted: Sun Sep 05, 2004 5:18 pm "><author>bad marine ass</author><body><![CDATA[<div class="postbody">Once again zeh: you rock my world <img src="https://web.archive.org/web/20100522163006im_/http://www.doom3world.org/phpbb2/images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div>]]></body></post><post id="p47612" date="Posted: Mon Sep 06, 2004 6:11 pm "><author>rich_is_bored</author><body><![CDATA[<div class="postbody">Great tutorial zeh. <img src="https://web.archive.org/web/20100522163006im_/http://www.doom3world.org/phpbb2/images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div>]]></body></post><post id="p47967" date="Posted: Tue Sep 07, 2004 7:21 pm "><author>.Fragger.</author><body><![CDATA[<div class="postbody">I was making <a href="https://web.archive.org/web/20100522163006/http://www.forumplanet.com/planetdoom/topic.asp?fid=8332&amp;tid=1477341" class="postlink">THIS</a>, and they told me to look here.
<br />Would you add a new face for GOD mode?</div>]]></body></post><post id="p218373" date="Posted: Mon Sep 07, 2009 6:31 pm "><author>Infernostar</author><body><![CDATA[<div class="postbody">Firstly, great job with the classic hud conversion, but I have a question. How do I get it to work on doom 3?</div>]]></body></post><post id="p218374" date="Posted: Mon Sep 07, 2009 6:41 pm "><author>Ivan_the_B</author><body><![CDATA[<div class="postbody">It's written at the end.<br />Download the pk4, place it in "&lt;doom 3&gt;/classichud" folder (create it if needed!) and load it from the mod list.</div>]]></body></post><post id="p218375" date="Posted: Mon Sep 07, 2009 6:58 pm "><author>Infernostar</author><body><![CDATA[<div class="postbody">The trouble is, it doesn't show up in the mod list. How do I get the game to read the folder as a usable mod?</div>]]></body></post><post id="p218400" date="Posted: Tue Sep 08, 2009 7:33 am "><author>Ivan_the_B</author><body><![CDATA[<div class="postbody">Every folder is usable for mods.<br />Only requirements:<br />- it has to be in the main doom3 folder (at the same level as "base")<br />- it has to include a pk4<br /><br />I tried to dowload this pk4, created "classichud" folder, placed it in there, started the game and the "classichud" mod does appear in the mod list.</div>]]></body></post><post id="p218417" date="Posted: Tue Sep 08, 2009 5:15 pm "><author>Infernostar</author><body><![CDATA[<div class="postbody">Ah... worked that out. Thanks for the help!</div>]]></body></post><post id="p218420" date="Posted: Tue Sep 08, 2009 8:54 pm "><author>biff</author><body><![CDATA[<div class="postbody">This is too much awesome. Getting now.</div>]]></body></post></posts></thread></xml>
