<?xml version="1.0" encoding="UTF-8"?>
<xml><thread id="3235"><title>Level Scripting Tutorial 3 - (UPDATED 8/04)</title><posts><post id="p30751" date="Posted: Sun Aug 08, 2004 6:16 pm "><author>rich_is_bored</author><body><![CDATA[<div class="postbody"><span style="font-weight: bold"><span style="font-size: 200%; line-height: normal">Level Scripting Tutorial 3</span></span><br /><br /><span style="font-weight: bold"><span style="font-size: 134%; line-height: normal">Introduction</span></span><br /><br />Welcome to the third and last of my scripting tutorials. Well, that's probably not entirely true. Maybe I'll figure something else out and it will be worth writing about.<br /><br />Anyway, In this tutorial we will take the mechanical arm from the last tutorial as well as some new pieces and create a machine. It's a pretty simple machine and it isn't perfect. But I wasn't making eye candy to begin with.<br /><br /><span style="font-weight: bold"><span style="font-size: 134%; line-height: normal">Advanced: Creating a Machine</span></span><br /><br />Just like in the previous tutorials I am streamlining the process. I am providing you will everything you will need.<br /><br />The zip is linked to below.<br /><br /><span style="font-weight: bold">FILE IS NO LONGER AVAILABLE</span><br /><br /><span style="font-weight: bold"><span style="font-size: 134%; line-height: normal">Planning Your Project</span></span><br /><br />The first thing to do is to plan. You need to know what you're trying to accomplish and how to do it.<br /><br />One thing that is necessary is an idea. So here is the point where I am going to trust you...<br /><br />You see, I decided it would be easier to just show you it in action than draw out a bunch of diagrams. This means that everything needed including the script is included in this zip file. Of course in order to learn anything you're going to rename, move, or delete the script after you've seen what we are going to do.<br /><br />So, this means your going to run the map and observe the machine running through its cycle. So...<br /><br />Extract the zip to <span style="font-weight: bold">[Your Doom 3 Directory]\base</span>. Fire up doom, run the map <span style="font-style: italic">rich_scripting_tutorial_3</span>. After it loads and starts up <br />you'll see these crazy robotic arms moving around and doing all kinds of weird nonsense. As you can see, I didn't do a good job of planning. Yeah, I'm not proud of it but it'll work for this tutorial.<br /><br />As you can see, the robotic clasp picks up a canister and the welding gun will meet up with it and fire. Next the clasp will place the canister back and the sequence will repeat with the second canister.<br /><br />Now you should have a pretty good idea what we will be trying to accomplish. But, before we start scripting away I need to give you a good idea how the parts come together to form arms and such.<br /><br />*missing image*<br /><span style="font-weight: bold">http://www.doom3world.org/richard/grabarm.png</span><br /><br />And here are all the parts of the clasp. From here on out we will just refer to this as the grab arm. You should be familiar with it already (Previous tutorial, Hint, Hint).<br /><br />It is also a good idea to come up with a naming convention when we are working with several parts. This will make it easier to tell what is where. I am going to name these parts from the top down.<br /><br />Here are the names for the grab arm components from top to bottom. We will also be forming a child parent tree. The items at the bottom will be parented to the items above it. Now take into consideration that the fingers will all be parented to the finger joint a.k.a. <span style="font-style: italic">$GrabArm_Base3</span>.<br /><br /><span style="font-weight: bold">$GrabArm_Base1<br />$GrabArm_Swivel1<br />$GrabArm_Base2<br />$GrabArm_Swivel2<br />$GrabArm_Base3<br />$GrabArm_Finger1<br />$GrabArm_Finger2<br />$GrabArm_Finger3</span><br /><br />*missing image*<br /><span style="font-weight: bold">http://www.doom3world.org/richard/sparkarm.png</span><br /><br />It's the same deal here. I will name the parts from top to bottom. Again the items at the bottom will be child objects to the items above.<br /><br /><span style="font-weight: bold">$SparkArm_Base1<br />$SparkArm_Swivel1<br />$SparkArm_Base2<br />$SparkArm_Swivel2<br />$SparkArm_Base3<br />$SparkArm_Gun1</span><br /><br />We'll need a name for both canisters as well. We can name them from left to right to keep things simple. You all read from left to right don't you?<br /><br /><span style="font-weight: bold">$Can1<br />$Can2</span><br /><br /><span style="font-weight: bold"><span style="font-size: 134%; line-height: normal">Nutz 'n' Bolts: Screwing around in the Map Editor</span></span><br /><br />After you have planned... umm yeah, you'll fire up the editor and begin putting parts into place. It's not over yet though; you'll still need to run through the motions to figure out where everything goes and what you'll need to make it work.<br /><br />Go ahead and load up <span style="font-style: italic">rich_scripting_tutorial_3.map</span> in the editor. You'll see that the parts are laid out in the editor similar to the diagram below.<br /><br />*missing image*<br /><span style="font-weight: bold">http://www.doom3world.org/richard/layout.png</span><br /><br />Of course in the editor you'll see several entities that are not displayed here. All of these are speakers and particle generators except for three. See if you can find them.<br /><br /><span style="font-weight: bold">Hint:</span> Take a look at the base of the grab arm (where it attaches to the machine) and to the left, directly above each canister.<br /><br />Guess what these are for? Well, the grab arm needs to move to each canister and then back to its original position. These entities act as markers so the arm will know where to go. Basically they are three <span style="font-style: italic">func_statics</span> with the following names.<br /><br /><span style="font-weight: bold">$Can_Pos1<br />$Can_Pos2<br />$Arm_Pos1</span><br /><br />It's pretty straight forward. They're named from left to right again.<br /><br />We aren't interested in the sounds and special effects yet. We need to get this puppy moving before we think about what sounds or special effects to use.<br /><br /><span style="font-weight: bold"><span style="font-size: 134%; line-height: normal">Playing God: Scripting it to Life</span></span><br /><br />This would be the part where you delete, rename, move, or in other words, get rid of the script. Unless you wanna steal my work thief! <img src="https://web.archive.org/web/20121102213149im_/http://www.doom3world.org/phpbb2/images/smilies/icon_razz.gif" alt=":P" title="Razz" /><br /><br />So, start up your favorite text editor editpad... What?! You haven't downloaded editpad yet?! Ah, forget it. Stick to whatever you're using. If you haven't changed yet you never will. Although I was thinking about working on a colored text filter specifically for doom 3 scripting. Oh well.<br /><br />Alright. We are definitely going to need some comments in this code so we don't get all confused.<br /><br />So start out with a simple script like this.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">////////////////////////////////////////////////////<br />//<br />//   Setup binds, etc...<br />//<br />////////////////////////////////////////////////////<br />void setup_objects()<br />{<br /><br />// SparkArm Binds<br /><br />// GrabArm Binds<br /><br />}<br /><br />////////////////////////////////////////////////////<br />//<br />//   Part Movement...<br />//<br />////////////////////////////////////////////////////<br /><br />////////////////////////////////////////////////////<br />//<br />//   MAIN<br />//<br />////////////////////////////////////////////////////<br /><br />void main ()<br />{<br />   setup_objects ();<br />   sys.wait(3);<br />}</div><br /><br />You should already know what's coming next. That's right. We need to setup our binds. Let's take care of the spark arm. You should know where this goes by now.<br /><br /><span style="font-weight: bold">Hint:</span> We are setting up objects right?<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// SparkArm Binds<br /><br />   $SparkArm_Gun1.bind($SparkArm_Base3);<br />   $SparkArm_Base3.bind($SparkArm_Swivel2);<br />   $SparkArm_Swivel2.bind($SparkArm_Base2);<br />   $SparkArm_Base2.bind($SparkArm_Swivel1);<br />   $SparkArm_Swivel1.bind($SparkArm_Base1);</div><br /><br />And from here we setup our binds for the grab arm.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// GrabArm Binds<br /><br />   $GrabArm_Finger1.bind($GrabArm_Base3);<br />   $GrabArm_Finger2.bind($GrabArm_Base3);<br />   $GrabArm_Finger3.bind($GrabArm_Base3);<br />   $GrabArm_Base3.bind($GrabArm_Swivel2);<br />   $GrabArm_Swivel2.bind($GrabArm_Base2);<br />   $GrabArm_Base2.bind($GrabArm_Swivel1);<br />   $GrabArm_Swivel1.bind($GrabArm_Base1);</div><br /><br />Now, we are ready to move some stuff. Let's setup a motion for the grab arm first since it's the more difficult of the two.<br /><br />We aren't interested in covering the entire motion at first. In fact, we will only write enough code to grasp the first canister and move it into position. We are breaking the cycle into each component. (Remember talking about that from the first tutorial?)<br /><br />First we will give this motion a name. Hmmm?. <span style="font-style: italic">GrabCanister</span> sounds good. (Pretty self explanatory huh?)<br /><br />So let's make a function like this.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void GrabCanister()<br />{<br />}</div><br /><br />Now, I'll explain what needs to happen on each line and you type up the code.<br /><br />Move <span style="font-style: italic">GrabArm_Base1</span> to <span style="font-style: italic">Can_Pos1</span>.<br />Wait for <span style="font-style: italic">GrabArm_Base1</span> to finish it's movement.<br />Rotate <span style="font-style: italic">GrabArm_Finger1</span> once 45 degrees on the X axis.<br />Rotate <span style="font-style: italic">GrabArm_Finger2</span> once 45 degrees on the X axis.<br />Rotate <span style="font-style: italic">GrabArm_Finger3</span> once 45 degrees on the X axis.<br />Move <span style="font-style: italic">Can1</span> up 30.<br />Wait for <span style="font-style: italic">Can1</span> to finish it's movement.<br />Rotate <span style="font-style: italic">GrabArm_Finger1</span> once -35 degrees on the X axis.<br />Rotate <span style="font-style: italic">GrabArm_Finger2</span> once -35 degrees on the X axis.<br />Rotate <span style="font-style: italic">GrabArm_Finger3</span> once -35 degrees on the X axis.<br />Wait for <span style="font-style: italic">Finger1</span> to finish it's movement. All three fingers should finish at the same time.<br />Bind <span style="font-style: italic">Can1</span> to <span style="font-style: italic">GrabArm_Base3</span>.<br />Rotate <span style="font-style: italic">GrabArm_Base3</span> once 360 degrees on the Y axis.<br />Wait for <span style="font-style: italic">GrabArm_Base3</span> to finish it's movement.<br />Rotate <span style="font-style: italic">GrabArm_Base2</span> once 90 degrees on the Y axis.<br />Wait for <span style="font-style: italic">GrabArm_Base2</span> to finish it's movement.<br />Rotate <span style="font-style: italic">GrabArm_Swivel2</span> once 90 degrees on the X axis.<br />Wait for <span style="font-style: italic">GrabArm_Swivel2</span> to finish it's movement.<br />Move <span style="font-style: italic">GrabArm_Base1</span> to <span style="font-style: italic">Arm_Pos1</span>.<br />Rotate <span style="font-style: italic">GrabArm_Base2</span> once -90 on the Y axis.<br />Wait for <span style="font-style: italic">GrabArm_Base2</span> to finish it's movement.<br /><br />Now here is the code below. Yeah you could've just cheated and copied and pasted from below. But that's really lame. <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void GrabCanister()<br />{<br />   $GrabArm_Base1.moveTo($Can_Pos1);<br />   sys.waitFor($GrabArm_Base1);<br />   $GrabArm_Finger1.rotateOnce('45 0 0');<br />   $GrabArm_Finger2.rotateOnce('45 0 0');<br />   $GrabArm_Finger3.rotateOnce('45 0 0');<br />   Can1.move(UP, 30);<br />   sys.waitFor($Can1);<br />   $GrabArm_Finger1.rotateOnce('-35 0 0');<br />   $GrabArm_Finger2.rotateOnce('-35 0 0');<br />   $GrabArm_Finger3.rotateOnce('-35 0 0');<br />   sys.waitFor($GrabArm_Finger1);<br />   Can1.bind($GrabArm_Base3);<br />   $GrabArm_Base3.rotateOnce('0 360 0');<br />   sys.waitFor($GrabArm_Base3);<br />   $GrabArm_Base2.rotateOnce('0 90 0');<br />   sys.waitFor($GrabArm_Base2);<br />   $GrabArm_Swivel2.rotateOnce('90 0 0');<br />   sys.waitFor($GrabArm_Swivel2);<br />   $GrabArm_Base1.moveTo($Arm_Pos1);<br />   $GrabArm_Base2.rotateOnce('0 -90 0');<br />   sys.waitFor($GrabArm_Base2);<br />}</div><br /><br />Now add this function to the main function like this.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void main ()<br />{<br />   setup_objects ();<br />   sys.wait(3);<br />   GrabCanister();<br />}</div><br /><br />Save your script as <span style="font-style: italic">rich_scripting_tutorial_3.script</span> and fire up the map. You've got a <br />mechanical arm picking up a canister.<br /><br />You know what is really interesting? When it picks up the other canister it pretty much runs through the same set of motions doesn't it? Wouldn't it save you a lot of trouble if you could just call the same function to pick up the other canister? But how?<br /><br /><br />This is where we bring parameters into the equation. You see, every function has a set of parentheses appended to the end of it. You can pass objects to the functions by placing the object's names within these parentheses. All you have to do is change the function slightly.<br /><br />Let's see what objects will change in the <span style="font-style: italic">GrabCanister</span> function when I am picking up the second canister? Hmmm? Just two, <span style="font-style: italic">Can1</span> and <span style="font-style: italic">Can_Pos1</span>. Everything else remains the same.<br /><br />We will need to create alias names for the objects that change. These are called reference variables. We cannot use the names <span style="font-style: italic">Can1, Can2, Can_Pos1</span>, or <span style="font-style: italic">Can_Pos2</span> in the function in order for this to work. We need to use these reference variables as aliases for the objects that are passed to the function instead. In the function we will use the names <span style="font-style: italic">Can</span> and <span style="font-style: italic">CanPos</span>.<br /><br />When we call this modified form of the <span style="font-style: italic">GrabCanister</span> function it will look like this when we pass <span style="font-style: italic">Can1</span> and <span style="font-style: italic">Can_Pos1</span>.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">GrabCanister($Can_Pos1, $Can1);</div><br /><br />Or when we pass <span style="font-style: italic">Can2</span> and <span style="font-style: italic">Can_Pos2</span> it will look like this.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">GrabCanister($Can_Pos2, $Can2);</div><br /><br />And when we declare our function we will now change the line to look like this.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void GrabCanister(entity CanPos, entity Can)<br />{</div><br /><br />Notice that I defined the type of variables by using the keyword entity. This is because we are passing entity names to these reference variables.<br /><br />And to modify the code of the function we will replace every <span style="font-style: italic">Can1</span> with <span style="font-style: italic">Can</span> and every <span style="font-style: italic">Can_Pos1</span> with <span style="font-style: italic">CanPos</span>. The code should look like this.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void GrabCanister(entity CanPos, entity Can)<br />{<br />   $GrabArm_Base1.moveTo(CanPos);<br />   sys.waitFor($GrabArm_Base1);<br />   $GrabArm_Finger1.rotateOnce('45 0 0');<br />   $GrabArm_Finger2.rotateOnce('45 0 0');<br />   $GrabArm_Finger3.rotateOnce('45 0 0');<br />   Can.move(UP, 30);<br />   sys.waitFor(Can);<br />   $GrabArm_Finger1.rotateOnce('-35 0 0');<br />   $GrabArm_Finger2.rotateOnce('-35 0 0');<br />   $GrabArm_Finger3.rotateOnce('-35 0 0');<br />   sys.waitFor($GrabArm_Finger1);<br />   Can.bind($GrabArm_Base3);<br />   $GrabArm_Base3.rotateOnce('0 360 0');<br />   sys.waitFor($GrabArm_Base3);<br />   $GrabArm_Base2.rotateOnce('0 90 0');<br />   sys.waitFor($GrabArm_Base2);<br />   $GrabArm_Swivel2.rotateOnce('90 0 0');<br />   sys.waitFor($GrabArm_Swivel2);<br />   $GrabArm_Base1.moveTo($Arm_Pos1);<br />   $GrabArm_Base2.rotateOnce('0 -90 0');<br />   sys.waitFor($GrabArm_Base2);<br />}</div><br /><br />And now in the main function I will change the call to <span style="font-style: italic">GrabCanister</span> to look like this.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void main ()<br />{<br />   setup_objects ();<br />   sys.wait(3);<br />   GrabCanister($Can_Pos2, $Can2);<br />}</div><br /><br />Save your script and fire up the map. Now we are looking at some impressive stuff. Here you are reusing the same code to move a completely different canister.So from here we can make a function to move the place the canister back. We'll call it simply <span style="font-style: italic">PlaceCanister</span>.<br /><br />Basically we are doing what we did above backwards. So here is the code.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void PlaceCanister(entity CanPos, entity Can)<br />{<br />   $GrabArm_Base2.rotateOnce('0 90 0');<br />   $GrabArm_Base1.moveTo(CanPos);<br />   sys.waitFor($GrabArm_Base2);<br />   $GrabArm_Swivel2.rotateOnce('-90 0 0');<br />   sys.waitFor($GrabArm_Swivel2);<br />   $GrabArm_Base3.rotateOnce('0 -360 0');<br />   sys.waitFor($GrabArm_Base3);<br />   Can.unbind();<br />   $GrabArm_Finger1.rotateOnce('35 0 0');<br />   $GrabArm_Finger2.rotateOnce('35 0 0');<br />   $GrabArm_Finger3.rotateOnce('35 0 0');<br /><br />   sys.waitFor($GrabArm_Finger1);<br />   Can.rotateTo('0 0 0');<br />   Can.move(DOWN, 30);<br />   sys.waitFor(Can);<br />   $GrabArm_Finger1.rotateOnce('-45 0 0');<br />   $GrabArm_Finger2.rotateOnce('-45 0 0');<br />   $GrabArm_Finger3.rotateOnce('-45 0 0');<br />   $GrabArm_Base1.moveTo($Arm_Pos1);<br />   $GrabArm_Base2.rotateTo('0 0 0');<br />   sys.waitFor($GrabArm_Base1);<br />}</div><br /><br />There are two lines I do want you to take note of though. Notice in this function the <span style="font-style: italic">unbind</span> command. This is because I want to detach the canister from the mechanical arm rather than bind it. Also notice how I am not placing anything in the parentheses. This is because you can only bind an object to one other object at a time. So there is no need to tell the engine what to detach the canister from. There is only one possible object it could be detached from in the first place.<br /><br />The second line to look at is this line...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">$GrabArm_Base2.rotateTo('0 0 0');</div><br /><br />The <span style="font-style: italic">rotateTo</span> command is used here to ensure that GrabArm_Base2 is positioned the same as it was when the map first loaded. Without this command the base of the arm would start bending in the wrong direction. Go ahead and comment it out and give it a test run if you're curious.<br /><br />Now we throw a call to <span style="font-style: italic">PlaceCanister</span> immediately following the call to <span style="font-style: italic">GrabCanister</span>.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void main ()<br />{<br />   setup_objects ();<br />   sys.wait(3);<br />   GrabCanister($Can_Pos2, $Can2);<br />   PlaceCanister($Can_Pos2, $Can2);<br />}</div><br /><br />Save the script and start up the map. It will now grab the second canister and place it back. Go ahead and add another call to both <span style="font-style: italic">GrabCanister</span> and <span style="font-style: italic">PlaceCanister</span> each pointing to the first canister instead. It should look like this.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void main ()<br />{<br />   setup_objects ();<br />   sys.wait(3);<br />   GrabCanister($Can_Pos2, $Can2);<br />   PlaceCanister($Can_Pos2, $Can2);<br />   GrabCanister($Can_Pos1, $Can1);<br />   PlaceCanister($Can_Pos1, $Can1);<br />}</div><br /><br />Same deal. Save and start the map. Now it will grab the second canister, place it back, and then do the same with the first canister. Neat huh?<br /><br />Now we just need to code a function to move the spark gun into position. We'll call this PosPiecesToFire. Why the crazy name? Well later we will call the spark effects function from within this function. So basically this function will <span style="font-style: italic">position the pieces and then fire</span>. Make sense now?<br /><br />This function is pretty simple compared to the previous one. We won't be passing objects to it and its movement is simple. So here's your code.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void PosPiecesToFire ()<br />{<br />   $SparkArm_Swivel2.rotateOnce('-90 0 0');<br />   sys.waitFor($SparkArm_Swivel2);<br />   $SparkArm_Gun1.rotateOnce('-5 0 0');<br />   sys.waitFor($SparkArm_Gun1);<br />   $SparkArm_Base3.rotateOnce('0 120 0');<br />   sys.waitFor($SparkArm_Base3);<br />   $SparkArm_Base3.rotateOnce('0 120 0');<br />   sys.waitFor($SparkArm_Base3);<br />   $SparkArm_Base3.rotateOnce('0 120 0');<br />   $SparkArm_Gun1.rotateOnce('5 0 0');<br />   $SparkArm_Swivel2.rotateOnce('90 0 0');<br />   $SparkArm_Base3.rotateTo('0 0 0');<br />   sys.waitFor($SparkArm_Swivel2);<br />}</div><br /><br />Now change the main function to look like this.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void main ()<br />{<br />   setup_objects ();<br />   sys.wait(3);<br />   GrabCanister($Can_Pos2, $Can2);<br />   PosPiecesToFire();<br />   PlaceCanister($Can_Pos2, $Can2);<br />   GrabCanister($Can_Pos1, $Can1);<br />   PosPiecesToFire();<br />   PlaceCanister($Can_Pos1, $Can1);<br />}</div><br /><br />Again, save the script and start up the map. Now each arm does its own thing.<br /><br />Let's change something real quick. I mean we don't want this to happen once and stop right?<br /><br />We're going to create a function called <span style="font-style: italic">MechCycle</span> that will execute forever and a day. Basically we will cut the machine movement code from main and paste it. <br /><br />Then we'll place that code in a while loop. It should look like this.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void MechCycle ()<br />{<br />   while (1) {<br />      GrabCanister($Can_Pos1, $Can1, $Can1_TubeSnd);<br />      PosPiecesToFire();<br />      PlaceCanister($Can_Pos1, $Can1, $Can1_TubeSnd);<br />      GrabCanister($Can_Pos2, $Can2, $Can2_TubeSnd);<br />      PosPiecesToFire();<br />      PlaceCanister($Can_Pos2, $Can2, $Can2_TubeSnd);<br />   }<br />}</div><br /><br />Now, we just throw a call in <span style="font-style: italic">main</span> so it looks like this.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void main ()<br />{<br />   setup_objects ();<br />   sys.wait(3);<br />   MechCycle();<br />}</div><br /><br />Save the script and run the map. Now the machine runs continuously.<br /><br /><span style="font-weight: bold"><span style="font-size: 134%; line-height: normal">Adding Bells, Whistles and a Light</span></span><br /><br />Here is the fun part. Everything is already moving all you got to do is make it pretty. Well, I suppose it isn't going to look too pretty unless I went through the trouble of texturing my objects in the first place. Ahhh, whatever. I'm still learning modeling anyway.<br /><br />Technically this part is so simple it really isn't worth documenting but hey, I'm trying to cover it all right?<br /><br />Now, I'm no expert at sound type stuff and I tried really hard to find sounds that matched the action. But hey, in all honesty you should probably be creating new sounds for your work anyway. I decided I would need eight speakers. Two upward hydraulic pump sounds, one for each arm. Two downward hydraulic pump sounds again, one for each arm. Two steam type sounds for each canister being released. A spark gun sound and finally some form of ambient mechanical hum.<br /><br />The ambient sound loops and the remaining sounds are all setup to sound when triggered by setting a key called <span style="font-style: italic">s_waitfortrigger</span> to 1. Here are the names of the sounds that need scripting.<br /><br /><span style="font-weight: bold">$SparkArm_JointUp<br />$SparkArm_JointDown<br />$SparkArm_Snd1<br />$GrabArm_JointUp<br />$GrabArm_JointDown<br />$Can1_TubeSnd<br />$Can2_TubeSnd</span><br /><br /><br />Now because the spark arm doesn't move a significant amount the joint sounds don't need to be bound. Neither do the canister tube sounds. However, since the grab arm and the spark arm move a pretty good distance we'll bind their speakers to the moving entities.<br /><br />Don't worry about the binds yet though, We'll be knocking out the sounds as well as lighting and special effects all at once.<br /><br />Triggering a sound is pretty simple. Really all you have to do is perform a sys.trigger(<span style="font-style: italic">insert speaker name here</span>) whenever you want that particular sound to fire. There is no need to clutter your map with actual trigger entities.<br /><br />Now for the spark gun. I created a <span style="font-style: italic">func_fx</span>, brought up the entities properties, set the <span style="font-style: italic">fx</span> key to <span style="font-style: italic">fx/sparks.fx</span>, and set the restart key to 1 so that I can trigger this effect multiple times.<br /><br />Next I created a light and set the key <span style="font-style: italic">startoff</span> to 1. I set the shader to <span style="font-style: italic">lights/roundfire</span>.<br /><br />Again, both the light and the <span style="font-style: italic">func_fx</span> are triggered using the command sys.trigger(<span style="font-style: italic">insert light or func_fx name here</span>).<br /><br />Here is the name of the light and <span style="font-style: italic">func_fx</span>...<br /><br /><span style="font-weight: bold">$SparkArm_Light1<br />$SparkArm_Fx1</span><br /><br />So, change your binds to look like this.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void setup_objects()<br />{<br /><br />// SparkArm Binds<br /><br />   $SparkArm_Fx1.bind($SparkArm_Gun1);<br />   $SparkArm_Light1.bind($SparkArm_Gun1);<br />   $SparkArm_Snd1.bind($SparkArm_Gun1);<br />   $SparkArm_Gun1.bind($SparkArm_Base3);<br />   $SparkArm_Base3.bind($SparkArm_Swivel2);<br />   $SparkArm_Swivel2.bind($SparkArm_Base2);<br />   $SparkArm_Base2.bind($SparkArm_Swivel1);<br />   $SparkArm_Swivel1.bind($SparkArm_Base1);         <br /><br />// GrabArm Binds<br /><br />   $GrabArm_Finger1.bind($GrabArm_Base3);<br />   $GrabArm_Finger2.bind($GrabArm_Base3);<br />   $GrabArm_Finger3.bind($GrabArm_Base3);<br />   $GrabArm_Base3.bind($GrabArm_Swivel2);<br />   $GrabArm_Swivel2.bind($GrabArm_Base2);<br />   $GrabArm_Base2.bind($GrabArm_Swivel1);<br />   $GrabArm_Swivel1.bind($GrabArm_Base1);<br />   $GrabArm_JointUp.bind($GrabArm_Swivel2);<br />   $GrabArm_JointDown.bind($GrabArm_Swivel2);<br />}</div><br /><br />Add the function <span style="font-style: italic">FireSparkGun</span>. Give it the following code.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void FireSparkGun ()<br />{<br />   sys.trigger($SparkArm_Fx1);<br />   sys.trigger($SparkArm_Snd1);<br />   sys.trigger($SparkArm_Light1);<br />   sys.wait(3);<br />   sys.trigger($SparkArm_Light1);<br />}</div><br /><br />And add another entity reference to <span style="font-style: italic">GrabCanister</span> and <span style="font-style: italic">PlaceCanister</span> for the canister tube sound to be triggered. We'll call it <span style="font-style: italic">CanTubeSnd</span>.<br /><br />Then it's just a matter of finding the right line to insert your sound triggers into. I'll save you the trouble. Here's the code.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void GrabCanister(entity CanPos, entity Can, entity CanTubeSnd)<br />{<br />   $GrabArm_Base1.moveTo(CanPos);<br />   sys.trigger($GrabArm_JointUp);<br />   sys.waitFor($GrabArm_Base1);<br />   $GrabArm_Finger1.rotateOnce('45 0 0');<br />   $GrabArm_Finger2.rotateOnce('45 0 0');<br />   $GrabArm_Finger3.rotateOnce('45 0 0');<br />   sys.trigger($GrabArm_JointUp);<br />   Can.move(UP, 30);<br />   sys.trigger(CanTubeSnd);<br />   sys.waitFor(Can);<br />   $GrabArm_Finger1.rotateOnce('-35 0 0');<br />   $GrabArm_Finger2.rotateOnce('-35 0 0');<br />   $GrabArm_Finger3.rotateOnce('-35 0 0');<br />   sys.trigger($GrabArm_JointDown);<br />   sys.waitFor($GrabArm_Finger1);<br />   Can.bind($GrabArm_Base3);<br />   $GrabArm_Base3.rotateOnce('0 360 0');<br />   sys.trigger($GrabArm_JointUp);<br />   sys.waitFor($GrabArm_Base3);<br />   $GrabArm_Base2.rotateOnce('0 90 0');<br />   sys.trigger($GrabArm_JointDown);<br />   sys.waitFor($GrabArm_Base2);<br />   $GrabArm_Swivel2.rotateOnce('90 0 0');<br />   sys.trigger($GrabArm_JointUp);<br />   sys.waitFor($GrabArm_Swivel2);<br />   $GrabArm_Base1.moveTo($Arm_Pos1);<br />   $GrabArm_Base2.rotateOnce('0 -90 0');<br />   sys.trigger($GrabArm_JointUp);<br />   sys.trigger($GrabArm_JointDown);<br />   sys.waitFor($GrabArm_Base2);<br />}<br /><br />void PlaceCanister(entity CanPos, entity Can, entity CanTubeSnd)<br />{<br />   $GrabArm_Base2.rotateOnce('0 90 0');<br />   sys.trigger($GrabArm_JointUp);<br />   $GrabArm_Base1.moveTo(CanPos);<br />   sys.waitFor($GrabArm_Base2);<br />   $GrabArm_Swivel2.rotateOnce('-90 0 0');<br />   sys.trigger($GrabArm_JointDown);<br />   sys.waitFor($GrabArm_Swivel2);<br />   $GrabArm_Base3.rotateOnce('0 -360 0');<br />   sys.trigger($GrabArm_JointDown);<br />   sys.waitFor($GrabArm_Base3);<br />   Can.unbind();<br />   $GrabArm_Finger1.rotateOnce('35 0 0');<br />   $GrabArm_Finger2.rotateOnce('35 0 0');<br />   $GrabArm_Finger3.rotateOnce('35 0 0');<br />   sys.trigger($GrabArm_JointUp);<br />   sys.waitFor($GrabArm_Finger1);<br />   Can.rotateTo('0 0 0');<br />   Can.move(DOWN, 30);<br />   sys.trigger(CanTubeSnd);<br />   sys.waitFor(Can);<br />   $GrabArm_Finger1.rotateOnce('-45 0 0');<br />   $GrabArm_Finger2.rotateOnce('-45 0 0');<br />   $GrabArm_Finger3.rotateOnce('-45 0 0');<br />   $GrabArm_Base1.moveTo($Arm_Pos1);<br />   $GrabArm_Base2.rotateTo('0 0 0');<br />   sys.trigger($GrabArm_JointUp);<br />   sys.trigger($GrabArm_JointDown);<br />   sys.waitFor($GrabArm_Base1);<br />}</div><br /><br />Next we'll modify <span style="font-style: italic">PosPiecesToFire</span> so it calls <span style="font-style: italic">FireSparkGun</span> and triggers its own speakers. Again here's the code.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void PosPiecesToFire ()<br />{<br />   $SparkArm_Swivel2.rotateOnce('-90 0 0');<br />   sys.trigger($SparkArm_JointUp);<br />   sys.waitFor($SparkArm_Swivel2);<br />   $SparkArm_Gun1.rotateOnce('-5 0 0');<br />   sys.trigger($SparkArm_JointUp);<br />   sys.waitFor($SparkArm_Gun1);<br />   FireSparkGun();<br />   $SparkArm_Base3.rotateOnce('0 120 0');<br />   sys.trigger($SparkArm_JointDown);<br />   sys.waitFor($SparkArm_Base3);<br />   FireSparkGun();<br />   $SparkArm_Base3.rotateOnce('0 120 0');<br />   sys.trigger($SparkArm_JointDown);<br />   sys.waitFor($SparkArm_Base3);<br />   FireSparkGun();<br />   $SparkArm_Base3.rotateOnce('0 120 0');<br />   sys.trigger($SparkArm_JointDown);<br />   $SparkArm_Gun1.rotateOnce('5 0 0');<br />   sys.trigger($SparkArm_JointDown);<br />   $SparkArm_Swivel2.rotateOnce('90 0 0');<br />   sys.trigger($SparkArm_JointDown);<br />   $SparkArm_Base3.rotateTo('0 0 0');<br />   sys.waitFor($SparkArm_Swivel2);<br />}</div><br /><br />Finally, we'll modify <span style="font-style: italic">MechCycle</span> to compensate for the new reference variable <span style="font-style: italic">CanTubeSnd</span>. Here's the code.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void MechCycle ()<br />{<br />   while (1) {<br />      GrabCanister($Can_Pos1, $Can1, $Can1_TubeSnd);<br />      PosPiecesToFire();<br />      PlaceCanister($Can_Pos1, $Can1, $Can1_TubeSnd);<br />      GrabCanister($Can_Pos2, $Can2, $Can2_TubeSnd);<br />      PosPiecesToFire();<br />      PlaceCanister($Can_Pos2, $Can2, $Can2_TubeSnd);<br />   }<br />}</div><br /><br />And just to make you have to scroll down for an hour here is your final script. <br /><br />Man its long isn't it?<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">////////////////////////////////////////////////////<br />//<br />//   Setup binds and times etc...<br />//<br />////////////////////////////////////////////////////<br />void setup_objects()<br />{<br /><br />// SparkArm Binds<br /><br />   $SparkArm_Fx1.bind($SparkArm_Gun1);<br />   $SparkArm_Light1.bind($SparkArm_Gun1);<br />   $SparkArm_Snd1.bind($SparkArm_Gun1);<br />   $SparkArm_Gun1.bind($SparkArm_Base3);<br />   $SparkArm_Base3.bind($SparkArm_Swivel2);<br />   $SparkArm_Swivel2.bind($SparkArm_Base2);<br />   $SparkArm_Base2.bind($SparkArm_Swivel1);<br />   $SparkArm_Swivel1.bind($SparkArm_Base1);         <br /><br />// GrabArm Binds<br /><br />   $GrabArm_Finger1.bind($GrabArm_Base3);<br />   $GrabArm_Finger2.bind($GrabArm_Base3);<br />   $GrabArm_Finger3.bind($GrabArm_Base3);<br />   $GrabArm_Base3.bind($GrabArm_Swivel2);<br />   $GrabArm_Swivel2.bind($GrabArm_Base2);<br />   $GrabArm_Base2.bind($GrabArm_Swivel1);<br />   $GrabArm_Swivel1.bind($GrabArm_Base1);<br />   $GrabArm_JointUp.bind($GrabArm_Swivel2);<br />   $GrabArm_JointDown.bind($GrabArm_Swivel2);<br />}<br /><br />////////////////////////////////////////////////////<br />//<br />//   Block movement... <br />//<br />////////////////////////////////////////////////////<br /><br />void FireSparkGun ()<br />{<br />   sys.trigger($SparkArm_Fx1);<br />   sys.trigger($SparkArm_Snd1);<br />   sys.trigger($SparkArm_Light1);<br />   sys.wait(3);<br />   sys.trigger($SparkArm_Light1);<br />}<br /><br />void GrabCanister(entity CanPos, entity Can, entity CanTubeSnd)<br />{<br />   $GrabArm_Base1.moveTo(CanPos);<br />   sys.trigger($GrabArm_JointUp);<br />   sys.waitFor($GrabArm_Base1);<br />   $GrabArm_Finger1.rotateOnce('45 0 0');<br />   $GrabArm_Finger2.rotateOnce('45 0 0');<br />   $GrabArm_Finger3.rotateOnce('45 0 0');<br />   sys.trigger($GrabArm_JointUp);<br />   Can.move(UP, 30);<br />   sys.trigger(CanTubeSnd);<br />   sys.waitFor(Can);<br />   $GrabArm_Finger1.rotateOnce('-35 0 0');<br />   $GrabArm_Finger2.rotateOnce('-35 0 0');<br />   $GrabArm_Finger3.rotateOnce('-35 0 0');<br />   sys.trigger($GrabArm_JointDown);<br />   sys.waitFor($GrabArm_Finger1);<br />   Can.bind($GrabArm_Base3);<br />   $GrabArm_Base3.rotateOnce('0 360 0');<br />   sys.trigger($GrabArm_JointUp);<br />   sys.waitFor($GrabArm_Base3);<br />   $GrabArm_Base2.rotateOnce('0 90 0');<br />   sys.trigger($GrabArm_JointDown);<br />   sys.waitFor($GrabArm_Base2);<br />   $GrabArm_Swivel2.rotateOnce('90 0 0');<br />   sys.trigger($GrabArm_JointUp);<br />   sys.waitFor($GrabArm_Swivel2);<br />   $GrabArm_Base1.moveTo($Arm_Pos1);<br />   $GrabArm_Base2.rotateOnce('0 -90 0');<br />   sys.trigger($GrabArm_JointUp);<br />   sys.trigger($GrabArm_JointDown);<br />   sys.waitFor($GrabArm_Base2);<br />}<br /><br />void PlaceCanister(entity CanPos, entity Can, entity CanTubeSnd)<br />{<br />   $GrabArm_Base2.rotateOnce('0 90 0');<br />   sys.trigger($GrabArm_JointUp);<br />   $GrabArm_Base1.moveTo(CanPos);<br />   sys.waitFor($GrabArm_Base2);<br />   $GrabArm_Swivel2.rotateOnce('-90 0 0');<br />   sys.trigger($GrabArm_JointDown);<br />   sys.waitFor($GrabArm_Swivel2);<br />   $GrabArm_Base3.rotateOnce('0 -360 0');<br />   sys.trigger($GrabArm_JointDown);<br />   sys.waitFor($GrabArm_Base3);<br />   Can.unbind();<br />   $GrabArm_Finger1.rotateOnce('35 0 0');<br />   $GrabArm_Finger2.rotateOnce('35 0 0');<br />   $GrabArm_Finger3.rotateOnce('35 0 0');<br />   sys.trigger($GrabArm_JointUp);<br />   sys.waitFor($GrabArm_Finger1);<br />   Can.rotateTo('0 0 0');<br />   Can.move(DOWN, 30);<br />   sys.trigger(CanTubeSnd);<br />   sys.waitFor(Can);<br />   $GrabArm_Finger1.rotateOnce('-45 0 0');<br />   $GrabArm_Finger2.rotateOnce('-45 0 0');<br />   $GrabArm_Finger3.rotateOnce('-45 0 0');<br />   $GrabArm_Base1.moveTo($Arm_Pos1);<br />   $GrabArm_Base2.rotateTo('0 0 0');<br />   sys.trigger($GrabArm_JointUp);<br />   sys.trigger($GrabArm_JointDown);<br />   sys.waitFor($GrabArm_Base1);<br />}<br /><br />void PosPiecesToFire ()<br />{<br />   $SparkArm_Swivel2.rotateOnce('-90 0 0');<br />   sys.trigger($SparkArm_JointUp);<br />   sys.waitFor($SparkArm_Swivel2);<br />   $SparkArm_Gun1.rotateOnce('-5 0 0');<br />   sys.trigger($SparkArm_JointUp);<br />   sys.waitFor($SparkArm_Gun1);<br />   FireSparkGun();<br />   $SparkArm_Base3.rotateOnce('0 120 0');<br />   sys.trigger($SparkArm_JointDown);<br />   sys.waitFor($SparkArm_Base3);<br />   FireSparkGun();<br />   $SparkArm_Base3.rotateOnce('0 120 0');<br />   sys.trigger($SparkArm_JointDown);<br />   sys.waitFor($SparkArm_Base3);<br />   FireSparkGun();<br />   $SparkArm_Base3.rotateOnce('0 120 0');<br />   sys.trigger($SparkArm_JointDown);<br />   $SparkArm_Gun1.rotateOnce('5 0 0');<br />   sys.trigger($SparkArm_JointDown);<br />   $SparkArm_Swivel2.rotateOnce('90 0 0');<br />   sys.trigger($SparkArm_JointDown);<br />   $SparkArm_Base3.rotateTo('0 0 0');<br />   sys.waitFor($SparkArm_Swivel2);<br />}<br /><br />void MechCycle ()<br />{<br />   while (1) {<br />      GrabCanister($Can_Pos1, $Can1, $Can1_TubeSnd);<br />      PosPiecesToFire();<br />      PlaceCanister($Can_Pos1, $Can1, $Can1_TubeSnd);<br />      GrabCanister($Can_Pos2, $Can2, $Can2_TubeSnd);<br />      PosPiecesToFire();<br />      PlaceCanister($Can_Pos2, $Can2, $Can2_TubeSnd);<br />   }<br />}<br /><br /><br />////////////////////////////////////////////////////<br />//<br />//   MAIN<br />//<br />////////////////////////////////////////////////////<br /><br />void main ()<br />{<br />   setup_objects ();<br />   sys.wait(3);<br />   MechCycle();<br />}</div><br /><br />Now you save your script and run the map. Ta Da! Here is the exact same script you started with... Ahem.. I mean look! All that hard work paid off!<br /><br /><span style="font-weight: bold"><span style="font-size: 134%; line-height: normal">Conclusion</span></span><br /><br />That pretty much sums up what I know of scripting as a whole. I'm hoping that some of you out there will be on my level soon and we can start tackling ideas together. If not, run over this tutorial a couple of times. You should get it.<br /><br />Got any questions? Ask them.</div>]]></body></post><post id="p30954" date="Posted: Mon Aug 09, 2004 1:26 am "><author>iceheart</author><body><![CDATA[<div class="postbody">Very nice <img src="https://web.archive.org/web/20121102213149im_/http://www.doom3world.org/phpbb2/images/smilies/icon_smile.gif" alt=":)" title="Smile" />, Shouldn't your models be casting shadows? Also they are completely black.</div>]]></body></post><post id="p31007" date="Posted: Mon Aug 09, 2004 2:39 am "><author>rich_is_bored</author><body><![CDATA[<div class="postbody">If they are completely black then that means the material shader isn't working. And if the material shader isn't working that explains why there are no shadows.
<br /><br />Did you extract the zip to the base folder?
<br /><br />When the files extract they should go in the following locations...
<br /><br /><span style="font-weight: bold">[your doom 3 directory]</span>\base\maps\
<br /><br />rich_scripting_tutorial_3.cm
<br />rich_scripting_tutorial_3.map
<br />rich_scripting_tutorial_3.proc
<br />rich_scripting_tutorial_3.script
<br /><br /><span style="font-weight: bold">[your doom 3 directory]</span>\base\materials\
<br /><br />rich_scripting_tutorials.mtr
<br /><br /><span style="font-weight: bold">[your doom 3 directory]</span>\base\models\
<br /><br />rich_scripting_tutorials_arm_base.lwo
<br />rich_scripting_tutorials_arm_shaft.lwo
<br />rich_scripting_tutorials_canister.lwo
<br />rich_scripting_tutorials_finger.lwo
<br />rich_scripting_tutorials_finger_joint.lwo
<br />rich_scripting_tutorials_grey.tga
<br />rich_scripting_tutorials_welder.lwo
<br /><br />If the tga or mtr are in the wrong location that would explain the problem.
<br /><br />You didn't mention anything beside graphical issues so I assume everything else is in the correct location.
<br /><br />If anyone else can confirm that it works, doesn't work when you extract it to the base folder I'd appriciate it.
<br /><br />It works on my end but that doesn't really help because I made the damn thing. <img src="https://web.archive.org/web/20121102213149im_/http://www.doom3world.org/phpbb2/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /></div>]]></body></post><post id="p31388" date="Posted: Mon Aug 09, 2004 4:10 pm "><author>iceheart</author><body><![CDATA[<div class="postbody">Nope, everything is where it's supposed to be here, unzipped into the base folder, I double checked all the indvidual subfolders and it looks proper. The only thing I can think of is that I have unpacked all my pak files as well in order to explore the file structure, so that might create some conflicts. And yes, everything else (map, script) works fine.</div>]]></body></post><post id="p31407" date="Posted: Mon Aug 09, 2004 4:41 pm "><author>iceheart</author><body><![CDATA[<div class="postbody">Your .mtr file looks a little odd, pointing to stuff like /tutorials/Canister and stuff like that, but altering it using my extremely limited understanding of mtr files to this:
<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">models/rich_scripting_tutorials_canister<br />{<br />   diffusemap    models/rich_scripting_tutorials_grey.tga<br />}</div>
<br /><br />etc.
<br /><br />Gives absolutely no difference (still black, no shadows)</div>]]></body></post><post id="p31459" date="Posted: Mon Aug 09, 2004 6:18 pm "><author>rich_is_bored</author><body><![CDATA[<div class="postbody">Ah! It's because you unpaked your pk4s. When you do that it causes a conflict with new content.
<br /><br />It's best if you want to look at the files within the PK4s that you extract them to a separate directory.</div>]]></body></post><post id="p31471" date="Posted: Mon Aug 09, 2004 6:31 pm "><author>iceheart</author><body><![CDATA[<div class="postbody">What, exactly is it that conflicts with what here?</div>]]></body></post><post id="p31484" date="Posted: Mon Aug 09, 2004 6:43 pm "><author>rich_is_bored</author><body><![CDATA[<div class="postbody">In other words, when you extracted Doom 3's pk4s into your base directory you disabled your ability to load custom content. When Doom 3 loads it sees all the files you extracted in their appropriate directories and begins to load them as a mod, even though it's just the game's vanilla content.
<br /><br />Obviously if the map and models from the tutorial load but they don't display a texture then doom 3's being rather quirky as to what will work and what won't.
<br /><br />What I will tell you is that it works without the pk4s extracted and I don't plan on unpacking my pk4's and testing my tutorials with them just so you can "have it your way". To put it frankly, this ain't Burger King.</div>]]></body></post><post id="p31486" date="Posted: Mon Aug 09, 2004 6:45 pm "><author>iceheart</author><body><![CDATA[<div class="postbody">Hey I'm being curious here, not hostile <img src="https://web.archive.org/web/20121102213149im_/http://www.doom3world.org/phpbb2/images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div>]]></body></post><post id="p31487" date="Posted: Mon Aug 09, 2004 6:47 pm "><author>rich_is_bored</author><body><![CDATA[<div class="postbody">No hostility intended. I'm just telling it like it is. <img src="https://web.archive.org/web/20121102213149im_/http://www.doom3world.org/phpbb2/images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div>]]></body></post><post id="p31492" date="Posted: Mon Aug 09, 2004 6:54 pm "><author>iceheart</author><body><![CDATA[<div class="postbody">I was asking that because everything I know about the engine and pak files (from older id engines) says that unpacked files override the pak files, but your files do not replace any existing files and so there should be no difference if the files are in paks or in folders, so I was just wondering where exactly the conflict occurs (as in, doom3 will not load the mtr file for some reason, or whatever other thing is causing this behaviour?).</div>]]></body></post><post id="p31500" date="Posted: Mon Aug 09, 2004 7:06 pm "><author>rich_is_bored</author><body><![CDATA[<div class="postbody">I'm not sure why it doesn't work. Technically, it should. But the only way to find the actual code reponsible for the problem is to read every script, def, and otherwise uncompiled bit in the game to narrow the problem down.
<br /><br />My hands are full updating definitions, revising tutorials, ect... I simply don't have the time.
<br /><br />All I can do is make educated guesses and since I know on my end that the PK4s are not extracted and they are on yours, it's a relativley safe assumption that the extracted PK4s are your problem.
<br /><br />If you could just work with me by cleaning out your base directory and trying the tutorial that way, I'd honestly appriciate it. If it still doesn't work then I'll have a reason to troubleshoot the issue further.</div>]]></body></post><post id="p31503" date="Posted: Mon Aug 09, 2004 7:10 pm "><author>iceheart</author><body><![CDATA[<div class="postbody">I think I did that just now, but there's no change, I'm going to try reinstalling the whole thing and try it on a clean install.</div>]]></body></post><post id="p31512" date="Posted: Mon Aug 09, 2004 7:17 pm "><author>rich_is_bored</author><body><![CDATA[<div class="postbody">You edited my mtr file. Did you ever change it back?
<br /><br />The reason it points to tutorials/canister is because that is the name I assigned the surface in Lightwave.
<br /><br />And no offense but, when you say you <span style="font-weight: bold">think</span> you cleaned out your base directory did you actually do it or just think about it? <img src="https://web.archive.org/web/20121102213149im_/http://www.doom3world.org/phpbb2/images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" /></div>]]></body></post><post id="p31515" date="Posted: Mon Aug 09, 2004 7:21 pm "><author>iceheart</author><body><![CDATA[<div class="postbody">Oops <img src="https://web.archive.org/web/20121102213149im_/http://www.doom3world.org/phpbb2/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />Well anyway I'll have a clean install to test it on in a couple of minutes, after that I'm going to go the old fashioned way of having one clean install and one editing install <img src="https://web.archive.org/web/20121102213149im_/http://www.doom3world.org/phpbb2/images/smilies/icon_smile.gif" alt=":)" title="Smile" />.</div>]]></body></post><post id="p31519" date="Posted: Mon Aug 09, 2004 7:23 pm "><author>iceheart</author><body><![CDATA[<div class="postbody">When I said that I though I had cleaned it out I meant that I had the pak files in the base and I thought I had deleted all the individual files that came out of them, but I wasn't sure, hence I am reinstalling.</div>]]></body></post><post id="p31539" date="Posted: Mon Aug 09, 2004 7:50 pm "><author>iceheart</author><body><![CDATA[<div class="postbody">Done reinstalling, on a completely clean D3 install it works (I think, it has shadows and is solid grey, with the "fingers" solid white).</div>]]></body></post><post id="p31551" date="Posted: Mon Aug 09, 2004 8:16 pm "><author>rich_is_bored</author><body><![CDATA[<div class="postbody">That's it. Thanks.
<br /><br />You were getting me all worked up for nothing. <img src="https://web.archive.org/web/20121102213149im_/http://www.doom3world.org/phpbb2/images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div>]]></body></post><post id="p31553" date="Posted: Mon Aug 09, 2004 8:20 pm "><author>iceheart</author><body><![CDATA[<div class="postbody">Hey while we're on the subject of scripting, I was wondering if you'd need any help populating this list: <a href="https://web.archive.org/web/20121102213149/http://www.doom3world.org/index.php?milkme=list_scriptarg" class="postlink">http://www.doom3world.org/index.php?milkme=list_scriptarg</a>, I would be happy to help, I have a little bit of programming experience along with considerable experience in sinscript, morpheus script along with the STEF2 scripting system, which are all "predecessors" in a sense of the D3 script, so I think I could be useful in making some sense out of it.</div>]]></body></post><post id="p31556" date="Posted: Mon Aug 09, 2004 8:24 pm "><author>rich_is_bored</author><body><![CDATA[<div class="postbody">Yes please! I would really appriciate the help.
<br /><br />Just add anything you can in posts here...
<br /><br /><!-- m --><a class="postlink" href="https://web.archive.org/web/20121102213149/http://www.doom3world.org/phpbb2/viewtopic.php?t=2562">http://www.doom3world.org/phpbb2/viewtopic.php?t=2562</a><!-- m -->
<br /><br />... and I'll edit them in.
<br /><br />Feel free to post comments in the database on the main page aswell.</div>]]></body></post></posts></thread></xml>
