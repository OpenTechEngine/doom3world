<?xml version="1.0" encoding="UTF-8"?>
<xml><thread id="5383"><title>Complete GUI Scripting - 6: Creating a new HUD GUI</title><posts><post id="p46060" date="Posted: Fri Sep 03, 2004 12:30 am "><author>zeh</author><body><![CDATA[<div class="postbody">Welcome back to lesson number six (also seventh) in the GUI scripting series.
<br /><br />This tutorial starts the HUD series, where we'll implement a new HUD from start to finish. For those who doesn't know, HUD stands for "Heads Up Display", and it's what you see on top of the game renderings when you're playing the game: it's the health, ammo, armor, and other displays that inform the player his status. Well, we'll be creating a new HUD from scratch, and while we'll be applying it to the singleplayer game for ease sampling, it's the same concept that's used on multiplayer HUDs. Also, we'll create a new correctly set MOD in your DOOM 3 game.
<br /><br /><span style="font-size: 167%; line-height: normal"><span style="font-weight: bold">Complete GUI Scripting - 6: Creating a new HUD GUI</span></span>
<br /><br />The HUD is arguably the most important GUI element on any FPS modification; it's with what the user will have to interact with during most of his time with the game, and it needs to be used fast during crucial times (at the heat of a battle, a look at the 'health' meter must be possible in the easiest and fastest way possible).
<br /><br />There are two basic ways you can create a new HUD for your DOOM 3 modification. You can use the built-in HUD script and modify a few things to adapt it to your needs, or create a new one from scratch.
<br /><br />While it can be considered overkill in some cases - you have to re-add several features that are already built-in - creating a HUD from scratch is the right way when you are creating a new gametype that won't benefit from assets included in the default HUD. A racing game, for example, would require a brand new HUD script - a standard capture the flag game wouldn't, you would just need to add the flag stats somewhere on the default one.
<br /><br />In order to better broaden the possibilities for future modifications, we'll be building one from the start. Also, I won't use the built-in GUI editor for that; while using the editor would be good for creating the first raw sketches and assembling visual assets, it's just not efficient enough to test a HUD script. We'll, rather, edit the script on any text editor (notepad will do) and test it in-game, in a near-real time.
<br /><br /><br /><span style="font-weight: bold">Set up us the MOD</span>
<br /><br />The first step is to create a new MOD to be used by the DOOM 3 engine. Of course, a MOD or modification is something that adds new features to the original game, or replaces some of the standard content. Each MOD uses a separate workspace, and while you might try to combine mods (by putting all the files in the same place), this is usually a bad idea. We'll create a correct MOD workspace.
<br /><br />Look on your DOOM 3 folder. You'll probably see different files and subdirectories. In any case, this is what a standard installation of the game will look like:
<br /><br /><img src="https://web.archive.org/web/20090903230958im_/http://hosted.zeh.com.br/doom3/tutorials/tut6_01.png" alt="Image" /><br /><br />The "/base" directory contains all the main game data; likewise, MOD directories would be a sibling of this base directory and be located at the same dir.
<br /><br />The first step is setting up a mod is to create a new directory for our MOD; so browse to the DOOM 3 directory and create a new folder; we'll name this new folder 'classichud' (that's the example I'll use for our tutorial-built HUD; more on this later on).
<br /><br />This is how a standard DOOM 3 directory will look like after this 'classichud' directory has been created.
<br /><br /><img src="https://web.archive.org/web/20090903230958im_/http://hosted.zeh.com.br/doom3/tutorials/tut6_02.png" alt="Image" /><br /><br />With that, our mod directory is ready to go.
<br /><br /><br /><span style="font-weight: bold">Adding assets to the MOD directory</span>
<br /><br />We're ready to add content to out mod. We have to create assets for our 'classichud' mod in its folder -- those assets that will replace the standard game ones. Browse to the folder you just created, and we'll create a new folder, called 'guis'.
<br /><br /><img src="https://web.archive.org/web/20090903230958im_/http://hosted.zeh.com.br/doom3/tutorials/tut6_03.png" alt="Image" /><br /><br />Since we will create new versions of the standard assets (a new HUD script to replace the default one), we need to be sure to place them on the correct location - the same used in DOOM 3's original paks. In DOOM 3, the singleplayer HUD is always the GUI script at &lt;doom3&gt;/&lt;mod-dir&gt;/guis/hud.gui, so that's what we need to create.
<br /><br /><br />Open up notepad (or your text editor of choice), create a new empty document, and immediately save it as "&lt;doom 3&gt;/classichud/guis/hud.gui" -- the HUD script we'll work with.
<br /><br /><br /><img src="https://web.archive.org/web/20090903230958im_/http://hosted.zeh.com.br/doom3/tutorials/tut6_04.png" alt="Image" /><br /><br /><br />Now, with this file still opened, let's create the base of our HUD. First, we'll create a simple test template. Type this on GUI script source.
<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">windowDef Desktop {<br />   rect      0,0,640,480<br />   visible   1<br />   noevents  1<br />   nocursor  1<br />   windowDef test {<br />      rect      10, 10, 100, 100<br />      text      "test"<br />      font      "fonts/english"<br />   }<br />}</div><br /><br />Pretty much self-explanatory; a simple GUI script with an text windowDef that'll allow us to test if it's working. With this dummy in place, it's time for us to finally test it in game.<br /><br /><br /><span style="font-weight: bold">Launch DOOM</span><br /><br />Keep the document still open. Now, there are two ways we can run MODs on the DOOM 3 engine: one, using a command-line argument, and two, setting up the mod and selecting it from the "Mods" menu in the game.<br /><br />Calling it from the mods menu would require us to create a PK4 package (which is just a ZIP file with a different extension), so we'll instead opt for the fast choice and create a command-line argument that'll call the game running our mod. To do that, create a new shortcut to the DOOM 3 game (duplicate your original shortcut create by the game installer) and change the "target" field of the shortcut to be sure it's running the game with these parameters:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&lt;your path&gt;\Doom3.exe +seta r_mode 3 +set r_fullscreen 0 +set fs_game classichud +map game/mp/d3dm1</div><br /><br />What this code will do is: run the game on mode 3 (640x480), windowed, using the "classichud" mod dir, and open the map d3dm1 (Tomiko Reactor) as default. It'll be pretty handy to test the HUD script this way.<br /><br />After changing those shortcuts settings, run the game to check on your HUD at work.<br /><br /><img src="https://web.archive.org/web/20090903230958im_/http://hosted.zeh.com.br/doom3/tutorials/tut6_05.jpg" alt="Image" /><br /><br />Okey! It's working or what? The original HUD is gone, and we have our lone 'test' windowDef sitting at the top left corner of the screen.<br /><br />Now, here's the handy thing: alt+tab to your script editing program, and change the "test" string on the windowDef to anything you like. Hell, even change the location of the windowDef. Here's what I've done to it.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">windowDef Desktop {<br />   rect      0,0,640,480<br />   visible   1<br />   noevents  1<br />   nocursor  1<br />   windowDef test {<br />      rect      10, 100, 640, 460<br />      text      "HELLO."<br />      textalign 1<br />      textscale 1.6<br />      font      "fonts/english"<br />   }<br />}</div><br /><br />Now, save it, alt+tab back to DOOM 3, pull down the console, and type this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">reloadguis</div>
<br /><br />Pull the console back up, and voila.
<br /><br /><img src="https://web.archive.org/web/20090903230958im_/http://hosted.zeh.com.br/doom3/tutorials/tut6_06.jpg" alt="Image" /><br /><br />So, without reloading anything, it's easy to test the HUD in-game right after you change it, in almost-near real time. Can't get much better than that. This is how we'll create and test the HUD in the next few lessons.
<br /><br />This pretty much wraps up this introductory tutorial. In the next ones we'll get our hands dirty and implement a real HUD - the classic DOOM 1 HUD, with bleeding marine face and all that. See you there.
<br /><br /><a href="https://web.archive.org/web/20090903230958/http://hosted.zeh.com.br/doom3/tutorials/tut6.zip" class="postlink">Download source and example files</a> (1kb)</div>]]></body></post><post id="p46062" date="Posted: Fri Sep 03, 2004 12:32 am "><author>zeh</author><body><![CDATA[<div class="postbody">A PS: It has been a while since the last lesson was published, but it's because I've been messing with too much stuff that depends on the DOOM 3 SDK to be released. In fact, this small new series (HUD GUI) will need the SDK (or some material that's not released for that matter) later on, but I've decided to start it already, hoping the SDK will have been published when I get to those final lessons.
<br /><br />Also, I recon this is another 'slow' tutorial and doesn't give too much to be done yet. It's because it's just a start (that some people might need) to the next few ones. The classic hud script is already complete (the only part missing is the font ones, that depends on the sdk or info on the fonts .dat files), I'm just writing the lessons in detail now.</div>]]></body></post><post id="p46079" date="Posted: Fri Sep 03, 2004 1:25 am "><author>Lunaran</author><body><![CDATA[<div class="postbody">The font format hasn't changed, as far as I can tell, from Quake3.
<br /><br />RR2DO2 wrote a little utility that'll render all the proper TGA's and .dat files from a true type font, which you can find here:
<br /><!-- m --><a class="postlink" href="https://web.archive.org/web/20090903230958/http://www.q3f.com/q3font.html">http://www.q3f.com/q3font.html</a><!-- m -->
<br /><br />A visual comparison of the two different .dat files in a text editor isn't terribly useful, but they appear the same.  Q3Font also reverse engineers Doom3 font .dat's with the same effectiveness as Q3 font .dat's, with no errors, so I think it's a safe indicator that the .dat formatting hasn't changed at all.
<br /><br />But, I've used q3font to make dats and tga's out of a new font, and the damn things simply won't work in the game.  I use one in a GUI and it just falls back on the default GUI font.  I played the "change the folder names and shit" game to no avail.
<br /><br />I could wait for the SDK but who knows when it's coming, and I'm impatient.  That help you out at all, zeh?</div>]]></body></post><post id="p46084" date="Posted: Fri Sep 03, 2004 1:37 am "><author>zeh</author><body><![CDATA[<div class="postbody">Wow, Lunaran, it sure does. I was never that heavy into Q3 modding, so I didn't know of that tool -- I'll check it out now. Even though .ttf -&gt; .dat won't help me much (I'm using colored, bitmapped fonts), I'll check what it can do with D3's .dat files using that tool. If I can at least hard-code a new .dat file or build a conversor of some kind, it's enough to get me started on that while the SDK isn't out.
<br /><br />Thanks.</div>]]></body></post><post id="p46115" date="Posted: Fri Sep 03, 2004 3:19 am "><author>Lunaran</author><body><![CDATA[<div class="postbody">You're totally welcome so long as you share your findings with me. <img src="https://web.archive.org/web/20090903230958im_/http://www.doom3world.org/phpbb2/images/smilies/icon_smile.gif" alt=":)" title="Smile" />  If you can get a custom font to work as advertised I'll name my firstborn 'Zeh.'  (I just had the brainstorm that maybe there's a console command for making fonts, just like there is for renderbumping, but I hunted about with the tab key and couldn't find it.)
<br /><br />And you <span style="font-style: italic">can</span> actually do colored bitmapped fonts with the .dat tool.  They're technically one and the same - q3font prints out TGA's that are just white RGB channels and then the text for the alpha channel, but nothing says the color channels have to be white.  I don't think anything's stopping you from painting whatever you want in. 
<br /><br />I'm guessing you're trying to do the original rough red numbers from the Doom HUD - if I was you I'd just grab doom.ttf off some site, q3fontify it, then load the TGA's into your adobe image editing program of choice and make them look like whatever you want, while preserving the alpha channel.</div>]]></body></post><post id="p46310" date="Posted: Fri Sep 03, 2004 4:14 pm "><author>zeh</author><body><![CDATA[<div class="postbody">I know about the way the font uses the tga files, it's just that I wanted to create it directly from the bitmaps instead of having to use a dummy ttf for starters. In fact I think I could do that with a ttf file full of boxes at the same size of each glyph.. but for now I'll try the best/easiest/most simple way since it's not only for me, but also for the tutorial <img src="https://web.archive.org/web/20090903230958im_/http://www.doom3world.org/phpbb2/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />I'll mess with q3font's generated .fnt files, it looks like there's some compilation that can be done easily if .fnt is a readable/ascii file format. I'll try that as soon as the next two lessons are written.</div>]]></body></post><post id="p47628" date="Posted: Mon Sep 06, 2004 6:39 pm "><author>b0ksah</author><body><![CDATA[<div class="postbody">Dumdidum ... *bump* <img src="https://web.archive.org/web/20090903230958im_/http://www.doom3world.org/phpbb2/images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div>]]></body></post></posts></thread></xml>
